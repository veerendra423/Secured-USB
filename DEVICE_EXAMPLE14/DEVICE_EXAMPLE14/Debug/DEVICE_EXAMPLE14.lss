
DEVICE_EXAMPLE14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000083dc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004083dc  004083dc  000183dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a80  20400000  004083e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000630  20400a80  00408e64  00020a80  2**2
                  ALLOC
  4 .stack        00002000  204010b0  00409494  00020a80  2**0
                  ALLOC
  5 .heap         00000200  204030b0  0040b494  00020a80  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020a80  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020aae  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002ae2a  00000000  00000000  00020b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005b05  00000000  00000000  0004b931  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a088  00000000  00000000  00051436  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001090  00000000  00000000  0005b4be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001308  00000000  00000000  0005c54e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002823b  00000000  00000000  0005d856  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001892e  00000000  00000000  00085a91  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009cd0d  00000000  00000000  0009e3bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000032d0  00000000  00000000  0013b0cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b0 30 40 20 f5 46 40 00 f1 46 40 00 f1 46 40 00     .0@ .F@..F@..F@.
  400010:	f1 46 40 00 f1 46 40 00 f1 46 40 00 00 00 00 00     .F@..F@..F@.....
	...
  40002c:	f1 46 40 00 f1 46 40 00 00 00 00 00 f1 46 40 00     .F@..F@......F@.
  40003c:	f1 46 40 00 f1 46 40 00 f1 46 40 00 f1 46 40 00     .F@..F@..F@..F@.
  40004c:	f1 46 40 00 f1 46 40 00 f1 46 40 00 f1 46 40 00     .F@..F@..F@..F@.
  40005c:	f1 46 40 00 f1 46 40 00 00 00 00 00 f9 2d 40 00     .F@..F@......-@.
  40006c:	0d 2e 40 00 21 2e 40 00 f1 46 40 00 f1 46 40 00     ..@.!.@..F@..F@.
  40007c:	f1 46 40 00 35 2e 40 00 49 2e 40 00 f1 46 40 00     .F@.5.@.I.@..F@.
  40008c:	f1 46 40 00 f1 46 40 00 f1 46 40 00 f1 46 40 00     .F@..F@..F@..F@.
  40009c:	f1 46 40 00 f1 46 40 00 f1 46 40 00 f1 46 40 00     .F@..F@..F@..F@.
  4000ac:	f1 46 40 00 f1 46 40 00 f1 46 40 00 f1 46 40 00     .F@..F@..F@..F@.
  4000bc:	f1 46 40 00 f1 46 40 00 f1 46 40 00 19 38 40 00     .F@..F@..F@..8@.
  4000cc:	f1 46 40 00 00 00 00 00 f1 46 40 00 00 00 00 00     .F@......F@.....
  4000dc:	f1 46 40 00 f1 46 40 00 f1 46 40 00 f1 46 40 00     .F@..F@..F@..F@.
  4000ec:	f1 46 40 00 f1 46 40 00 f1 46 40 00 f1 46 40 00     .F@..F@..F@..F@.
  4000fc:	f1 46 40 00 f1 46 40 00 f1 46 40 00 f1 46 40 00     .F@..F@..F@..F@.
  40010c:	f1 46 40 00 f1 46 40 00 00 00 00 00 00 00 00 00     .F@..F@.........
  40011c:	00 00 00 00 69 0f 40 00 f1 46 40 00 f1 46 40 00     ....i.@..F@..F@.
  40012c:	f1 46 40 00 f1 46 40 00 00 00 00 00 f1 46 40 00     .F@..F@......F@.
  40013c:	f1 46 40 00                                         .F@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400a80 	.word	0x20400a80
  40015c:	00000000 	.word	0x00000000
  400160:	004083e4 	.word	0x004083e4

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004083e4 	.word	0x004083e4
  4001a0:	20400a84 	.word	0x20400a84
  4001a4:	004083e4 	.word	0x004083e4
  4001a8:	00000000 	.word	0x00000000

004001ac <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  4001ac:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4001ae:	4b06      	ldr	r3, [pc, #24]	; (4001c8 <sd_mmc_configure_slot+0x1c>)
  4001b0:	6819      	ldr	r1, [r3, #0]
  4001b2:	7f8b      	ldrb	r3, [r1, #30]
  4001b4:	3300      	adds	r3, #0
  4001b6:	bf18      	it	ne
  4001b8:	2301      	movne	r3, #1
  4001ba:	7b4a      	ldrb	r2, [r1, #13]
  4001bc:	6809      	ldr	r1, [r1, #0]
  4001be:	4803      	ldr	r0, [pc, #12]	; (4001cc <sd_mmc_configure_slot+0x20>)
  4001c0:	7800      	ldrb	r0, [r0, #0]
  4001c2:	4c03      	ldr	r4, [pc, #12]	; (4001d0 <sd_mmc_configure_slot+0x24>)
  4001c4:	47a0      	blx	r4
  4001c6:	bd10      	pop	{r4, pc}
  4001c8:	20400a9c 	.word	0x20400a9c
  4001cc:	20400ac4 	.word	0x20400ac4
  4001d0:	004010c1 	.word	0x004010c1

004001d4 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4001d4:	b108      	cbz	r0, 4001da <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4001d6:	2004      	movs	r0, #4
  4001d8:	4770      	bx	lr
{
  4001da:	b510      	push	{r4, lr}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4001dc:	4b0e      	ldr	r3, [pc, #56]	; (400218 <sd_mmc_select_slot+0x44>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
  4001de:	7a9b      	ldrb	r3, [r3, #10]
  4001e0:	3b03      	subs	r3, #3
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4001e2:	b2db      	uxtb	r3, r3
  4001e4:	2b01      	cmp	r3, #1
  4001e6:	d90d      	bls.n	400204 <sd_mmc_select_slot+0x30>
	sd_mmc_slot_sel = slot;
  4001e8:	2200      	movs	r2, #0
  4001ea:	4b0c      	ldr	r3, [pc, #48]	; (40021c <sd_mmc_select_slot+0x48>)
  4001ec:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  4001ee:	4c0a      	ldr	r4, [pc, #40]	; (400218 <sd_mmc_select_slot+0x44>)
  4001f0:	4b0b      	ldr	r3, [pc, #44]	; (400220 <sd_mmc_select_slot+0x4c>)
  4001f2:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  4001f4:	4b0b      	ldr	r3, [pc, #44]	; (400224 <sd_mmc_select_slot+0x50>)
  4001f6:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  4001f8:	7aa0      	ldrb	r0, [r4, #10]
  4001fa:	2802      	cmp	r0, #2
  4001fc:	bf14      	ite	ne
  4001fe:	2000      	movne	r0, #0
  400200:	2001      	moveq	r0, #1
  400202:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400204:	4b04      	ldr	r3, [pc, #16]	; (400218 <sd_mmc_select_slot+0x44>)
  400206:	2202      	movs	r2, #2
  400208:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40020a:	4a07      	ldr	r2, [pc, #28]	; (400228 <sd_mmc_select_slot+0x54>)
  40020c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40020e:	2201      	movs	r2, #1
  400210:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
  400212:	2200      	movs	r2, #0
  400214:	779a      	strb	r2, [r3, #30]
  400216:	e7e7      	b.n	4001e8 <sd_mmc_select_slot+0x14>
  400218:	20400aa0 	.word	0x20400aa0
  40021c:	20400ac4 	.word	0x20400ac4
  400220:	20400a9c 	.word	0x20400a9c
  400224:	004001ad 	.word	0x004001ad
  400228:	00061a80 	.word	0x00061a80

0040022c <sd_mmc_cmd9_mci>:
{
  40022c:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  40022e:	4b09      	ldr	r3, [pc, #36]	; (400254 <sd_mmc_cmd9_mci+0x28>)
  400230:	681b      	ldr	r3, [r3, #0]
  400232:	8919      	ldrh	r1, [r3, #8]
  400234:	0409      	lsls	r1, r1, #16
  400236:	f641 3009 	movw	r0, #6921	; 0x1b09
  40023a:	4b07      	ldr	r3, [pc, #28]	; (400258 <sd_mmc_cmd9_mci+0x2c>)
  40023c:	4798      	blx	r3
  40023e:	4604      	mov	r4, r0
  400240:	b908      	cbnz	r0, 400246 <sd_mmc_cmd9_mci+0x1a>
}
  400242:	4620      	mov	r0, r4
  400244:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  400246:	4b03      	ldr	r3, [pc, #12]	; (400254 <sd_mmc_cmd9_mci+0x28>)
  400248:	6818      	ldr	r0, [r3, #0]
  40024a:	300e      	adds	r0, #14
  40024c:	4b03      	ldr	r3, [pc, #12]	; (40025c <sd_mmc_cmd9_mci+0x30>)
  40024e:	4798      	blx	r3
	return true;
  400250:	e7f7      	b.n	400242 <sd_mmc_cmd9_mci+0x16>
  400252:	bf00      	nop
  400254:	20400a9c 	.word	0x20400a9c
  400258:	004011a9 	.word	0x004011a9
  40025c:	004011d5 	.word	0x004011d5

00400260 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400260:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400262:	4b04      	ldr	r3, [pc, #16]	; (400274 <sd_mmc_deselect_slot+0x14>)
  400264:	781b      	ldrb	r3, [r3, #0]
  400266:	b103      	cbz	r3, 40026a <sd_mmc_deselect_slot+0xa>
  400268:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  40026a:	2000      	movs	r0, #0
  40026c:	4b02      	ldr	r3, [pc, #8]	; (400278 <sd_mmc_deselect_slot+0x18>)
  40026e:	4798      	blx	r3
	}
}
  400270:	e7fa      	b.n	400268 <sd_mmc_deselect_slot+0x8>
  400272:	bf00      	nop
  400274:	20400ac4 	.word	0x20400ac4
  400278:	00401185 	.word	0x00401185

0040027c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  40027c:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40027e:	2204      	movs	r2, #4
  400280:	4b03      	ldr	r3, [pc, #12]	; (400290 <sd_mmc_init+0x14>)
  400282:	729a      	strb	r2, [r3, #10]
		//printf("entered_into for loop.......\r\n");
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  400284:	22ff      	movs	r2, #255	; 0xff
  400286:	4b03      	ldr	r3, [pc, #12]	; (400294 <sd_mmc_init+0x18>)
  400288:	701a      	strb	r2, [r3, #0]
	//printf("exit_for loop.......\r\n");
	driver_init();
  40028a:	4b03      	ldr	r3, [pc, #12]	; (400298 <sd_mmc_init+0x1c>)
  40028c:	4798      	blx	r3
  40028e:	bd08      	pop	{r3, pc}
  400290:	20400aa0 	.word	0x20400aa0
  400294:	20400ac4 	.word	0x20400ac4
  400298:	00401085 	.word	0x00401085

0040029c <sd_mmc_check>:
	//printf("nb slot.......\r\n");
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  40029c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4002a0:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4002a2:	4ba2      	ldr	r3, [pc, #648]	; (40052c <sd_mmc_check+0x290>)
  4002a4:	4798      	blx	r3
  4002a6:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  4002a8:	2801      	cmp	r0, #1
  4002aa:	d005      	beq.n	4002b8 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  4002ac:	4ba0      	ldr	r3, [pc, #640]	; (400530 <sd_mmc_check+0x294>)
  4002ae:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  4002b0:	4620      	mov	r0, r4
  4002b2:	b015      	add	sp, #84	; 0x54
  4002b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
  4002b8:	4b9e      	ldr	r3, [pc, #632]	; (400534 <sd_mmc_check+0x298>)
  4002ba:	681b      	ldr	r3, [r3, #0]
  4002bc:	2201      	movs	r2, #1
  4002be:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4002c0:	2500      	movs	r5, #0
  4002c2:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca = 0;
  4002c4:	811d      	strh	r5, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");
  4002c6:	489c      	ldr	r0, [pc, #624]	; (400538 <sd_mmc_check+0x29c>)
  4002c8:	4b9c      	ldr	r3, [pc, #624]	; (40053c <sd_mmc_check+0x2a0>)
  4002ca:	4798      	blx	r3
	driver_send_clock();
  4002cc:	4b9c      	ldr	r3, [pc, #624]	; (400540 <sd_mmc_check+0x2a4>)
  4002ce:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4002d0:	4629      	mov	r1, r5
  4002d2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4002d6:	4b9b      	ldr	r3, [pc, #620]	; (400544 <sd_mmc_check+0x2a8>)
  4002d8:	4798      	blx	r3
  4002da:	b948      	cbnz	r0, 4002f0 <sd_mmc_check+0x54>
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
  4002dc:	489a      	ldr	r0, [pc, #616]	; (400548 <sd_mmc_check+0x2ac>)
  4002de:	4b97      	ldr	r3, [pc, #604]	; (40053c <sd_mmc_check+0x2a0>)
  4002e0:	4798      	blx	r3
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4002e2:	4b94      	ldr	r3, [pc, #592]	; (400534 <sd_mmc_check+0x298>)
  4002e4:	681b      	ldr	r3, [r3, #0]
  4002e6:	2403      	movs	r4, #3
  4002e8:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
  4002ea:	4b91      	ldr	r3, [pc, #580]	; (400530 <sd_mmc_check+0x294>)
  4002ec:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4002ee:	e7df      	b.n	4002b0 <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4002f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4002f4:	f245 5008 	movw	r0, #21768	; 0x5508
  4002f8:	4b92      	ldr	r3, [pc, #584]	; (400544 <sd_mmc_check+0x2a8>)
  4002fa:	4798      	blx	r3
  4002fc:	2800      	cmp	r0, #0
  4002fe:	f040 8090 	bne.w	400422 <sd_mmc_check+0x186>
	*v2 = 0;
  400302:	2500      	movs	r5, #0
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400304:	4b8b      	ldr	r3, [pc, #556]	; (400534 <sd_mmc_check+0x298>)
  400306:	681b      	ldr	r3, [r3, #0]
  400308:	7adb      	ldrb	r3, [r3, #11]
  40030a:	f013 0f01 	tst.w	r3, #1
  40030e:	f040 809e 	bne.w	40044e <sd_mmc_check+0x1b2>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400312:	2100      	movs	r1, #0
  400314:	f245 1003 	movw	r0, #20739	; 0x5103
  400318:	4b8a      	ldr	r3, [pc, #552]	; (400544 <sd_mmc_check+0x2a8>)
  40031a:	4798      	blx	r3
  40031c:	2800      	cmp	r0, #0
  40031e:	d0dd      	beq.n	4002dc <sd_mmc_check+0x40>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400320:	4d84      	ldr	r5, [pc, #528]	; (400534 <sd_mmc_check+0x298>)
  400322:	682e      	ldr	r6, [r5, #0]
  400324:	4b89      	ldr	r3, [pc, #548]	; (40054c <sd_mmc_check+0x2b0>)
  400326:	4798      	blx	r3
  400328:	0c00      	lsrs	r0, r0, #16
  40032a:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40032c:	682b      	ldr	r3, [r5, #0]
  40032e:	7adb      	ldrb	r3, [r3, #11]
  400330:	f013 0f01 	tst.w	r3, #1
  400334:	d034      	beq.n	4003a0 <sd_mmc_check+0x104>
		if (!sd_mmc_cmd9_mci()) {
  400336:	4b86      	ldr	r3, [pc, #536]	; (400550 <sd_mmc_check+0x2b4>)
  400338:	4798      	blx	r3
  40033a:	2800      	cmp	r0, #0
  40033c:	d0ce      	beq.n	4002dc <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  40033e:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400340:	7c5a      	ldrb	r2, [r3, #17]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400342:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400346:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  40034a:	4982      	ldr	r1, [pc, #520]	; (400554 <sd_mmc_check+0x2b8>)
  40034c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400354:	fb02 f201 	mul.w	r2, r2, r1
  400358:	497f      	ldr	r1, [pc, #508]	; (400558 <sd_mmc_check+0x2bc>)
  40035a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40035e:	fb02 f201 	mul.w	r2, r2, r1
  400362:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400364:	7b9a      	ldrb	r2, [r3, #14]
  400366:	0992      	lsrs	r2, r2, #6
  400368:	f040 8242 	bne.w	4007f0 <sd_mmc_check+0x554>
  40036c:	7d99      	ldrb	r1, [r3, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40036e:	7d58      	ldrb	r0, [r3, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400370:	7d1a      	ldrb	r2, [r3, #20]
  400372:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400374:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  400378:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40037c:	7e18      	ldrb	r0, [r3, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40037e:	7dd9      	ldrb	r1, [r3, #23]
  400380:	0049      	lsls	r1, r1, #1
  400382:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  400386:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40038a:	3201      	adds	r2, #1
  40038c:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400390:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400392:	408a      	lsls	r2, r1
  400394:	7cd9      	ldrb	r1, [r3, #19]
  400396:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40039a:	408a      	lsls	r2, r1
				/ 1024;
  40039c:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  40039e:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  4003a0:	4b64      	ldr	r3, [pc, #400]	; (400534 <sd_mmc_check+0x298>)
  4003a2:	681b      	ldr	r3, [r3, #0]
  4003a4:	8919      	ldrh	r1, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4003a6:	0409      	lsls	r1, r1, #16
  4003a8:	f243 1007 	movw	r0, #12551	; 0x3107
  4003ac:	4b65      	ldr	r3, [pc, #404]	; (400544 <sd_mmc_check+0x2a8>)
  4003ae:	4798      	blx	r3
  4003b0:	2800      	cmp	r0, #0
  4003b2:	d093      	beq.n	4002dc <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4003b4:	4b5f      	ldr	r3, [pc, #380]	; (400534 <sd_mmc_check+0x298>)
  4003b6:	681b      	ldr	r3, [r3, #0]
  4003b8:	7ada      	ldrb	r2, [r3, #11]
  4003ba:	f012 0f01 	tst.w	r2, #1
  4003be:	f000 825b 	beq.w	400878 <sd_mmc_check+0x5dc>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4003c2:	8919      	ldrh	r1, [r3, #8]
  4003c4:	0409      	lsls	r1, r1, #16
  4003c6:	f241 1037 	movw	r0, #4407	; 0x1137
  4003ca:	4b5e      	ldr	r3, [pc, #376]	; (400544 <sd_mmc_check+0x2a8>)
  4003cc:	4798      	blx	r3
  4003ce:	2800      	cmp	r0, #0
  4003d0:	d084      	beq.n	4002dc <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4003d2:	2301      	movs	r3, #1
  4003d4:	9300      	str	r3, [sp, #0]
  4003d6:	2208      	movs	r2, #8
  4003d8:	2100      	movs	r1, #0
  4003da:	4860      	ldr	r0, [pc, #384]	; (40055c <sd_mmc_check+0x2c0>)
  4003dc:	4d60      	ldr	r5, [pc, #384]	; (400560 <sd_mmc_check+0x2c4>)
  4003de:	47a8      	blx	r5
  4003e0:	2800      	cmp	r0, #0
  4003e2:	f43f af7b 	beq.w	4002dc <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
  4003e6:	2101      	movs	r1, #1
  4003e8:	a804      	add	r0, sp, #16
  4003ea:	4b5e      	ldr	r3, [pc, #376]	; (400564 <sd_mmc_check+0x2c8>)
  4003ec:	4798      	blx	r3
  4003ee:	2800      	cmp	r0, #0
  4003f0:	f43f af74 	beq.w	4002dc <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
  4003f4:	4b5c      	ldr	r3, [pc, #368]	; (400568 <sd_mmc_check+0x2cc>)
  4003f6:	4798      	blx	r3
  4003f8:	2800      	cmp	r0, #0
  4003fa:	f43f af6f 	beq.w	4002dc <sd_mmc_check+0x40>
	switch (SD_SCR_SD_SPEC(scr)) {
  4003fe:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400402:	f003 030f 	and.w	r3, r3, #15
  400406:	2b01      	cmp	r3, #1
  400408:	f000 8283 	beq.w	400912 <sd_mmc_check+0x676>
  40040c:	2b00      	cmp	r3, #0
  40040e:	f000 822f 	beq.w	400870 <sd_mmc_check+0x5d4>
  400412:	2b02      	cmp	r3, #2
  400414:	f000 8282 	beq.w	40091c <sd_mmc_check+0x680>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400418:	4b46      	ldr	r3, [pc, #280]	; (400534 <sd_mmc_check+0x298>)
  40041a:	681b      	ldr	r3, [r3, #0]
  40041c:	2210      	movs	r2, #16
  40041e:	731a      	strb	r2, [r3, #12]
  400420:	e22a      	b.n	400878 <sd_mmc_check+0x5dc>
	resp = driver_get_response();
  400422:	4b4a      	ldr	r3, [pc, #296]	; (40054c <sd_mmc_check+0x2b0>)
  400424:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  400426:	f1b0 3fff 	cmp.w	r0, #4294967295
  40042a:	f000 82c3 	beq.w	4009b4 <sd_mmc_check+0x718>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  40042e:	f3c0 030b 	ubfx	r3, r0, #0, #12
  400432:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
  400436:	d005      	beq.n	400444 <sd_mmc_check+0x1a8>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
  400438:	4602      	mov	r2, r0
  40043a:	494c      	ldr	r1, [pc, #304]	; (40056c <sd_mmc_check+0x2d0>)
  40043c:	484c      	ldr	r0, [pc, #304]	; (400570 <sd_mmc_check+0x2d4>)
  40043e:	4b3f      	ldr	r3, [pc, #252]	; (40053c <sd_mmc_check+0x2a0>)
  400440:	4798      	blx	r3
  400442:	e74b      	b.n	4002dc <sd_mmc_check+0x40>
	sd_mmc_debug("SD card V2\n\r");
  400444:	484b      	ldr	r0, [pc, #300]	; (400574 <sd_mmc_check+0x2d8>)
  400446:	4b3d      	ldr	r3, [pc, #244]	; (40053c <sd_mmc_check+0x2a0>)
  400448:	4798      	blx	r3
	*v2 = 1;
  40044a:	2501      	movs	r5, #1
  40044c:	e75a      	b.n	400304 <sd_mmc_check+0x68>
	printf("Sd card...:%s\n",__func__);
  40044e:	494a      	ldr	r1, [pc, #296]	; (400578 <sd_mmc_check+0x2dc>)
  400450:	484a      	ldr	r0, [pc, #296]	; (40057c <sd_mmc_check+0x2e0>)
  400452:	4b3a      	ldr	r3, [pc, #232]	; (40053c <sd_mmc_check+0x2a0>)
  400454:	4798      	blx	r3
  400456:	2d00      	cmp	r5, #0
  400458:	4f49      	ldr	r7, [pc, #292]	; (400580 <sd_mmc_check+0x2e4>)
  40045a:	bf14      	ite	ne
  40045c:	46b9      	movne	r9, r7
  40045e:	f44f 19fc 	moveq.w	r9, #2064384	; 0x1f8000
  400462:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400466:	f04f 0800 	mov.w	r8, #0
  40046a:	4e36      	ldr	r6, [pc, #216]	; (400544 <sd_mmc_check+0x2a8>)
		resp = driver_get_response();
  40046c:	4f37      	ldr	r7, [pc, #220]	; (40054c <sd_mmc_check+0x2b0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40046e:	4641      	mov	r1, r8
  400470:	f241 1037 	movw	r0, #4407	; 0x1137
  400474:	47b0      	blx	r6
  400476:	b180      	cbz	r0, 40049a <sd_mmc_check+0x1fe>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  400478:	4649      	mov	r1, r9
  40047a:	f244 5029 	movw	r0, #17705	; 0x4529
  40047e:	47b0      	blx	r6
  400480:	2800      	cmp	r0, #0
  400482:	d035      	beq.n	4004f0 <sd_mmc_check+0x254>
		resp = driver_get_response();
  400484:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  400486:	2800      	cmp	r0, #0
  400488:	db37      	blt.n	4004fa <sd_mmc_check+0x25e>
		if (retry-- == 0) {
  40048a:	3d01      	subs	r5, #1
  40048c:	d1ef      	bne.n	40046e <sd_mmc_check+0x1d2>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
  40048e:	4602      	mov	r2, r0
  400490:	4939      	ldr	r1, [pc, #228]	; (400578 <sd_mmc_check+0x2dc>)
  400492:	483c      	ldr	r0, [pc, #240]	; (400584 <sd_mmc_check+0x2e8>)
  400494:	4b29      	ldr	r3, [pc, #164]	; (40053c <sd_mmc_check+0x2a0>)
  400496:	4798      	blx	r3
  400498:	e003      	b.n	4004a2 <sd_mmc_check+0x206>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
  40049a:	4937      	ldr	r1, [pc, #220]	; (400578 <sd_mmc_check+0x2dc>)
  40049c:	483a      	ldr	r0, [pc, #232]	; (400588 <sd_mmc_check+0x2ec>)
  40049e:	4b27      	ldr	r3, [pc, #156]	; (40053c <sd_mmc_check+0x2a0>)
  4004a0:	4798      	blx	r3
			sd_mmc_debug("Start MMC Install\n\r");
  4004a2:	483a      	ldr	r0, [pc, #232]	; (40058c <sd_mmc_check+0x2f0>)
  4004a4:	4b25      	ldr	r3, [pc, #148]	; (40053c <sd_mmc_check+0x2a0>)
  4004a6:	4798      	blx	r3
			sd_mmc_card->type = CARD_TYPE_MMC;
  4004a8:	4b22      	ldr	r3, [pc, #136]	; (400534 <sd_mmc_check+0x298>)
  4004aa:	681b      	ldr	r3, [r3, #0]
  4004ac:	2202      	movs	r2, #2
  4004ae:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4004b0:	2100      	movs	r1, #0
  4004b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4004b6:	4b23      	ldr	r3, [pc, #140]	; (400544 <sd_mmc_check+0x2a8>)
  4004b8:	4798      	blx	r3
  4004ba:	2800      	cmp	r0, #0
  4004bc:	f43f af0e 	beq.w	4002dc <sd_mmc_check+0x40>
  4004c0:	f241 0568 	movw	r5, #4200	; 0x1068
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4004c4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 400580 <sd_mmc_check+0x2e4>
  4004c8:	4f1e      	ldr	r7, [pc, #120]	; (400544 <sd_mmc_check+0x2a8>)
		resp = driver_get_response();
  4004ca:	4e20      	ldr	r6, [pc, #128]	; (40054c <sd_mmc_check+0x2b0>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4004cc:	4641      	mov	r1, r8
  4004ce:	f244 5001 	movw	r0, #17665	; 0x4501
  4004d2:	47b8      	blx	r7
  4004d4:	2800      	cmp	r0, #0
  4004d6:	d061      	beq.n	40059c <sd_mmc_check+0x300>
		resp = driver_get_response();
  4004d8:	47b0      	blx	r6
		if (resp & OCR_POWER_UP_BUSY) {
  4004da:	2800      	cmp	r0, #0
  4004dc:	db66      	blt.n	4005ac <sd_mmc_check+0x310>
		if (retry-- == 0) {
  4004de:	3d01      	subs	r5, #1
  4004e0:	f1b5 3fff 	cmp.w	r5, #4294967295
  4004e4:	d1f2      	bne.n	4004cc <sd_mmc_check+0x230>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
  4004e6:	492a      	ldr	r1, [pc, #168]	; (400590 <sd_mmc_check+0x2f4>)
  4004e8:	482a      	ldr	r0, [pc, #168]	; (400594 <sd_mmc_check+0x2f8>)
  4004ea:	4b14      	ldr	r3, [pc, #80]	; (40053c <sd_mmc_check+0x2a0>)
  4004ec:	4798      	blx	r3
  4004ee:	e6f5      	b.n	4002dc <sd_mmc_check+0x40>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
  4004f0:	4921      	ldr	r1, [pc, #132]	; (400578 <sd_mmc_check+0x2dc>)
  4004f2:	4829      	ldr	r0, [pc, #164]	; (400598 <sd_mmc_check+0x2fc>)
  4004f4:	4b11      	ldr	r3, [pc, #68]	; (40053c <sd_mmc_check+0x2a0>)
  4004f6:	4798      	blx	r3
  4004f8:	e7d3      	b.n	4004a2 <sd_mmc_check+0x206>
			if ((resp & OCR_CCS) != 0) {
  4004fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  4004fe:	d005      	beq.n	40050c <sd_mmc_check+0x270>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400500:	4b0c      	ldr	r3, [pc, #48]	; (400534 <sd_mmc_check+0x298>)
  400502:	681a      	ldr	r2, [r3, #0]
  400504:	7ad3      	ldrb	r3, [r2, #11]
  400506:	f043 0308 	orr.w	r3, r3, #8
  40050a:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40050c:	4b09      	ldr	r3, [pc, #36]	; (400534 <sd_mmc_check+0x298>)
  40050e:	681b      	ldr	r3, [r3, #0]
  400510:	7adb      	ldrb	r3, [r3, #11]
  400512:	f013 0f01 	tst.w	r3, #1
  400516:	f43f aefc 	beq.w	400312 <sd_mmc_check+0x76>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40051a:	2100      	movs	r1, #0
  40051c:	f645 3002 	movw	r0, #23298	; 0x5b02
  400520:	4b08      	ldr	r3, [pc, #32]	; (400544 <sd_mmc_check+0x2a8>)
  400522:	4798      	blx	r3
  400524:	2800      	cmp	r0, #0
  400526:	f47f aef4 	bne.w	400312 <sd_mmc_check+0x76>
  40052a:	e6d7      	b.n	4002dc <sd_mmc_check+0x40>
  40052c:	004001d5 	.word	0x004001d5
  400530:	00400261 	.word	0x00400261
  400534:	20400a9c 	.word	0x20400a9c
  400538:	00407f3c 	.word	0x00407f3c
  40053c:	00404f2d 	.word	0x00404f2d
  400540:	00401187 	.word	0x00401187
  400544:	004011a9 	.word	0x004011a9
  400548:	004080b0 	.word	0x004080b0
  40054c:	004011cd 	.word	0x004011cd
  400550:	0040022d 	.word	0x0040022d
  400554:	00408178 	.word	0x00408178
  400558:	00408194 	.word	0x00408194
  40055c:	00081133 	.word	0x00081133
  400560:	00401205 	.word	0x00401205
  400564:	00401341 	.word	0x00401341
  400568:	004013a5 	.word	0x004013a5
  40056c:	00407ee4 	.word	0x00407ee4
  400570:	00407f54 	.word	0x00407f54
  400574:	00407f7c 	.word	0x00407f7c
  400578:	00407e8c 	.word	0x00407e8c
  40057c:	00407f8c 	.word	0x00407f8c
  400580:	401f8000 	.word	0x401f8000
  400584:	00407fc4 	.word	0x00407fc4
  400588:	00407f9c 	.word	0x00407f9c
  40058c:	004080d4 	.word	0x004080d4
  400590:	00407e7c 	.word	0x00407e7c
  400594:	00408018 	.word	0x00408018
  400598:	00407fb0 	.word	0x00407fb0
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
  40059c:	f241 0268 	movw	r2, #4200	; 0x1068
  4005a0:	1b52      	subs	r2, r2, r5
  4005a2:	499a      	ldr	r1, [pc, #616]	; (40080c <sd_mmc_check+0x570>)
  4005a4:	489a      	ldr	r0, [pc, #616]	; (400810 <sd_mmc_check+0x574>)
  4005a6:	4b9b      	ldr	r3, [pc, #620]	; (400814 <sd_mmc_check+0x578>)
  4005a8:	4798      	blx	r3
  4005aa:	e697      	b.n	4002dc <sd_mmc_check+0x40>
			if ((resp & OCR_ACCESS_MODE_MASK)
  4005ac:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  4005b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  4005b4:	d025      	beq.n	400602 <sd_mmc_check+0x366>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  4005b6:	2100      	movs	r1, #0
  4005b8:	f645 3002 	movw	r0, #23298	; 0x5b02
  4005bc:	4b96      	ldr	r3, [pc, #600]	; (400818 <sd_mmc_check+0x57c>)
  4005be:	4798      	blx	r3
  4005c0:	2800      	cmp	r0, #0
  4005c2:	f43f ae8b 	beq.w	4002dc <sd_mmc_check+0x40>
	sd_mmc_card->rca = 1;
  4005c6:	4b95      	ldr	r3, [pc, #596]	; (40081c <sd_mmc_check+0x580>)
  4005c8:	681b      	ldr	r3, [r3, #0]
  4005ca:	2201      	movs	r2, #1
  4005cc:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  4005ce:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4005d2:	f241 1003 	movw	r0, #4355	; 0x1103
  4005d6:	4b90      	ldr	r3, [pc, #576]	; (400818 <sd_mmc_check+0x57c>)
  4005d8:	4798      	blx	r3
  4005da:	2800      	cmp	r0, #0
  4005dc:	f43f ae7e 	beq.w	4002dc <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_mci()) {
  4005e0:	4b8f      	ldr	r3, [pc, #572]	; (400820 <sd_mmc_check+0x584>)
  4005e2:	4798      	blx	r3
  4005e4:	2800      	cmp	r0, #0
  4005e6:	f43f ae79 	beq.w	4002dc <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4005ea:	4b8c      	ldr	r3, [pc, #560]	; (40081c <sd_mmc_check+0x580>)
  4005ec:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005ee:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
  4005f0:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4005f4:	3b01      	subs	r3, #1
  4005f6:	2b03      	cmp	r3, #3
  4005f8:	d80a      	bhi.n	400610 <sd_mmc_check+0x374>
  4005fa:	e8df f003 	tbb	[pc, r3]
  4005fe:	aba8      	.short	0xaba8
  400600:	b1ae      	.short	0xb1ae
				sd_mmc_card->type |= CARD_TYPE_HC;
  400602:	4b86      	ldr	r3, [pc, #536]	; (40081c <sd_mmc_check+0x580>)
  400604:	681a      	ldr	r2, [r3, #0]
  400606:	7ad3      	ldrb	r3, [r2, #11]
  400608:	f043 0308 	orr.w	r3, r3, #8
  40060c:	72d3      	strb	r3, [r2, #11]
  40060e:	e7d2      	b.n	4005b6 <sd_mmc_check+0x31a>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  400610:	2312      	movs	r3, #18
  400612:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400614:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400616:	f003 0007 	and.w	r0, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  40061a:	4982      	ldr	r1, [pc, #520]	; (400824 <sd_mmc_check+0x588>)
  40061c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
  400620:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400624:	fb01 f100 	mul.w	r1, r1, r0
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  400628:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
  40062c:	487e      	ldr	r0, [pc, #504]	; (400828 <sd_mmc_check+0x58c>)
  40062e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  400632:	fb03 f301 	mul.w	r3, r3, r1
  400636:	6013      	str	r3, [r2, #0]
  400638:	7d91      	ldrb	r1, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40063a:	7d50      	ldrb	r0, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40063c:	7d13      	ldrb	r3, [r2, #20]
  40063e:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400640:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  400644:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400648:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  40064c:	f640 71ff 	movw	r1, #4095	; 0xfff
  400650:	428b      	cmp	r3, r1
  400652:	d00f      	beq.n	400674 <sd_mmc_check+0x3d8>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400654:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400656:	7dd1      	ldrb	r1, [r2, #23]
  400658:	0049      	lsls	r1, r1, #1
  40065a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40065e:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400660:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400664:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400666:	408b      	lsls	r3, r1
  400668:	7cd1      	ldrb	r1, [r2, #19]
  40066a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40066e:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400670:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400672:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400674:	8911      	ldrh	r1, [r2, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400676:	0409      	lsls	r1, r1, #16
  400678:	f243 1007 	movw	r0, #12551	; 0x3107
  40067c:	4b66      	ldr	r3, [pc, #408]	; (400818 <sd_mmc_check+0x57c>)
  40067e:	4798      	blx	r3
  400680:	2800      	cmp	r0, #0
  400682:	f43f ae2b 	beq.w	4002dc <sd_mmc_check+0x40>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400686:	4b65      	ldr	r3, [pc, #404]	; (40081c <sd_mmc_check+0x580>)
  400688:	681b      	ldr	r3, [r3, #0]
  40068a:	7b1b      	ldrb	r3, [r3, #12]
  40068c:	2b3f      	cmp	r3, #63	; 0x3f
  40068e:	f240 80ac 	bls.w	4007ea <sd_mmc_check+0x54e>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  400692:	2100      	movs	r1, #0
  400694:	9100      	str	r1, [sp, #0]
  400696:	2301      	movs	r3, #1
  400698:	f44f 7200 	mov.w	r2, #512	; 0x200
  40069c:	4863      	ldr	r0, [pc, #396]	; (40082c <sd_mmc_check+0x590>)
  40069e:	4d64      	ldr	r5, [pc, #400]	; (400830 <sd_mmc_check+0x594>)
  4006a0:	47a8      	blx	r5
  4006a2:	2800      	cmp	r0, #0
  4006a4:	f43f ae1a 	beq.w	4002dc <sd_mmc_check+0x40>
  4006a8:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  4006aa:	4e62      	ldr	r6, [pc, #392]	; (400834 <sd_mmc_check+0x598>)
  4006ac:	a803      	add	r0, sp, #12
  4006ae:	47b0      	blx	r6
  4006b0:	2800      	cmp	r0, #0
  4006b2:	f43f ae13 	beq.w	4002dc <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4006b6:	3501      	adds	r5, #1
  4006b8:	b2ad      	uxth	r5, r5
  4006ba:	2d32      	cmp	r5, #50	; 0x32
  4006bc:	d1f6      	bne.n	4006ac <sd_mmc_check+0x410>
			& MMC_CTYPE_52MHZ;
  4006be:	9e03      	ldr	r6, [sp, #12]
  4006c0:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4006c4:	4b55      	ldr	r3, [pc, #340]	; (40081c <sd_mmc_check+0x580>)
  4006c6:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4006c8:	7d9a      	ldrb	r2, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4006ca:	7d59      	ldrb	r1, [r3, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006cc:	7d1b      	ldrb	r3, [r3, #20]
  4006ce:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006d0:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  4006d4:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4006d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4006dc:	f640 72ff 	movw	r2, #4095	; 0xfff
  4006e0:	4293      	cmp	r3, r2
  4006e2:	d10e      	bne.n	400702 <sd_mmc_check+0x466>
			if (!driver_read_word(&sec_count)) {
  4006e4:	4f53      	ldr	r7, [pc, #332]	; (400834 <sd_mmc_check+0x598>)
  4006e6:	a804      	add	r0, sp, #16
  4006e8:	47b8      	blx	r7
  4006ea:	2800      	cmp	r0, #0
  4006ec:	f43f adf6 	beq.w	4002dc <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4006f0:	3501      	adds	r5, #1
  4006f2:	b2ad      	uxth	r5, r5
  4006f4:	2d35      	cmp	r5, #53	; 0x35
  4006f6:	d9f6      	bls.n	4006e6 <sd_mmc_check+0x44a>
		sd_mmc_card->capacity = sec_count / 2;
  4006f8:	4b48      	ldr	r3, [pc, #288]	; (40081c <sd_mmc_check+0x580>)
  4006fa:	681a      	ldr	r2, [r3, #0]
  4006fc:	9b04      	ldr	r3, [sp, #16]
  4006fe:	085b      	lsrs	r3, r3, #1
  400700:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  400702:	4f4c      	ldr	r7, [pc, #304]	; (400834 <sd_mmc_check+0x598>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400704:	2d7f      	cmp	r5, #127	; 0x7f
  400706:	d92e      	bls.n	400766 <sd_mmc_check+0x4ca>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  400708:	4b4b      	ldr	r3, [pc, #300]	; (400838 <sd_mmc_check+0x59c>)
  40070a:	7818      	ldrb	r0, [r3, #0]
  40070c:	4b4b      	ldr	r3, [pc, #300]	; (40083c <sd_mmc_check+0x5a0>)
  40070e:	4798      	blx	r3
  400710:	2803      	cmp	r0, #3
  400712:	d93b      	bls.n	40078c <sd_mmc_check+0x4f0>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  400714:	4b48      	ldr	r3, [pc, #288]	; (400838 <sd_mmc_check+0x59c>)
  400716:	7818      	ldrb	r0, [r3, #0]
  400718:	4b48      	ldr	r3, [pc, #288]	; (40083c <sd_mmc_check+0x5a0>)
  40071a:	4798      	blx	r3
  40071c:	4605      	mov	r5, r0
	switch (bus_width) {
  40071e:	2804      	cmp	r0, #4
  400720:	d029      	beq.n	400776 <sd_mmc_check+0x4da>
		arg = MMC_CMD6_ACCESS_SET_BITS
  400722:	4b47      	ldr	r3, [pc, #284]	; (400840 <sd_mmc_check+0x5a4>)
  400724:	4947      	ldr	r1, [pc, #284]	; (400844 <sd_mmc_check+0x5a8>)
  400726:	2808      	cmp	r0, #8
  400728:	bf18      	it	ne
  40072a:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  40072c:	f243 1006 	movw	r0, #12550	; 0x3106
  400730:	4b39      	ldr	r3, [pc, #228]	; (400818 <sd_mmc_check+0x57c>)
  400732:	4798      	blx	r3
  400734:	2800      	cmp	r0, #0
  400736:	f43f add1 	beq.w	4002dc <sd_mmc_check+0x40>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  40073a:	4b43      	ldr	r3, [pc, #268]	; (400848 <sd_mmc_check+0x5ac>)
  40073c:	4798      	blx	r3
  40073e:	f010 0f80 	tst.w	r0, #128	; 0x80
  400742:	d01a      	beq.n	40077a <sd_mmc_check+0x4de>
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
  400744:	4941      	ldr	r1, [pc, #260]	; (40084c <sd_mmc_check+0x5b0>)
  400746:	4842      	ldr	r0, [pc, #264]	; (400850 <sd_mmc_check+0x5b4>)
  400748:	4b32      	ldr	r3, [pc, #200]	; (400814 <sd_mmc_check+0x578>)
  40074a:	4798      	blx	r3
  40074c:	e5c6      	b.n	4002dc <sd_mmc_check+0x40>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  40074e:	2314      	movs	r3, #20
  400750:	7313      	strb	r3, [r2, #12]
  400752:	e75f      	b.n	400614 <sd_mmc_check+0x378>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  400754:	2322      	movs	r3, #34	; 0x22
  400756:	7313      	strb	r3, [r2, #12]
  400758:	e75c      	b.n	400614 <sd_mmc_check+0x378>
		sd_mmc_card->version = CARD_VER_MMC_3;
  40075a:	2330      	movs	r3, #48	; 0x30
  40075c:	7313      	strb	r3, [r2, #12]
  40075e:	e759      	b.n	400614 <sd_mmc_check+0x378>
		sd_mmc_card->version = CARD_VER_MMC_4;
  400760:	2340      	movs	r3, #64	; 0x40
  400762:	7313      	strb	r3, [r2, #12]
  400764:	e756      	b.n	400614 <sd_mmc_check+0x378>
		if (!driver_read_word(&sec_count)) {
  400766:	a804      	add	r0, sp, #16
  400768:	47b8      	blx	r7
  40076a:	2800      	cmp	r0, #0
  40076c:	f43f adb6 	beq.w	4002dc <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400770:	3501      	adds	r5, #1
  400772:	b2ad      	uxth	r5, r5
  400774:	e7c6      	b.n	400704 <sd_mmc_check+0x468>
		arg = MMC_CMD6_ACCESS_SET_BITS
  400776:	4937      	ldr	r1, [pc, #220]	; (400854 <sd_mmc_check+0x5b8>)
  400778:	e7d8      	b.n	40072c <sd_mmc_check+0x490>
	sd_mmc_card->bus_width = bus_width;
  40077a:	4b28      	ldr	r3, [pc, #160]	; (40081c <sd_mmc_check+0x580>)
  40077c:	681b      	ldr	r3, [r3, #0]
  40077e:	735d      	strb	r5, [r3, #13]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
  400780:	4629      	mov	r1, r5
  400782:	4835      	ldr	r0, [pc, #212]	; (400858 <sd_mmc_check+0x5bc>)
  400784:	4b23      	ldr	r3, [pc, #140]	; (400814 <sd_mmc_check+0x578>)
  400786:	4798      	blx	r3
			sd_mmc_configure_slot();
  400788:	4b34      	ldr	r3, [pc, #208]	; (40085c <sd_mmc_check+0x5c0>)
  40078a:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  40078c:	4b34      	ldr	r3, [pc, #208]	; (400860 <sd_mmc_check+0x5c4>)
  40078e:	4798      	blx	r3
  400790:	b1d6      	cbz	r6, 4007c8 <sd_mmc_check+0x52c>
  400792:	b1c8      	cbz	r0, 4007c8 <sd_mmc_check+0x52c>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400794:	4933      	ldr	r1, [pc, #204]	; (400864 <sd_mmc_check+0x5c8>)
  400796:	f243 1006 	movw	r0, #12550	; 0x3106
  40079a:	4b1f      	ldr	r3, [pc, #124]	; (400818 <sd_mmc_check+0x57c>)
  40079c:	4798      	blx	r3
  40079e:	2800      	cmp	r0, #0
  4007a0:	f43f ad9c 	beq.w	4002dc <sd_mmc_check+0x40>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4007a4:	4b28      	ldr	r3, [pc, #160]	; (400848 <sd_mmc_check+0x5ac>)
  4007a6:	4798      	blx	r3
  4007a8:	f010 0f80 	tst.w	r0, #128	; 0x80
  4007ac:	d004      	beq.n	4007b8 <sd_mmc_check+0x51c>
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
  4007ae:	492e      	ldr	r1, [pc, #184]	; (400868 <sd_mmc_check+0x5cc>)
  4007b0:	4827      	ldr	r0, [pc, #156]	; (400850 <sd_mmc_check+0x5b4>)
  4007b2:	4b18      	ldr	r3, [pc, #96]	; (400814 <sd_mmc_check+0x578>)
  4007b4:	4798      	blx	r3
  4007b6:	e591      	b.n	4002dc <sd_mmc_check+0x40>
	sd_mmc_card->high_speed = 1;
  4007b8:	4b18      	ldr	r3, [pc, #96]	; (40081c <sd_mmc_check+0x580>)
  4007ba:	681b      	ldr	r3, [r3, #0]
  4007bc:	2201      	movs	r2, #1
  4007be:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
  4007c0:	4a2a      	ldr	r2, [pc, #168]	; (40086c <sd_mmc_check+0x5d0>)
  4007c2:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  4007c4:	4b25      	ldr	r3, [pc, #148]	; (40085c <sd_mmc_check+0x5c0>)
  4007c6:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  4007c8:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4007ca:	f44f 7800 	mov.w	r8, #512	; 0x200
  4007ce:	f241 1710 	movw	r7, #4368	; 0x1110
  4007d2:	4e11      	ldr	r6, [pc, #68]	; (400818 <sd_mmc_check+0x57c>)
  4007d4:	4641      	mov	r1, r8
  4007d6:	4638      	mov	r0, r7
  4007d8:	47b0      	blx	r6
  4007da:	2800      	cmp	r0, #0
  4007dc:	f040 808f 	bne.w	4008fe <sd_mmc_check+0x662>
  4007e0:	3d01      	subs	r5, #1
	while (retry--) {
  4007e2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  4007e6:	d1f5      	bne.n	4007d4 <sd_mmc_check+0x538>
  4007e8:	e578      	b.n	4002dc <sd_mmc_check+0x40>
		sd_mmc_configure_slot();
  4007ea:	4b1c      	ldr	r3, [pc, #112]	; (40085c <sd_mmc_check+0x5c0>)
  4007ec:	4798      	blx	r3
  4007ee:	e7eb      	b.n	4007c8 <sd_mmc_check+0x52c>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4007f0:	7dd9      	ldrb	r1, [r3, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4007f2:	7d98      	ldrb	r0, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4007f4:	7d5a      	ldrb	r2, [r3, #21]
  4007f6:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4007f8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  4007fc:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  4007fe:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  400802:	3201      	adds	r2, #1
  400804:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  400806:	605a      	str	r2, [r3, #4]
  400808:	e5ca      	b.n	4003a0 <sd_mmc_check+0x104>
  40080a:	bf00      	nop
  40080c:	00407e7c 	.word	0x00407e7c
  400810:	00407ff4 	.word	0x00407ff4
  400814:	00404f2d 	.word	0x00404f2d
  400818:	004011a9 	.word	0x004011a9
  40081c:	20400a9c 	.word	0x20400a9c
  400820:	0040022d 	.word	0x0040022d
  400824:	00408178 	.word	0x00408178
  400828:	00407efc 	.word	0x00407efc
  40082c:	00081108 	.word	0x00081108
  400830:	00401205 	.word	0x00401205
  400834:	004012cd 	.word	0x004012cd
  400838:	20400ac4 	.word	0x20400ac4
  40083c:	004010b1 	.word	0x004010b1
  400840:	01b70000 	.word	0x01b70000
  400844:	01b70200 	.word	0x01b70200
  400848:	004011cd 	.word	0x004011cd
  40084c:	00407eb4 	.word	0x00407eb4
  400850:	00408034 	.word	0x00408034
  400854:	01b70100 	.word	0x01b70100
  400858:	00408058 	.word	0x00408058
  40085c:	004001ad 	.word	0x004001ad
  400860:	004010bb 	.word	0x004010bb
  400864:	03b90100 	.word	0x03b90100
  400868:	00407ecc 	.word	0x00407ecc
  40086c:	03197500 	.word	0x03197500
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400870:	4b51      	ldr	r3, [pc, #324]	; (4009b8 <sd_mmc_check+0x71c>)
  400872:	681b      	ldr	r3, [r3, #0]
  400874:	2210      	movs	r2, #16
  400876:	731a      	strb	r2, [r3, #12]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400878:	4b50      	ldr	r3, [pc, #320]	; (4009bc <sd_mmc_check+0x720>)
  40087a:	7818      	ldrb	r0, [r3, #0]
  40087c:	4b50      	ldr	r3, [pc, #320]	; (4009c0 <sd_mmc_check+0x724>)
  40087e:	4798      	blx	r3
  400880:	2803      	cmp	r0, #3
  400882:	d91f      	bls.n	4008c4 <sd_mmc_check+0x628>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400884:	4b4c      	ldr	r3, [pc, #304]	; (4009b8 <sd_mmc_check+0x71c>)
  400886:	681b      	ldr	r3, [r3, #0]
  400888:	7ada      	ldrb	r2, [r3, #11]
  40088a:	f012 0f01 	tst.w	r2, #1
  40088e:	d017      	beq.n	4008c0 <sd_mmc_check+0x624>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400890:	8919      	ldrh	r1, [r3, #8]
  400892:	0409      	lsls	r1, r1, #16
  400894:	f241 1037 	movw	r0, #4407	; 0x1137
  400898:	4b4a      	ldr	r3, [pc, #296]	; (4009c4 <sd_mmc_check+0x728>)
  40089a:	4798      	blx	r3
  40089c:	2800      	cmp	r0, #0
  40089e:	f43f ad1d 	beq.w	4002dc <sd_mmc_check+0x40>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  4008a2:	2102      	movs	r1, #2
  4008a4:	f241 1006 	movw	r0, #4358	; 0x1106
  4008a8:	4b46      	ldr	r3, [pc, #280]	; (4009c4 <sd_mmc_check+0x728>)
  4008aa:	4798      	blx	r3
  4008ac:	2800      	cmp	r0, #0
  4008ae:	f43f ad15 	beq.w	4002dc <sd_mmc_check+0x40>
	sd_mmc_card->bus_width = 4;
  4008b2:	4b41      	ldr	r3, [pc, #260]	; (4009b8 <sd_mmc_check+0x71c>)
  4008b4:	681b      	ldr	r3, [r3, #0]
  4008b6:	2104      	movs	r1, #4
  4008b8:	7359      	strb	r1, [r3, #13]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
  4008ba:	4843      	ldr	r0, [pc, #268]	; (4009c8 <sd_mmc_check+0x72c>)
  4008bc:	4b43      	ldr	r3, [pc, #268]	; (4009cc <sd_mmc_check+0x730>)
  4008be:	4798      	blx	r3
		sd_mmc_configure_slot();
  4008c0:	4b43      	ldr	r3, [pc, #268]	; (4009d0 <sd_mmc_check+0x734>)
  4008c2:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  4008c4:	4b43      	ldr	r3, [pc, #268]	; (4009d4 <sd_mmc_check+0x738>)
  4008c6:	4798      	blx	r3
  4008c8:	b150      	cbz	r0, 4008e0 <sd_mmc_check+0x644>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  4008ca:	4b3b      	ldr	r3, [pc, #236]	; (4009b8 <sd_mmc_check+0x71c>)
  4008cc:	681b      	ldr	r3, [r3, #0]
  4008ce:	7ada      	ldrb	r2, [r3, #11]
  4008d0:	f012 0f01 	tst.w	r2, #1
  4008d4:	d002      	beq.n	4008dc <sd_mmc_check+0x640>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  4008d6:	7b1b      	ldrb	r3, [r3, #12]
  4008d8:	2b10      	cmp	r3, #16
  4008da:	d829      	bhi.n	400930 <sd_mmc_check+0x694>
		sd_mmc_configure_slot();
  4008dc:	4b3c      	ldr	r3, [pc, #240]	; (4009d0 <sd_mmc_check+0x734>)
  4008de:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4008e0:	4b35      	ldr	r3, [pc, #212]	; (4009b8 <sd_mmc_check+0x71c>)
  4008e2:	681b      	ldr	r3, [r3, #0]
  4008e4:	7adb      	ldrb	r3, [r3, #11]
  4008e6:	f013 0f01 	tst.w	r3, #1
  4008ea:	d008      	beq.n	4008fe <sd_mmc_check+0x662>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4008ec:	f44f 7100 	mov.w	r1, #512	; 0x200
  4008f0:	f241 1010 	movw	r0, #4368	; 0x1110
  4008f4:	4b33      	ldr	r3, [pc, #204]	; (4009c4 <sd_mmc_check+0x728>)
  4008f6:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  4008f8:	2800      	cmp	r0, #0
  4008fa:	f43f acef 	beq.w	4002dc <sd_mmc_check+0x40>
		sd_mmc_debug("SD/MMC card ready\n\r");
  4008fe:	4836      	ldr	r0, [pc, #216]	; (4009d8 <sd_mmc_check+0x73c>)
  400900:	4b32      	ldr	r3, [pc, #200]	; (4009cc <sd_mmc_check+0x730>)
  400902:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400904:	4b2c      	ldr	r3, [pc, #176]	; (4009b8 <sd_mmc_check+0x71c>)
  400906:	681b      	ldr	r3, [r3, #0]
  400908:	2200      	movs	r2, #0
  40090a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  40090c:	4b33      	ldr	r3, [pc, #204]	; (4009dc <sd_mmc_check+0x740>)
  40090e:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400910:	e4ce      	b.n	4002b0 <sd_mmc_check+0x14>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400912:	4b29      	ldr	r3, [pc, #164]	; (4009b8 <sd_mmc_check+0x71c>)
  400914:	681b      	ldr	r3, [r3, #0]
  400916:	221a      	movs	r2, #26
  400918:	731a      	strb	r2, [r3, #12]
  40091a:	e7ad      	b.n	400878 <sd_mmc_check+0x5dc>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  40091c:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400920:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400922:	4b25      	ldr	r3, [pc, #148]	; (4009b8 <sd_mmc_check+0x71c>)
  400924:	681b      	ldr	r3, [r3, #0]
  400926:	bf14      	ite	ne
  400928:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  40092a:	2220      	moveq	r2, #32
  40092c:	731a      	strb	r2, [r3, #12]
  40092e:	e7a3      	b.n	400878 <sd_mmc_check+0x5dc>
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400930:	2540      	movs	r5, #64	; 0x40
  400932:	462a      	mov	r2, r5
  400934:	2100      	movs	r1, #0
  400936:	a804      	add	r0, sp, #16
  400938:	4b29      	ldr	r3, [pc, #164]	; (4009e0 <sd_mmc_check+0x744>)
  40093a:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  40093c:	2301      	movs	r3, #1
  40093e:	9300      	str	r3, [sp, #0]
  400940:	462a      	mov	r2, r5
  400942:	4928      	ldr	r1, [pc, #160]	; (4009e4 <sd_mmc_check+0x748>)
  400944:	4828      	ldr	r0, [pc, #160]	; (4009e8 <sd_mmc_check+0x74c>)
  400946:	4d29      	ldr	r5, [pc, #164]	; (4009ec <sd_mmc_check+0x750>)
  400948:	47a8      	blx	r5
  40094a:	2800      	cmp	r0, #0
  40094c:	f43f acc6 	beq.w	4002dc <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(switch_status, 1)) {
  400950:	2101      	movs	r1, #1
  400952:	a804      	add	r0, sp, #16
  400954:	4b26      	ldr	r3, [pc, #152]	; (4009f0 <sd_mmc_check+0x754>)
  400956:	4798      	blx	r3
  400958:	2800      	cmp	r0, #0
  40095a:	f43f acbf 	beq.w	4002dc <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
  40095e:	4b25      	ldr	r3, [pc, #148]	; (4009f4 <sd_mmc_check+0x758>)
  400960:	4798      	blx	r3
  400962:	2800      	cmp	r0, #0
  400964:	f43f acba 	beq.w	4002dc <sd_mmc_check+0x40>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400968:	4b23      	ldr	r3, [pc, #140]	; (4009f8 <sd_mmc_check+0x75c>)
  40096a:	4798      	blx	r3
  40096c:	f010 0f80 	tst.w	r0, #128	; 0x80
  400970:	d004      	beq.n	40097c <sd_mmc_check+0x6e0>
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
  400972:	4922      	ldr	r1, [pc, #136]	; (4009fc <sd_mmc_check+0x760>)
  400974:	4822      	ldr	r0, [pc, #136]	; (400a00 <sd_mmc_check+0x764>)
  400976:	4b15      	ldr	r3, [pc, #84]	; (4009cc <sd_mmc_check+0x730>)
  400978:	4798      	blx	r3
  40097a:	e4af      	b.n	4002dc <sd_mmc_check+0x40>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  40097c:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400980:	f003 030f 	and.w	r3, r3, #15
  400984:	2b0f      	cmp	r3, #15
  400986:	d0a9      	beq.n	4008dc <sd_mmc_check+0x640>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400988:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40098c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400990:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400994:	d004      	beq.n	4009a0 <sd_mmc_check+0x704>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
  400996:	4919      	ldr	r1, [pc, #100]	; (4009fc <sd_mmc_check+0x760>)
  400998:	481a      	ldr	r0, [pc, #104]	; (400a04 <sd_mmc_check+0x768>)
  40099a:	4b0c      	ldr	r3, [pc, #48]	; (4009cc <sd_mmc_check+0x730>)
  40099c:	4798      	blx	r3
  40099e:	e49d      	b.n	4002dc <sd_mmc_check+0x40>
	driver_send_clock();
  4009a0:	4b19      	ldr	r3, [pc, #100]	; (400a08 <sd_mmc_check+0x76c>)
  4009a2:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  4009a4:	4b04      	ldr	r3, [pc, #16]	; (4009b8 <sd_mmc_check+0x71c>)
  4009a6:	681b      	ldr	r3, [r3, #0]
  4009a8:	2201      	movs	r2, #1
  4009aa:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  4009ac:	681a      	ldr	r2, [r3, #0]
  4009ae:	0052      	lsls	r2, r2, #1
  4009b0:	601a      	str	r2, [r3, #0]
  4009b2:	e793      	b.n	4008dc <sd_mmc_check+0x640>
	*v2 = 0;
  4009b4:	2500      	movs	r5, #0
  4009b6:	e4a5      	b.n	400304 <sd_mmc_check+0x68>
  4009b8:	20400a9c 	.word	0x20400a9c
  4009bc:	20400ac4 	.word	0x20400ac4
  4009c0:	004010b1 	.word	0x004010b1
  4009c4:	004011a9 	.word	0x004011a9
  4009c8:	00408058 	.word	0x00408058
  4009cc:	00404f2d 	.word	0x00404f2d
  4009d0:	004001ad 	.word	0x004001ad
  4009d4:	004010bb 	.word	0x004010bb
  4009d8:	0040809c 	.word	0x0040809c
  4009dc:	00400261 	.word	0x00400261
  4009e0:	00404f55 	.word	0x00404f55
  4009e4:	80ffff01 	.word	0x80ffff01
  4009e8:	00081106 	.word	0x00081106
  4009ec:	00401205 	.word	0x00401205
  4009f0:	00401341 	.word	0x00401341
  4009f4:	004013a5 	.word	0x004013a5
  4009f8:	004011cd 	.word	0x004011cd
  4009fc:	00407e9c 	.word	0x00407e9c
  400a00:	00408034 	.word	0x00408034
  400a04:	00408074 	.word	0x00408074
  400a08:	00401187 	.word	0x00401187

00400a0c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400a0c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400a0e:	4b05      	ldr	r3, [pc, #20]	; (400a24 <sd_mmc_get_type+0x18>)
  400a10:	4798      	blx	r3
  400a12:	b108      	cbz	r0, 400a18 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400a14:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400a16:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400a18:	4b03      	ldr	r3, [pc, #12]	; (400a28 <sd_mmc_get_type+0x1c>)
  400a1a:	4798      	blx	r3
	return sd_mmc_card->type;
  400a1c:	4b03      	ldr	r3, [pc, #12]	; (400a2c <sd_mmc_get_type+0x20>)
  400a1e:	681b      	ldr	r3, [r3, #0]
  400a20:	7ad8      	ldrb	r0, [r3, #11]
  400a22:	bd08      	pop	{r3, pc}
  400a24:	004001d5 	.word	0x004001d5
  400a28:	00400261 	.word	0x00400261
  400a2c:	20400a9c 	.word	0x20400a9c

00400a30 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400a30:	b508      	push	{r3, lr}
	//printf("read capacity.......\r\n");
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400a32:	4b05      	ldr	r3, [pc, #20]	; (400a48 <sd_mmc_get_capacity+0x18>)
  400a34:	4798      	blx	r3
  400a36:	b108      	cbz	r0, 400a3c <sd_mmc_get_capacity+0xc>
		return 0;
  400a38:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400a3a:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400a3c:	4b03      	ldr	r3, [pc, #12]	; (400a4c <sd_mmc_get_capacity+0x1c>)
  400a3e:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400a40:	4b03      	ldr	r3, [pc, #12]	; (400a50 <sd_mmc_get_capacity+0x20>)
  400a42:	681b      	ldr	r3, [r3, #0]
  400a44:	6858      	ldr	r0, [r3, #4]
  400a46:	bd08      	pop	{r3, pc}
  400a48:	004001d5 	.word	0x004001d5
  400a4c:	00400261 	.word	0x00400261
  400a50:	20400a9c 	.word	0x20400a9c

00400a54 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400a54:	2000      	movs	r0, #0
  400a56:	4770      	bx	lr

00400a58 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400a5c:	b082      	sub	sp, #8
  400a5e:	468a      	mov	sl, r1
  400a60:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400a62:	4b2c      	ldr	r3, [pc, #176]	; (400b14 <sd_mmc_init_read_blocks+0xbc>)
  400a64:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400a66:	4680      	mov	r8, r0
  400a68:	b118      	cbz	r0, 400a72 <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400a6a:	4640      	mov	r0, r8
  400a6c:	b002      	add	sp, #8
  400a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400a72:	4c29      	ldr	r4, [pc, #164]	; (400b18 <sd_mmc_init_read_blocks+0xc0>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400a74:	4e29      	ldr	r6, [pc, #164]	; (400b1c <sd_mmc_init_read_blocks+0xc4>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400a76:	4d2a      	ldr	r5, [pc, #168]	; (400b20 <sd_mmc_init_read_blocks+0xc8>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400a78:	4f2a      	ldr	r7, [pc, #168]	; (400b24 <sd_mmc_init_read_blocks+0xcc>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400a7a:	6833      	ldr	r3, [r6, #0]
  400a7c:	8919      	ldrh	r1, [r3, #8]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400a7e:	0409      	lsls	r1, r1, #16
  400a80:	f241 100d 	movw	r0, #4365	; 0x110d
  400a84:	47a8      	blx	r5
  400a86:	b148      	cbz	r0, 400a9c <sd_mmc_init_read_blocks+0x44>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400a88:	47b8      	blx	r7
  400a8a:	f410 7f80 	tst.w	r0, #256	; 0x100
  400a8e:	d122      	bne.n	400ad6 <sd_mmc_init_read_blocks+0x7e>
		if (nec_timeout-- == 0) {
  400a90:	3c01      	subs	r4, #1
  400a92:	d1f2      	bne.n	400a7a <sd_mmc_init_read_blocks+0x22>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
  400a94:	4924      	ldr	r1, [pc, #144]	; (400b28 <sd_mmc_init_read_blocks+0xd0>)
  400a96:	4825      	ldr	r0, [pc, #148]	; (400b2c <sd_mmc_init_read_blocks+0xd4>)
  400a98:	4b25      	ldr	r3, [pc, #148]	; (400b30 <sd_mmc_init_read_blocks+0xd8>)
  400a9a:	4798      	blx	r3
		sd_mmc_deselect_slot();
  400a9c:	4b25      	ldr	r3, [pc, #148]	; (400b34 <sd_mmc_init_read_blocks+0xdc>)
  400a9e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400aa0:	f04f 0805 	mov.w	r8, #5
  400aa4:	e7e1      	b.n	400a6a <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  400aa6:	4b1f      	ldr	r3, [pc, #124]	; (400b24 <sd_mmc_init_read_blocks+0xcc>)
  400aa8:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400aaa:	4a23      	ldr	r2, [pc, #140]	; (400b38 <sd_mmc_init_read_blocks+0xe0>)
  400aac:	4002      	ands	r2, r0
  400aae:	b932      	cbnz	r2, 400abe <sd_mmc_init_read_blocks+0x66>
	sd_mmc_nb_block_remaining = nb_block;
  400ab0:	4b22      	ldr	r3, [pc, #136]	; (400b3c <sd_mmc_init_read_blocks+0xe4>)
  400ab2:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400ab6:	4b22      	ldr	r3, [pc, #136]	; (400b40 <sd_mmc_init_read_blocks+0xe8>)
  400ab8:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  400abc:	e7d5      	b.n	400a6a <sd_mmc_init_read_blocks+0x12>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
  400abe:	4603      	mov	r3, r0
  400ac0:	f004 0213 	and.w	r2, r4, #19
  400ac4:	491f      	ldr	r1, [pc, #124]	; (400b44 <sd_mmc_init_read_blocks+0xec>)
  400ac6:	4820      	ldr	r0, [pc, #128]	; (400b48 <sd_mmc_init_read_blocks+0xf0>)
  400ac8:	4c19      	ldr	r4, [pc, #100]	; (400b30 <sd_mmc_init_read_blocks+0xd8>)
  400aca:	47a0      	blx	r4
			sd_mmc_deselect_slot();
  400acc:	4b19      	ldr	r3, [pc, #100]	; (400b34 <sd_mmc_init_read_blocks+0xdc>)
  400ace:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400ad0:	f04f 0805 	mov.w	r8, #5
  400ad4:	e7c9      	b.n	400a6a <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  400ad6:	4b1d      	ldr	r3, [pc, #116]	; (400b4c <sd_mmc_init_read_blocks+0xf4>)
  400ad8:	4c1d      	ldr	r4, [pc, #116]	; (400b50 <sd_mmc_init_read_blocks+0xf8>)
  400ada:	f1b9 0f01 	cmp.w	r9, #1
  400ade:	bf98      	it	ls
  400ae0:	461c      	movls	r4, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400ae2:	4b0e      	ldr	r3, [pc, #56]	; (400b1c <sd_mmc_init_read_blocks+0xc4>)
  400ae4:	681b      	ldr	r3, [r3, #0]
  400ae6:	7adb      	ldrb	r3, [r3, #11]
  400ae8:	f013 0f08 	tst.w	r3, #8
  400aec:	d101      	bne.n	400af2 <sd_mmc_init_read_blocks+0x9a>
		arg = (start * SD_MMC_BLOCK_SIZE);
  400aee:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400af2:	2301      	movs	r3, #1
  400af4:	9300      	str	r3, [sp, #0]
  400af6:	464b      	mov	r3, r9
  400af8:	f44f 7200 	mov.w	r2, #512	; 0x200
  400afc:	4651      	mov	r1, sl
  400afe:	4620      	mov	r0, r4
  400b00:	4d14      	ldr	r5, [pc, #80]	; (400b54 <sd_mmc_init_read_blocks+0xfc>)
  400b02:	47a8      	blx	r5
  400b04:	2800      	cmp	r0, #0
  400b06:	d1ce      	bne.n	400aa6 <sd_mmc_init_read_blocks+0x4e>
		sd_mmc_deselect_slot();
  400b08:	4b0a      	ldr	r3, [pc, #40]	; (400b34 <sd_mmc_init_read_blocks+0xdc>)
  400b0a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400b0c:	f04f 0805 	mov.w	r8, #5
  400b10:	e7ab      	b.n	400a6a <sd_mmc_init_read_blocks+0x12>
  400b12:	bf00      	nop
  400b14:	004001d5 	.word	0x004001d5
  400b18:	00030d41 	.word	0x00030d41
  400b1c:	20400a9c 	.word	0x20400a9c
  400b20:	004011a9 	.word	0x004011a9
  400b24:	004011cd 	.word	0x004011cd
  400b28:	00407eec 	.word	0x00407eec
  400b2c:	004080e8 	.word	0x004080e8
  400b30:	00404f2d 	.word	0x00404f2d
  400b34:	00400261 	.word	0x00400261
  400b38:	e4580000 	.word	0xe4580000
  400b3c:	20400ac0 	.word	0x20400ac0
  400b40:	20400ac2 	.word	0x20400ac2
  400b44:	00407e48 	.word	0x00407e48
  400b48:	00408104 	.word	0x00408104
  400b4c:	00081111 	.word	0x00081111
  400b50:	00101112 	.word	0x00101112
  400b54:	00401205 	.word	0x00401205

00400b58 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400b58:	b510      	push	{r4, lr}
  400b5a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400b5c:	4b06      	ldr	r3, [pc, #24]	; (400b78 <sd_mmc_start_read_blocks+0x20>)
  400b5e:	4798      	blx	r3
  400b60:	b920      	cbnz	r0, 400b6c <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400b62:	2200      	movs	r2, #0
  400b64:	4b05      	ldr	r3, [pc, #20]	; (400b7c <sd_mmc_start_read_blocks+0x24>)
  400b66:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400b68:	2005      	movs	r0, #5
  400b6a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400b6c:	4a03      	ldr	r2, [pc, #12]	; (400b7c <sd_mmc_start_read_blocks+0x24>)
  400b6e:	8813      	ldrh	r3, [r2, #0]
  400b70:	1b1c      	subs	r4, r3, r4
  400b72:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400b74:	2000      	movs	r0, #0
}
  400b76:	bd10      	pop	{r4, pc}
  400b78:	00401341 	.word	0x00401341
  400b7c:	20400ac0 	.word	0x20400ac0

00400b80 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400b80:	b510      	push	{r4, lr}
  400b82:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400b84:	4b13      	ldr	r3, [pc, #76]	; (400bd4 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400b86:	4798      	blx	r3
  400b88:	b908      	cbnz	r0, 400b8e <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400b8a:	2005      	movs	r0, #5
  400b8c:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400b8e:	b184      	cbz	r4, 400bb2 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400b90:	2200      	movs	r2, #0
  400b92:	4b11      	ldr	r3, [pc, #68]	; (400bd8 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400b94:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400b96:	4b11      	ldr	r3, [pc, #68]	; (400bdc <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400b98:	881b      	ldrh	r3, [r3, #0]
  400b9a:	2b01      	cmp	r3, #1
  400b9c:	d00f      	beq.n	400bbe <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400b9e:	2100      	movs	r1, #0
  400ba0:	f243 100c 	movw	r0, #12556	; 0x310c
  400ba4:	4b0e      	ldr	r3, [pc, #56]	; (400be0 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400ba6:	4798      	blx	r3
  400ba8:	b168      	cbz	r0, 400bc6 <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  400baa:	4b0e      	ldr	r3, [pc, #56]	; (400be4 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400bac:	4798      	blx	r3
	return SD_MMC_OK;
  400bae:	2000      	movs	r0, #0
  400bb0:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400bb2:	4b09      	ldr	r3, [pc, #36]	; (400bd8 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400bb4:	881b      	ldrh	r3, [r3, #0]
  400bb6:	2b00      	cmp	r3, #0
  400bb8:	d0ed      	beq.n	400b96 <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  400bba:	2000      	movs	r0, #0
}
  400bbc:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400bbe:	4b09      	ldr	r3, [pc, #36]	; (400be4 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400bc0:	4798      	blx	r3
		return SD_MMC_OK;
  400bc2:	2000      	movs	r0, #0
  400bc4:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400bc6:	2100      	movs	r1, #0
  400bc8:	f243 100c 	movw	r0, #12556	; 0x310c
  400bcc:	4b04      	ldr	r3, [pc, #16]	; (400be0 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400bce:	4798      	blx	r3
  400bd0:	e7eb      	b.n	400baa <sd_mmc_wait_end_of_read_blocks+0x2a>
  400bd2:	bf00      	nop
  400bd4:	004013a5 	.word	0x004013a5
  400bd8:	20400ac0 	.word	0x20400ac0
  400bdc:	20400ac2 	.word	0x20400ac2
  400be0:	004011a9 	.word	0x004011a9
  400be4:	00400261 	.word	0x00400261

00400be8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400be8:	b5f0      	push	{r4, r5, r6, r7, lr}
  400bea:	b083      	sub	sp, #12
  400bec:	460e      	mov	r6, r1
  400bee:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400bf0:	4b1a      	ldr	r3, [pc, #104]	; (400c5c <sd_mmc_init_write_blocks+0x74>)
  400bf2:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400bf4:	4604      	mov	r4, r0
  400bf6:	b9c0      	cbnz	r0, 400c2a <sd_mmc_init_write_blocks+0x42>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400bf8:	4b19      	ldr	r3, [pc, #100]	; (400c60 <sd_mmc_init_write_blocks+0x78>)
  400bfa:	4f1a      	ldr	r7, [pc, #104]	; (400c64 <sd_mmc_init_write_blocks+0x7c>)
  400bfc:	2d01      	cmp	r5, #1
  400bfe:	bf98      	it	ls
  400c00:	461f      	movls	r7, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400c02:	4b19      	ldr	r3, [pc, #100]	; (400c68 <sd_mmc_init_write_blocks+0x80>)
  400c04:	681b      	ldr	r3, [r3, #0]
  400c06:	7adb      	ldrb	r3, [r3, #11]
  400c08:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400c0c:	bf08      	it	eq
  400c0e:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400c10:	2301      	movs	r3, #1
  400c12:	9300      	str	r3, [sp, #0]
  400c14:	462b      	mov	r3, r5
  400c16:	f44f 7200 	mov.w	r2, #512	; 0x200
  400c1a:	4631      	mov	r1, r6
  400c1c:	4638      	mov	r0, r7
  400c1e:	4e13      	ldr	r6, [pc, #76]	; (400c6c <sd_mmc_init_write_blocks+0x84>)
  400c20:	47b0      	blx	r6
  400c22:	b928      	cbnz	r0, 400c30 <sd_mmc_init_write_blocks+0x48>
		sd_mmc_deselect_slot();
  400c24:	4b12      	ldr	r3, [pc, #72]	; (400c70 <sd_mmc_init_write_blocks+0x88>)
  400c26:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400c28:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400c2a:	4620      	mov	r0, r4
  400c2c:	b003      	add	sp, #12
  400c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		resp = driver_get_response();
  400c30:	4b10      	ldr	r3, [pc, #64]	; (400c74 <sd_mmc_init_write_blocks+0x8c>)
  400c32:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400c34:	4a10      	ldr	r2, [pc, #64]	; (400c78 <sd_mmc_init_write_blocks+0x90>)
  400c36:	4002      	ands	r2, r0
  400c38:	b922      	cbnz	r2, 400c44 <sd_mmc_init_write_blocks+0x5c>
	sd_mmc_nb_block_remaining = nb_block;
  400c3a:	4b10      	ldr	r3, [pc, #64]	; (400c7c <sd_mmc_init_write_blocks+0x94>)
  400c3c:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400c3e:	4b10      	ldr	r3, [pc, #64]	; (400c80 <sd_mmc_init_write_blocks+0x98>)
  400c40:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400c42:	e7f2      	b.n	400c2a <sd_mmc_init_write_blocks+0x42>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
  400c44:	4603      	mov	r3, r0
  400c46:	f007 0219 	and.w	r2, r7, #25
  400c4a:	490e      	ldr	r1, [pc, #56]	; (400c84 <sd_mmc_init_write_blocks+0x9c>)
  400c4c:	480e      	ldr	r0, [pc, #56]	; (400c88 <sd_mmc_init_write_blocks+0xa0>)
  400c4e:	4c0f      	ldr	r4, [pc, #60]	; (400c8c <sd_mmc_init_write_blocks+0xa4>)
  400c50:	47a0      	blx	r4
			sd_mmc_deselect_slot();
  400c52:	4b07      	ldr	r3, [pc, #28]	; (400c70 <sd_mmc_init_write_blocks+0x88>)
  400c54:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400c56:	2405      	movs	r4, #5
  400c58:	e7e7      	b.n	400c2a <sd_mmc_init_write_blocks+0x42>
  400c5a:	bf00      	nop
  400c5c:	004001d5 	.word	0x004001d5
  400c60:	00089118 	.word	0x00089118
  400c64:	00109119 	.word	0x00109119
  400c68:	20400a9c 	.word	0x20400a9c
  400c6c:	00401205 	.word	0x00401205
  400c70:	00400261 	.word	0x00400261
  400c74:	004011cd 	.word	0x004011cd
  400c78:	e4580000 	.word	0xe4580000
  400c7c:	20400ac0 	.word	0x20400ac0
  400c80:	20400ac2 	.word	0x20400ac2
  400c84:	00407e60 	.word	0x00407e60
  400c88:	00408140 	.word	0x00408140
  400c8c:	00404f2d 	.word	0x00404f2d

00400c90 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400c90:	b510      	push	{r4, lr}
  400c92:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400c94:	4b06      	ldr	r3, [pc, #24]	; (400cb0 <sd_mmc_start_write_blocks+0x20>)
  400c96:	4798      	blx	r3
  400c98:	b920      	cbnz	r0, 400ca4 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400c9a:	2200      	movs	r2, #0
  400c9c:	4b05      	ldr	r3, [pc, #20]	; (400cb4 <sd_mmc_start_write_blocks+0x24>)
  400c9e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400ca0:	2005      	movs	r0, #5
  400ca2:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400ca4:	4a03      	ldr	r2, [pc, #12]	; (400cb4 <sd_mmc_start_write_blocks+0x24>)
  400ca6:	8813      	ldrh	r3, [r2, #0]
  400ca8:	1b1c      	subs	r4, r3, r4
  400caa:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400cac:	2000      	movs	r0, #0
}
  400cae:	bd10      	pop	{r4, pc}
  400cb0:	00401409 	.word	0x00401409
  400cb4:	20400ac0 	.word	0x20400ac0

00400cb8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400cb8:	b510      	push	{r4, lr}
  400cba:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400cbc:	4b12      	ldr	r3, [pc, #72]	; (400d08 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400cbe:	4798      	blx	r3
  400cc0:	b908      	cbnz	r0, 400cc6 <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400cc2:	2005      	movs	r0, #5
  400cc4:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400cc6:	b184      	cbz	r4, 400cea <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400cc8:	2200      	movs	r2, #0
  400cca:	4b10      	ldr	r3, [pc, #64]	; (400d0c <sd_mmc_wait_end_of_write_blocks+0x54>)
  400ccc:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400cce:	4b10      	ldr	r3, [pc, #64]	; (400d10 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400cd0:	881b      	ldrh	r3, [r3, #0]
  400cd2:	2b01      	cmp	r3, #1
  400cd4:	d00f      	beq.n	400cf6 <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400cd6:	2100      	movs	r1, #0
  400cd8:	f243 100c 	movw	r0, #12556	; 0x310c
  400cdc:	4b0d      	ldr	r3, [pc, #52]	; (400d14 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400cde:	4798      	blx	r3
  400ce0:	b968      	cbnz	r0, 400cfe <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400ce2:	4b0d      	ldr	r3, [pc, #52]	; (400d18 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400ce4:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400ce6:	2005      	movs	r0, #5
  400ce8:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400cea:	4b08      	ldr	r3, [pc, #32]	; (400d0c <sd_mmc_wait_end_of_write_blocks+0x54>)
  400cec:	881b      	ldrh	r3, [r3, #0]
  400cee:	2b00      	cmp	r3, #0
  400cf0:	d0ed      	beq.n	400cce <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400cf2:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400cf4:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400cf6:	4b08      	ldr	r3, [pc, #32]	; (400d18 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400cf8:	4798      	blx	r3
		return SD_MMC_OK;
  400cfa:	2000      	movs	r0, #0
  400cfc:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400cfe:	4b06      	ldr	r3, [pc, #24]	; (400d18 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400d00:	4798      	blx	r3
	return SD_MMC_OK;
  400d02:	2000      	movs	r0, #0
  400d04:	bd10      	pop	{r4, pc}
  400d06:	bf00      	nop
  400d08:	0040146d 	.word	0x0040146d
  400d0c:	20400ac0 	.word	0x20400ac0
  400d10:	20400ac2 	.word	0x20400ac2
  400d14:	004011a9 	.word	0x004011a9
  400d18:	00400261 	.word	0x00400261

00400d1c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400d20:	b980      	cbnz	r0, 400d44 <_read+0x28>
  400d22:	460c      	mov	r4, r1
  400d24:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400d26:	2a00      	cmp	r2, #0
  400d28:	dd0f      	ble.n	400d4a <_read+0x2e>
  400d2a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400d2c:	4e08      	ldr	r6, [pc, #32]	; (400d50 <_read+0x34>)
  400d2e:	4d09      	ldr	r5, [pc, #36]	; (400d54 <_read+0x38>)
  400d30:	6830      	ldr	r0, [r6, #0]
  400d32:	4621      	mov	r1, r4
  400d34:	682b      	ldr	r3, [r5, #0]
  400d36:	4798      	blx	r3
		ptr++;
  400d38:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400d3a:	42bc      	cmp	r4, r7
  400d3c:	d1f8      	bne.n	400d30 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400d3e:	4640      	mov	r0, r8
  400d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400d44:	f04f 38ff 	mov.w	r8, #4294967295
  400d48:	e7f9      	b.n	400d3e <_read+0x22>
	for (; len > 0; --len) {
  400d4a:	4680      	mov	r8, r0
  400d4c:	e7f7      	b.n	400d3e <_read+0x22>
  400d4e:	bf00      	nop
  400d50:	20400c50 	.word	0x20400c50
  400d54:	20400c48 	.word	0x20400c48

00400d58 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400d58:	3801      	subs	r0, #1
  400d5a:	2802      	cmp	r0, #2
  400d5c:	d815      	bhi.n	400d8a <_write+0x32>
{
  400d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d62:	460e      	mov	r6, r1
  400d64:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400d66:	b19a      	cbz	r2, 400d90 <_write+0x38>
  400d68:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400d6a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400da4 <_write+0x4c>
  400d6e:	4f0c      	ldr	r7, [pc, #48]	; (400da0 <_write+0x48>)
  400d70:	f8d8 0000 	ldr.w	r0, [r8]
  400d74:	f815 1b01 	ldrb.w	r1, [r5], #1
  400d78:	683b      	ldr	r3, [r7, #0]
  400d7a:	4798      	blx	r3
  400d7c:	2800      	cmp	r0, #0
  400d7e:	db0a      	blt.n	400d96 <_write+0x3e>
  400d80:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400d82:	3c01      	subs	r4, #1
  400d84:	d1f4      	bne.n	400d70 <_write+0x18>
  400d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400d8a:	f04f 30ff 	mov.w	r0, #4294967295
  400d8e:	4770      	bx	lr
	for (; len != 0; --len) {
  400d90:	4610      	mov	r0, r2
  400d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400d96:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d9e:	bf00      	nop
  400da0:	20400c4c 	.word	0x20400c4c
  400da4:	20400c50 	.word	0x20400c50

00400da8 <aes_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(p_cfg);

	/* Default configuration values */
	p_cfg->encrypt_mode = AES_ENCRYPTION;
  400da8:	2301      	movs	r3, #1
  400daa:	7003      	strb	r3, [r0, #0]
	p_cfg->key_size = AES_KEY_SIZE_128;
  400dac:	2300      	movs	r3, #0
  400dae:	7043      	strb	r3, [r0, #1]
	p_cfg->start_mode = AES_MANUAL_START;
  400db0:	7083      	strb	r3, [r0, #2]
	p_cfg->opmode = AES_ECB_MODE;
  400db2:	70c3      	strb	r3, [r0, #3]
	p_cfg->cfb_size = AES_CFB_SIZE_128;
  400db4:	7103      	strb	r3, [r0, #4]
	p_cfg->lod = false;
  400db6:	7143      	strb	r3, [r0, #5]
	p_cfg->gtag_en = false;
  400db8:	7183      	strb	r3, [r0, #6]
	p_cfg->processing_delay = 0;
  400dba:	6083      	str	r3, [r0, #8]
  400dbc:	4770      	bx	lr
	...

00400dc0 <aes_enable>:

/**
 * \brief Enable the AES module.
 */
void aes_enable(void)
{
  400dc0:	b500      	push	{lr}
  400dc2:	b083      	sub	sp, #12
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400dc4:	2038      	movs	r0, #56	; 0x38
  400dc6:	4b11      	ldr	r3, [pc, #68]	; (400e0c <aes_enable+0x4c>)
  400dc8:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400dca:	4b11      	ldr	r3, [pc, #68]	; (400e10 <aes_enable+0x50>)
  400dcc:	789b      	ldrb	r3, [r3, #2]
  400dce:	2bff      	cmp	r3, #255	; 0xff
  400dd0:	d01a      	beq.n	400e08 <aes_enable+0x48>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400dd2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400dd6:	fab3 f383 	clz	r3, r3
  400dda:	095b      	lsrs	r3, r3, #5
  400ddc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400dde:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400de0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400de4:	2200      	movs	r2, #0
  400de6:	4b0b      	ldr	r3, [pc, #44]	; (400e14 <aes_enable+0x54>)
  400de8:	701a      	strb	r2, [r3, #0]
	return flags;
  400dea:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400dec:	4a08      	ldr	r2, [pc, #32]	; (400e10 <aes_enable+0x50>)
  400dee:	7893      	ldrb	r3, [r2, #2]
  400df0:	3301      	adds	r3, #1
  400df2:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400df4:	b129      	cbz	r1, 400e02 <aes_enable+0x42>
		cpu_irq_enable();
  400df6:	2201      	movs	r2, #1
  400df8:	4b06      	ldr	r3, [pc, #24]	; (400e14 <aes_enable+0x54>)
  400dfa:	701a      	strb	r2, [r3, #0]
  400dfc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400e00:	b662      	cpsie	i
	sysclk_enable_peripheral_clock(ID_AES);
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400e02:	b003      	add	sp, #12
  400e04:	f85d fb04 	ldr.w	pc, [sp], #4
  400e08:	e7fe      	b.n	400e08 <aes_enable+0x48>
  400e0a:	bf00      	nop
  400e0c:	00402f95 	.word	0x00402f95
  400e10:	20401060 	.word	0x20401060
  400e14:	204000c8 	.word	0x204000c8

00400e18 <aes_set_config>:
 * \param[in] p_cfg  Pointer to an AES configuration structure
 */
void aes_set_config(
		Aes *const p_aes,
		struct aes_config *const p_cfg)
{
  400e18:	b470      	push	{r4, r5, r6}
	/* Validate arguments. */
	Assert(p_aes);
	Assert(p_cfg);
	
	/* Set processing mode */
	if (p_cfg->encrypt_mode) {
  400e1a:	780b      	ldrb	r3, [r1, #0]
  400e1c:	1c1c      	adds	r4, r3, #0
  400e1e:	bf18      	it	ne
  400e20:	2401      	movne	r4, #1
		ul_mode |= AES_MR_CIPHER;
	}

	/* Active dual buffer in DMA mode */
	if (p_cfg->start_mode == AES_IDATAR0_START) {
  400e22:	788a      	ldrb	r2, [r1, #2]
  400e24:	2a02      	cmp	r2, #2
		ul_mode |= AES_MR_DUALBUFF_ACTIVE;
  400e26:	bf08      	it	eq
  400e28:	f044 0408 	orreq.w	r4, r4, #8

	/* Set key size */
	ul_mode |= (p_cfg->key_size << AES_MR_KEYSIZE_Pos);

	/* Set Confidentiality mode */
	ul_mode |= (p_cfg->opmode << AES_MR_OPMOD_Pos);
  400e2c:	78cd      	ldrb	r5, [r1, #3]
	ul_mode |= (p_cfg->key_size << AES_MR_KEYSIZE_Pos);
  400e2e:	784e      	ldrb	r6, [r1, #1]
	ul_mode |= (p_cfg->start_mode << AES_MR_SMOD_Pos);
  400e30:	0213      	lsls	r3, r2, #8

	/* Set CFB size */
	ul_mode |= (p_cfg->cfb_size << AES_MR_CFBS_Pos);
  400e32:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
  400e36:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  400e3a:	790a      	ldrb	r2, [r1, #4]
  400e3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400e40:	4323      	orrs	r3, r4

	if (p_cfg->lod) {
  400e42:	794a      	ldrb	r2, [r1, #5]
  400e44:	b10a      	cbz	r2, 400e4a <aes_set_config+0x32>
		ul_mode |= AES_MR_LOD;
  400e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	}

	#if (SAM4C || SAM4CP || SAM4CM || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if ((p_cfg->opmode == AES_GCM_MODE) && (p_cfg->gtag_en == true)) {
  400e4a:	2d05      	cmp	r5, #5
  400e4c:	d008      	beq.n	400e60 <aes_set_config+0x48>
		ul_mode |= AES_MR_GTAGEN;
	}
	#endif /* SAM4C || SAM4CP || SAM4CM */

	ul_mode |= AES_MR_PROCDLY(p_cfg->processing_delay);
  400e4e:	688a      	ldr	r2, [r1, #8]
  400e50:	0112      	lsls	r2, r2, #4
  400e52:	b2d2      	uxtb	r2, r2

	ul_mode |= AES_MR_CKEY_PASSWD;
  400e54:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400e58:	4313      	orrs	r3, r2

	p_aes->AES_MR = ul_mode;
  400e5a:	6043      	str	r3, [r0, #4]
}
  400e5c:	bc70      	pop	{r4, r5, r6}
  400e5e:	4770      	bx	lr
	if ((p_cfg->opmode == AES_GCM_MODE) && (p_cfg->gtag_en == true)) {
  400e60:	798a      	ldrb	r2, [r1, #6]
  400e62:	2a00      	cmp	r2, #0
  400e64:	d0f3      	beq.n	400e4e <aes_set_config+0x36>
		ul_mode |= AES_MR_GTAGEN;
  400e66:	f043 0302 	orr.w	r3, r3, #2
  400e6a:	e7f0      	b.n	400e4e <aes_set_config+0x36>

00400e6c <aes_init>:
{
  400e6c:	b538      	push	{r3, r4, r5, lr}
  400e6e:	4604      	mov	r4, r0
  400e70:	460d      	mov	r5, r1
  400e72:	2038      	movs	r0, #56	; 0x38
  400e74:	4b06      	ldr	r3, [pc, #24]	; (400e90 <aes_init+0x24>)
  400e76:	4798      	blx	r3
 *
 * \param[out] p_aes Module hardware register base address pointer
 */
static inline void aes_reset(Aes *const p_aes)
{
	p_aes->AES_CR = AES_CR_SWRST;
  400e78:	f44f 7380 	mov.w	r3, #256	; 0x100
  400e7c:	6023      	str	r3, [r4, #0]
	aes_set_config(p_aes, p_cfg);
  400e7e:	4629      	mov	r1, r5
  400e80:	4620      	mov	r0, r4
  400e82:	4b04      	ldr	r3, [pc, #16]	; (400e94 <aes_init+0x28>)
  400e84:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
  400e86:	2038      	movs	r0, #56	; 0x38
  400e88:	4b03      	ldr	r3, [pc, #12]	; (400e98 <aes_init+0x2c>)
  400e8a:	4798      	blx	r3
  400e8c:	bd38      	pop	{r3, r4, r5, pc}
  400e8e:	bf00      	nop
  400e90:	00402f95 	.word	0x00402f95
  400e94:	00400e19 	.word	0x00400e19
  400e98:	00402fe9 	.word	0x00402fe9

00400e9c <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		Aes *const p_aes,
		const uint32_t *p_key)
{
  400e9c:	b430      	push	{r4, r5}

	/* Validate arguments. */
	Assert(p_aes);
	Assert(p_key);
	
	switch ((p_aes->AES_MR & AES_MR_KEYSIZE_Msk) >>
  400e9e:	6843      	ldr	r3, [r0, #4]
  400ea0:	f3c3 2381 	ubfx	r3, r3, #10, #2
  400ea4:	2b01      	cmp	r3, #1
  400ea6:	d004      	beq.n	400eb2 <aes_write_key+0x16>
  400ea8:	b183      	cbz	r3, 400ecc <aes_write_key+0x30>
  400eaa:	2b02      	cmp	r3, #2
  400eac:	d10c      	bne.n	400ec8 <aes_write_key+0x2c>
	case 1: /* 192bit cryptographic key */
		key_length = 6;
		break;

	case 2: /* 256bit cryptographic key */
		key_length = 8;
  400eae:	2508      	movs	r5, #8
  400eb0:	e000      	b.n	400eb4 <aes_write_key+0x18>
		key_length = 6;
  400eb2:	2506      	movs	r5, #6
{
  400eb4:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		p_aes->AES_KEYWR[i] = *p_key;
  400eb6:	f851 4b04 	ldr.w	r4, [r1], #4
  400eba:	f103 0208 	add.w	r2, r3, #8
  400ebe:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (i = 0; i < key_length; i++) {
  400ec2:	3301      	adds	r3, #1
  400ec4:	42ab      	cmp	r3, r5
  400ec6:	d3f6      	bcc.n	400eb6 <aes_write_key+0x1a>
		p_key++;
	}
}
  400ec8:	bc30      	pop	{r4, r5}
  400eca:	4770      	bx	lr
		key_length = 4;
  400ecc:	2504      	movs	r5, #4
  400ece:	e7f1      	b.n	400eb4 <aes_write_key+0x18>

00400ed0 <aes_write_initvector>:
 * \param[in] p_vector Pointer to four contiguous 32-bit words
 */
void aes_write_initvector(
		Aes *const p_aes,
		const uint32_t *p_vector)
{
  400ed0:	b410      	push	{r4}
	uint32_t i;

	/* Validate arguments. */
	Assert(p_aes);
	
	for (i = 0; i < 4; i++) {
  400ed2:	2300      	movs	r3, #0
		p_aes->AES_IVR[i] = *p_vector;
  400ed4:	f851 4b04 	ldr.w	r4, [r1], #4
  400ed8:	f103 0218 	add.w	r2, r3, #24
  400edc:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (i = 0; i < 4; i++) {
  400ee0:	3301      	adds	r3, #1
  400ee2:	2b04      	cmp	r3, #4
  400ee4:	d1f6      	bne.n	400ed4 <aes_write_initvector+0x4>
		p_vector++;
	}
}
  400ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
  400eea:	4770      	bx	lr

00400eec <aes_write_input_data>:
 * \param[in] p_input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		Aes *const p_aes,
		const uint32_t *p_input_data_buffer)
{
  400eec:	b410      	push	{r4}

	/* Validate arguments. */
	Assert(p_aes);
	Assert(p_input_data_buffer);
	
	for (i = 0; i < 4; i++) {
  400eee:	2300      	movs	r3, #0
		p_aes->AES_IDATAR[i] = *p_input_data_buffer;
  400ef0:	f851 4b04 	ldr.w	r4, [r1], #4
  400ef4:	f103 0210 	add.w	r2, r3, #16
  400ef8:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (i = 0; i < 4; i++) {
  400efc:	3301      	adds	r3, #1
  400efe:	2b04      	cmp	r3, #4
  400f00:	d1f6      	bne.n	400ef0 <aes_write_input_data+0x4>
		p_input_data_buffer++;
	}
}
  400f02:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f06:	4770      	bx	lr

00400f08 <aes_read_output_data>:

	/* Validate arguments. */
	Assert(p_aes);
	Assert(p_output_data_buffer);
	
	for (i = 0; i < 4; i++) {
  400f08:	2300      	movs	r3, #0
		*p_output_data_buffer = p_aes->AES_ODATAR[i];
  400f0a:	f103 0214 	add.w	r2, r3, #20
  400f0e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  400f12:	f841 2b04 	str.w	r2, [r1], #4
	for (i = 0; i < 4; i++) {
  400f16:	3301      	adds	r3, #1
  400f18:	2b04      	cmp	r3, #4
  400f1a:	d1f6      	bne.n	400f0a <aes_read_output_data+0x2>
		p_output_data_buffer++;
	}
}
  400f1c:	4770      	bx	lr
	...

00400f20 <aes_set_callback>:
void aes_set_callback(
		Aes *const p_aes,
		aes_interrupt_source_t source,
		aes_callback_t callback,
		uint8_t irq_level)
{
  400f20:	b410      	push	{r4}
	/* Validate arguments. */
	Assert(p_aes);
	
	if (source == AES_INTERRUPT_DATA_READY) {
  400f22:	2901      	cmp	r1, #1
  400f24:	d013      	beq.n	400f4e <aes_set_callback+0x2e>
		aes_callback_pointer[0] = callback;
	} else if (source == AES_INTERRUPT_UNSPECIFIED_REGISTER_ACCESS) {
  400f26:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  400f2a:	d013      	beq.n	400f54 <aes_set_callback+0x34>
		aes_callback_pointer[4] = callback;
	} else if (source == AES_INTERRUPT_TRANSMIT_BUFFER_FULL) {
		aes_callback_pointer[5] = callback;
	}
#elif SAMV70 || SAMV71 || SAME70 || SAMS70
	else if ((source == AES_INTERRUPT_TAG_READY)) {
  400f2c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
  400f30:	d013      	beq.n	400f5a <aes_set_callback+0x3a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400f32:	4a0b      	ldr	r2, [pc, #44]	; (400f60 <aes_set_callback+0x40>)
  400f34:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
  400f38:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
{
  if(IRQn < 0) {
	 // printf("nvic...........");
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400f3c:	015b      	lsls	r3, r3, #5
  400f3e:	b2db      	uxtb	r3, r3
  400f40:	f882 3338 	strb.w	r3, [r2, #824]	; 0x338
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400f44:	6054      	str	r4, [r2, #4]
 * \param[in] source \ref aes_interrupt_source "Interrupt source"
 */
static inline void aes_enable_interrupt(Aes *const p_aes,
		aes_interrupt_source_t source)
{
	p_aes->AES_IER = (uint32_t)source;
  400f46:	6101      	str	r1, [r0, #16]
		aes_callback_pointer[2] = callback;
	}
#endif /* SAM4C || SAM4CP || SAM4CM */
	irq_register_handler((IRQn_Type)AES_IRQn, irq_level);
	aes_enable_interrupt(p_aes, source);
}
  400f48:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f4c:	4770      	bx	lr
		aes_callback_pointer[0] = callback;
  400f4e:	4c05      	ldr	r4, [pc, #20]	; (400f64 <aes_set_callback+0x44>)
  400f50:	6022      	str	r2, [r4, #0]
  400f52:	e7ee      	b.n	400f32 <aes_set_callback+0x12>
		aes_callback_pointer[1] = callback;
  400f54:	4c03      	ldr	r4, [pc, #12]	; (400f64 <aes_set_callback+0x44>)
  400f56:	6062      	str	r2, [r4, #4]
  400f58:	e7eb      	b.n	400f32 <aes_set_callback+0x12>
		aes_callback_pointer[2] = callback;
  400f5a:	4c02      	ldr	r4, [pc, #8]	; (400f64 <aes_set_callback+0x44>)
  400f5c:	60a2      	str	r2, [r4, #8]
  400f5e:	e7e8      	b.n	400f32 <aes_set_callback+0x12>
  400f60:	e000e100 	.word	0xe000e100
  400f64:	20400c54 	.word	0x20400c54

00400f68 <AES_Handler>:

/**
 * \internal The AES interrupt handler.
 */
void AES_Handler(void)
{
  400f68:	b538      	push	{r3, r4, r5, lr}
	return p_aes->AES_ISR;
  400f6a:	4b11      	ldr	r3, [pc, #68]	; (400fb0 <AES_Handler+0x48>)
  400f6c:	69dc      	ldr	r4, [r3, #28]
 *
 * \return The AES interrupt mask contents.
 */
static inline uint32_t aes_read_interrupt_mask(Aes *const p_aes)
{
	return p_aes->AES_IMR;
  400f6e:	699d      	ldr	r5, [r3, #24]
	uint32_t status = aes_read_interrupt_status(AES);
	uint32_t mask = aes_read_interrupt_mask(AES);

	if ((status & AES_ISR_DATRDY) && (mask & AES_IMR_DATRDY)) {
  400f70:	f014 0f01 	tst.w	r4, #1
  400f74:	d006      	beq.n	400f84 <AES_Handler+0x1c>
  400f76:	f015 0f01 	tst.w	r5, #1
  400f7a:	d003      	beq.n	400f84 <AES_Handler+0x1c>
		if (aes_callback_pointer[0]) {
  400f7c:	4b0d      	ldr	r3, [pc, #52]	; (400fb4 <AES_Handler+0x4c>)
  400f7e:	681b      	ldr	r3, [r3, #0]
  400f80:	b103      	cbz	r3, 400f84 <AES_Handler+0x1c>
			aes_callback_pointer[0]();
  400f82:	4798      	blx	r3
		}
	}

	if ((status & AES_ISR_URAD) && (mask & AES_IMR_URAD)) {
  400f84:	f414 7f80 	tst.w	r4, #256	; 0x100
  400f88:	d006      	beq.n	400f98 <AES_Handler+0x30>
  400f8a:	f415 7f80 	tst.w	r5, #256	; 0x100
  400f8e:	d003      	beq.n	400f98 <AES_Handler+0x30>
		if (aes_callback_pointer[1]) {
  400f90:	4b08      	ldr	r3, [pc, #32]	; (400fb4 <AES_Handler+0x4c>)
  400f92:	685b      	ldr	r3, [r3, #4]
  400f94:	b103      	cbz	r3, 400f98 <AES_Handler+0x30>
			aes_callback_pointer[1]();
  400f96:	4798      	blx	r3
		if (aes_callback_pointer[5]) {
			aes_callback_pointer[5]();
		}
	}
#elif SAMV70 || SAMV71 || SAME70 || SAMS70
	if ((status & AES_IER_TAGRDY) && (mask & AES_IER_TAGRDY)) {
  400f98:	f414 3f80 	tst.w	r4, #65536	; 0x10000
  400f9c:	d006      	beq.n	400fac <AES_Handler+0x44>
  400f9e:	f415 3f80 	tst.w	r5, #65536	; 0x10000
  400fa2:	d003      	beq.n	400fac <AES_Handler+0x44>
		if (aes_callback_pointer[2]) {
  400fa4:	4b03      	ldr	r3, [pc, #12]	; (400fb4 <AES_Handler+0x4c>)
  400fa6:	689b      	ldr	r3, [r3, #8]
  400fa8:	b103      	cbz	r3, 400fac <AES_Handler+0x44>
			aes_callback_pointer[2]();
  400faa:	4798      	blx	r3
  400fac:	bd38      	pop	{r3, r4, r5, pc}
  400fae:	bf00      	nop
  400fb0:	4006c000 	.word	0x4006c000
  400fb4:	20400c54 	.word	0x20400c54

00400fb8 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  400fb8:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  400fba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400fbe:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  400fc0:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  400fc2:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  400fc4:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  400fc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  400fc8:	2680      	movs	r6, #128	; 0x80
  400fca:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  400fcc:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  400fce:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  400fd0:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  400fd2:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  400fd4:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  400fd6:	2200      	movs	r2, #0
  400fd8:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  400fda:	2205      	movs	r2, #5
  400fdc:	601a      	str	r2, [r3, #0]
}
  400fde:	bc70      	pop	{r4, r5, r6}
  400fe0:	4770      	bx	lr
	...

00400fe4 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  400fe4:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  400fe6:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  400fea:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  400fec:	f411 7f80 	tst.w	r1, #256	; 0x100
  400ff0:	d004      	beq.n	400ffc <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  400ff2:	f411 6f00 	tst.w	r1, #2048	; 0x800
  400ff6:	d00e      	beq.n	401016 <hsmci_send_cmd_execute+0x32>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  400ff8:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  400ffc:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  401000:	bf18      	it	ne
  401002:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  401006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40100a:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  40100c:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  40100e:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  401010:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  401014:	e00d      	b.n	401032 <hsmci_send_cmd_execute+0x4e>
		} else if (cmd & SDMMC_RESP_BUSY) {
  401016:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  40101a:	bf14      	ite	ne
  40101c:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  401020:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  401024:	e7ea      	b.n	400ffc <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401026:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  40102a:	d10c      	bne.n	401046 <hsmci_send_cmd_execute+0x62>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  40102c:	f013 0f01 	tst.w	r3, #1
  401030:	d10d      	bne.n	40104e <hsmci_send_cmd_execute+0x6a>
		sr = HSMCI->HSMCI_SR;
  401032:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  401034:	2a00      	cmp	r2, #0
  401036:	d0f6      	beq.n	401026 <hsmci_send_cmd_execute+0x42>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401038:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  40103c:	d0f6      	beq.n	40102c <hsmci_send_cmd_execute+0x48>
				hsmci_reset();
  40103e:	4b10      	ldr	r3, [pc, #64]	; (401080 <hsmci_send_cmd_execute+0x9c>)
  401040:	4798      	blx	r3
				return false;
  401042:	2000      	movs	r0, #0
  401044:	bd08      	pop	{r3, pc}
				hsmci_reset();
  401046:	4b0e      	ldr	r3, [pc, #56]	; (401080 <hsmci_send_cmd_execute+0x9c>)
  401048:	4798      	blx	r3
				return false;
  40104a:	2000      	movs	r0, #0
  40104c:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  40104e:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  401052:	d103      	bne.n	40105c <hsmci_send_cmd_execute+0x78>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  401054:	2001      	movs	r0, #1
  401056:	bd08      	pop	{r3, pc}
	return true;
  401058:	2001      	movs	r0, #1
  40105a:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  40105c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401062:	f04f 32ff 	mov.w	r2, #4294967295
  401066:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  40106a:	f003 0330 	and.w	r3, r3, #48	; 0x30
  40106e:	2b20      	cmp	r3, #32
  401070:	d0f2      	beq.n	401058 <hsmci_send_cmd_execute+0x74>
		sr = HSMCI->HSMCI_SR;
  401072:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  401074:	3a01      	subs	r2, #1
  401076:	d1f8      	bne.n	40106a <hsmci_send_cmd_execute+0x86>
			hsmci_reset();
  401078:	4b01      	ldr	r3, [pc, #4]	; (401080 <hsmci_send_cmd_execute+0x9c>)
  40107a:	4798      	blx	r3
			return false;
  40107c:	2000      	movs	r0, #0
  40107e:	bd08      	pop	{r3, pc}
  401080:	00400fb9 	.word	0x00400fb9

00401084 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  401084:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  401086:	2012      	movs	r0, #18
  401088:	4c08      	ldr	r4, [pc, #32]	; (4010ac <hsmci_init+0x28>)
  40108a:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  40108c:	203a      	movs	r0, #58	; 0x3a
  40108e:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  401090:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401094:	2272      	movs	r2, #114	; 0x72
  401096:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  401098:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  40109a:	2211      	movs	r2, #17
  40109c:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  40109e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  4010a2:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  4010a4:	2205      	movs	r2, #5
  4010a6:	601a      	str	r2, [r3, #0]
  4010a8:	bd10      	pop	{r4, pc}
  4010aa:	bf00      	nop
  4010ac:	00402f95 	.word	0x00402f95

004010b0 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  4010b0:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  4010b2:	bf0c      	ite	eq
  4010b4:	2004      	moveq	r0, #4
  4010b6:	2000      	movne	r0, #0
  4010b8:	4770      	bx	lr

004010ba <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  4010ba:	2001      	movs	r0, #1
  4010bc:	4770      	bx	lr
	...

004010c0 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  4010c0:	b37b      	cbz	r3, 401122 <hsmci_select_device+0x62>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  4010c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4010c6:	6d43      	ldr	r3, [r0, #84]	; 0x54
  4010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4010cc:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  4010ce:	4b2b      	ldr	r3, [pc, #172]	; (40117c <hsmci_select_device+0xbc>)
  4010d0:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  4010d4:	d337      	bcc.n	401146 <hsmci_select_device+0x86>
{
  4010d6:	b410      	push	{r4}
		div = (mck / speed) - 2;
  4010d8:	4829      	ldr	r0, [pc, #164]	; (401180 <hsmci_select_device+0xc0>)
  4010da:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  4010de:	fb01 0113 	mls	r1, r1, r3, r0
  4010e2:	bb29      	cbnz	r1, 401130 <hsmci_select_device+0x70>
		div = (mck / speed) - 2;
  4010e4:	3b02      	subs	r3, #2
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  4010e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4010ea:	6848      	ldr	r0, [r1, #4]
  4010ec:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  4010f0:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  4010f2:	684c      	ldr	r4, [r1, #4]
  4010f4:	f3c3 0047 	ubfx	r0, r3, #1, #8
  4010f8:	4320      	orrs	r0, r4
  4010fa:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  4010fc:	f013 0f01 	tst.w	r3, #1
  401100:	d018      	beq.n	401134 <hsmci_select_device+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  401102:	684b      	ldr	r3, [r1, #4]
  401104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401108:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  40110a:	2a04      	cmp	r2, #4
  40110c:	d019      	beq.n	401142 <hsmci_select_device+0x82>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  40110e:	2a08      	cmp	r2, #8
  401110:	bf0c      	ite	eq
  401112:	22c0      	moveq	r2, #192	; 0xc0
  401114:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  401116:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40111a:	60da      	str	r2, [r3, #12]
}
  40111c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401120:	4770      	bx	lr
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  401122:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401126:	6d43      	ldr	r3, [r0, #84]	; 0x54
  401128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  40112c:	6543      	str	r3, [r0, #84]	; 0x54
  40112e:	e7ce      	b.n	4010ce <hsmci_select_device+0xe>
			div++;
  401130:	3b01      	subs	r3, #1
  401132:	e7d8      	b.n	4010e6 <hsmci_select_device+0x26>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  401134:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401138:	684b      	ldr	r3, [r1, #4]
  40113a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40113e:	604b      	str	r3, [r1, #4]
  401140:	e7e3      	b.n	40110a <hsmci_select_device+0x4a>
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  401142:	2280      	movs	r2, #128	; 0x80
  401144:	e7e7      	b.n	401116 <hsmci_select_device+0x56>
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  401146:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40114a:	6859      	ldr	r1, [r3, #4]
  40114c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  401150:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  401152:	6859      	ldr	r1, [r3, #4]
  401154:	6059      	str	r1, [r3, #4]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  401156:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40115a:	684b      	ldr	r3, [r1, #4]
  40115c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401160:	604b      	str	r3, [r1, #4]
	switch (bus_width) {
  401162:	2a04      	cmp	r2, #4
  401164:	d007      	beq.n	401176 <hsmci_select_device+0xb6>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  401166:	2a08      	cmp	r2, #8
  401168:	bf0c      	ite	eq
  40116a:	22c0      	moveq	r2, #192	; 0xc0
  40116c:	2200      	movne	r2, #0
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  40116e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401172:	60da      	str	r2, [r3, #12]
  401174:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  401176:	2280      	movs	r2, #128	; 0x80
  401178:	e7f9      	b.n	40116e <hsmci_select_device+0xae>
  40117a:	bf00      	nop
  40117c:	08f0d17f 	.word	0x08f0d17f
  401180:	08f0d180 	.word	0x08f0d180

00401184 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  401184:	4770      	bx	lr

00401186 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  401186:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40118a:	685a      	ldr	r2, [r3, #4]
  40118c:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401190:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  401192:	2200      	movs	r2, #0
  401194:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  401196:	f44f 6210 	mov.w	r2, #2304	; 0x900
  40119a:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  40119c:	461a      	mov	r2, r3
  40119e:	6c13      	ldr	r3, [r2, #64]	; 0x40
  4011a0:	f013 0f01 	tst.w	r3, #1
  4011a4:	d0fb      	beq.n	40119e <hsmci_send_clock+0x18>
}
  4011a6:	4770      	bx	lr

004011a8 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  4011a8:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4011aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4011ae:	685a      	ldr	r2, [r3, #4]
  4011b0:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4011b4:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  4011b6:	2400      	movs	r4, #0
  4011b8:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  4011ba:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  4011bc:	460a      	mov	r2, r1
  4011be:	4601      	mov	r1, r0
  4011c0:	4620      	mov	r0, r4
  4011c2:	4b01      	ldr	r3, [pc, #4]	; (4011c8 <hsmci_send_cmd+0x20>)
  4011c4:	4798      	blx	r3
}
  4011c6:	bd10      	pop	{r4, pc}
  4011c8:	00400fe5 	.word	0x00400fe5

004011cc <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  4011cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4011d0:	6a18      	ldr	r0, [r3, #32]
}
  4011d2:	4770      	bx	lr

004011d4 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  4011d4:	b410      	push	{r4}
  4011d6:	1d03      	adds	r3, r0, #4
  4011d8:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  4011da:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4011de:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  4011e0:	0e11      	lsrs	r1, r2, #24
  4011e2:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  4011e6:	0c11      	lsrs	r1, r2, #16
  4011e8:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  4011ec:	0a11      	lsrs	r1, r2, #8
  4011ee:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  4011f2:	f803 2c01 	strb.w	r2, [r3, #-1]
  4011f6:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  4011f8:	4283      	cmp	r3, r0
  4011fa:	d1f0      	bne.n	4011de <hsmci_get_response_128+0xa>
		response++;
	}
}
  4011fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  401200:	4770      	bx	lr
	...

00401204 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  401204:	b570      	push	{r4, r5, r6, lr}
  401206:	f89d 4010 	ldrb.w	r4, [sp, #16]
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  40120a:	b384      	cbz	r4, 40126e <hsmci_adtc_start+0x6a>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  40120c:	f44f 7580 	mov.w	r5, #256	; 0x100
  401210:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401214:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  401216:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  40121a:	686c      	ldr	r4, [r5, #4]
  40121c:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  401220:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  401222:	f012 0f03 	tst.w	r2, #3
  401226:	d027      	beq.n	401278 <hsmci_adtc_start+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  401228:	686c      	ldr	r4, [r5, #4]
  40122a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40122e:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  401230:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  401234:	2c00      	cmp	r4, #0
  401236:	bf14      	ite	ne
  401238:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  40123c:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  401240:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  401244:	d11f      	bne.n	401286 <hsmci_adtc_start+0x82>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  401246:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  40124a:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  40124e:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  401250:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  401254:	d12b      	bne.n	4012ae <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  401256:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  40125a:	d12b      	bne.n	4012b4 <hsmci_adtc_start+0xb0>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  40125c:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  401260:	d118      	bne.n	401294 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  401262:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  401266:	bf18      	it	ne
  401268:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  40126c:	e012      	b.n	401294 <hsmci_adtc_start+0x90>
		HSMCI->HSMCI_DMA = 0;
  40126e:	2500      	movs	r5, #0
  401270:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401274:	6525      	str	r5, [r4, #80]	; 0x50
  401276:	e7ce      	b.n	401216 <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401278:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  40127c:	686c      	ldr	r4, [r5, #4]
  40127e:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  401282:	606c      	str	r4, [r5, #4]
  401284:	e7d4      	b.n	401230 <hsmci_adtc_start+0x2c>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  401286:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  40128a:	f3c2 0508 	ubfx	r5, r2, #0, #9
  40128e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  401292:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  401294:	2600      	movs	r6, #0
  401296:	4d09      	ldr	r5, [pc, #36]	; (4012bc <hsmci_adtc_start+0xb8>)
  401298:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  40129a:	4d09      	ldr	r5, [pc, #36]	; (4012c0 <hsmci_adtc_start+0xbc>)
  40129c:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  40129e:	4a09      	ldr	r2, [pc, #36]	; (4012c4 <hsmci_adtc_start+0xc0>)
  4012a0:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  4012a2:	460a      	mov	r2, r1
  4012a4:	4601      	mov	r1, r0
  4012a6:	4620      	mov	r0, r4
  4012a8:	4b07      	ldr	r3, [pc, #28]	; (4012c8 <hsmci_adtc_start+0xc4>)
  4012aa:	4798      	blx	r3
}
  4012ac:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  4012ae:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  4012b2:	e7ef      	b.n	401294 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  4012b4:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4012b8:	e7ec      	b.n	401294 <hsmci_adtc_start+0x90>
  4012ba:	bf00      	nop
  4012bc:	20400acc 	.word	0x20400acc
  4012c0:	20400ac6 	.word	0x20400ac6
  4012c4:	20400ac8 	.word	0x20400ac8
  4012c8:	00400fe5 	.word	0x00400fe5

004012cc <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  4012cc:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  4012ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4012d2:	4a16      	ldr	r2, [pc, #88]	; (40132c <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  4012d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4012d6:	4213      	tst	r3, r2
  4012d8:	d11d      	bne.n	401316 <hsmci_read_word+0x4a>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  4012da:	f013 0f02 	tst.w	r3, #2
  4012de:	d0f9      	beq.n	4012d4 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  4012e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012e6:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  4012e8:	4a11      	ldr	r2, [pc, #68]	; (401330 <hsmci_read_word+0x64>)
  4012ea:	6813      	ldr	r3, [r2, #0]
  4012ec:	3304      	adds	r3, #4
  4012ee:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4012f0:	4a10      	ldr	r2, [pc, #64]	; (401334 <hsmci_read_word+0x68>)
  4012f2:	8811      	ldrh	r1, [r2, #0]
  4012f4:	4a10      	ldr	r2, [pc, #64]	; (401338 <hsmci_read_word+0x6c>)
  4012f6:	8812      	ldrh	r2, [r2, #0]
  4012f8:	fb02 f201 	mul.w	r2, r2, r1
  4012fc:	4293      	cmp	r3, r2
  4012fe:	d312      	bcc.n	401326 <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  401300:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401304:	4a09      	ldr	r2, [pc, #36]	; (40132c <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  401306:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401308:	4213      	tst	r3, r2
  40130a:	d108      	bne.n	40131e <hsmci_read_word+0x52>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  40130c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401310:	d0f9      	beq.n	401306 <hsmci_read_word+0x3a>
	return true;
  401312:	2001      	movs	r0, #1
  401314:	bd08      	pop	{r3, pc}
			hsmci_reset();
  401316:	4b09      	ldr	r3, [pc, #36]	; (40133c <hsmci_read_word+0x70>)
  401318:	4798      	blx	r3
			return false;
  40131a:	2000      	movs	r0, #0
  40131c:	bd08      	pop	{r3, pc}
			hsmci_reset();
  40131e:	4b07      	ldr	r3, [pc, #28]	; (40133c <hsmci_read_word+0x70>)
  401320:	4798      	blx	r3
			return false;
  401322:	2000      	movs	r0, #0
  401324:	bd08      	pop	{r3, pc}
		return true;
  401326:	2001      	movs	r0, #1
}
  401328:	bd08      	pop	{r3, pc}
  40132a:	bf00      	nop
  40132c:	c0600000 	.word	0xc0600000
  401330:	20400acc 	.word	0x20400acc
  401334:	20400ac6 	.word	0x20400ac6
  401338:	20400ac8 	.word	0x20400ac8
  40133c:	00400fb9 	.word	0x00400fb9

00401340 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  401340:	b5f0      	push	{r4, r5, r6, r7, lr}
  401342:	b089      	sub	sp, #36	; 0x24
  401344:	4607      	mov	r7, r0
  401346:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  401348:	2220      	movs	r2, #32
  40134a:	2100      	movs	r1, #0
  40134c:	4668      	mov	r0, sp
  40134e:	4b0e      	ldr	r3, [pc, #56]	; (401388 <hsmci_start_read_blocks+0x48>)
  401350:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401352:	4e0e      	ldr	r6, [pc, #56]	; (40138c <hsmci_start_read_blocks+0x4c>)
  401354:	2501      	movs	r5, #1
  401356:	6235      	str	r5, [r6, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  401358:	4b0d      	ldr	r3, [pc, #52]	; (401390 <hsmci_start_read_blocks+0x50>)
  40135a:	881b      	ldrh	r3, [r3, #0]
  40135c:	fb04 f403 	mul.w	r4, r4, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401360:	4b0c      	ldr	r3, [pc, #48]	; (401394 <hsmci_start_read_blocks+0x54>)
  401362:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF1
					| XDMAC_CC_DIF_AHB_IF0
					| XDMAC_CC_SAM_FIXED_AM
					| XDMAC_CC_DAM_INCREMENTED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  401364:	08a3      	lsrs	r3, r4, #2
  401366:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  401368:	4b0b      	ldr	r3, [pc, #44]	; (401398 <hsmci_start_read_blocks+0x58>)
  40136a:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  40136c:	9702      	str	r7, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  40136e:	466a      	mov	r2, sp
  401370:	2100      	movs	r1, #0
  401372:	4630      	mov	r0, r6
  401374:	4b09      	ldr	r3, [pc, #36]	; (40139c <hsmci_start_read_blocks+0x5c>)
  401376:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  401378:	61f5      	str	r5, [r6, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  40137a:	4a09      	ldr	r2, [pc, #36]	; (4013a0 <hsmci_start_read_blocks+0x60>)
  40137c:	6813      	ldr	r3, [r2, #0]
  40137e:	441c      	add	r4, r3
  401380:	6014      	str	r4, [r2, #0]
	return true;
}
  401382:	4628      	mov	r0, r5
  401384:	b009      	add	sp, #36	; 0x24
  401386:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401388:	00404f55 	.word	0x00404f55
  40138c:	40078000 	.word	0x40078000
  401390:	20400ac6 	.word	0x20400ac6
  401394:	00043001 	.word	0x00043001
  401398:	40000200 	.word	0x40000200
  40139c:	0040187b 	.word	0x0040187b
  4013a0:	20400acc 	.word	0x20400acc

004013a4 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  4013a4:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4013a6:	4b12      	ldr	r3, [pc, #72]	; (4013f0 <hsmci_wait_end_of_read_blocks+0x4c>)
  4013a8:	881b      	ldrh	r3, [r3, #0]
  4013aa:	4a12      	ldr	r2, [pc, #72]	; (4013f4 <hsmci_wait_end_of_read_blocks+0x50>)
  4013ac:	8812      	ldrh	r2, [r2, #0]
  4013ae:	fb02 f203 	mul.w	r2, r2, r3
  4013b2:	4b11      	ldr	r3, [pc, #68]	; (4013f8 <hsmci_wait_end_of_read_blocks+0x54>)
  4013b4:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  4013b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4013ba:	4910      	ldr	r1, [pc, #64]	; (4013fc <hsmci_wait_end_of_read_blocks+0x58>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4013bc:	4e10      	ldr	r6, [pc, #64]	; (401400 <hsmci_wait_end_of_read_blocks+0x5c>)
  4013be:	e009      	b.n	4013d4 <hsmci_wait_end_of_read_blocks+0x30>
			hsmci_reset();
  4013c0:	4b10      	ldr	r3, [pc, #64]	; (401404 <hsmci_wait_end_of_read_blocks+0x60>)
  4013c2:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4013c4:	2201      	movs	r2, #1
  4013c6:	4b0e      	ldr	r3, [pc, #56]	; (401400 <hsmci_wait_end_of_read_blocks+0x5c>)
  4013c8:	621a      	str	r2, [r3, #32]
			return false;
  4013ca:	2000      	movs	r0, #0
  4013cc:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4013ce:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4013d2:	d10a      	bne.n	4013ea <hsmci_wait_end_of_read_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  4013d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4013d6:	420b      	tst	r3, r1
  4013d8:	d1f2      	bne.n	4013c0 <hsmci_wait_end_of_read_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4013da:	42a2      	cmp	r2, r4
  4013dc:	d9f7      	bls.n	4013ce <hsmci_wait_end_of_read_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4013de:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  4013e0:	f015 0f01 	tst.w	r5, #1
  4013e4:	d0f3      	beq.n	4013ce <hsmci_wait_end_of_read_blocks+0x2a>
				return true;
  4013e6:	2001      	movs	r0, #1
	return true;
}
  4013e8:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  4013ea:	2001      	movs	r0, #1
  4013ec:	bd70      	pop	{r4, r5, r6, pc}
  4013ee:	bf00      	nop
  4013f0:	20400ac6 	.word	0x20400ac6
  4013f4:	20400ac8 	.word	0x20400ac8
  4013f8:	20400acc 	.word	0x20400acc
  4013fc:	c0600000 	.word	0xc0600000
  401400:	40078000 	.word	0x40078000
  401404:	00400fb9 	.word	0x00400fb9

00401408 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  401408:	b5f0      	push	{r4, r5, r6, r7, lr}
  40140a:	b089      	sub	sp, #36	; 0x24
  40140c:	4607      	mov	r7, r0
  40140e:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  401410:	2220      	movs	r2, #32
  401412:	2100      	movs	r1, #0
  401414:	4668      	mov	r0, sp
  401416:	4b0e      	ldr	r3, [pc, #56]	; (401450 <hsmci_start_write_blocks+0x48>)
  401418:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  40141a:	4e0e      	ldr	r6, [pc, #56]	; (401454 <hsmci_start_write_blocks+0x4c>)
  40141c:	2501      	movs	r5, #1
  40141e:	6235      	str	r5, [r6, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  401420:	4b0d      	ldr	r3, [pc, #52]	; (401458 <hsmci_start_write_blocks+0x50>)
  401422:	881b      	ldrh	r3, [r3, #0]
  401424:	fb04 f403 	mul.w	r4, r4, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401428:	4b0c      	ldr	r3, [pc, #48]	; (40145c <hsmci_start_write_blocks+0x54>)
  40142a:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF0
					| XDMAC_CC_DIF_AHB_IF1
					| XDMAC_CC_SAM_INCREMENTED_AM
					| XDMAC_CC_DAM_FIXED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  40142c:	08a3      	lsrs	r3, r4, #2
  40142e:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)src;
  401430:	9701      	str	r7, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  401432:	4b0b      	ldr	r3, [pc, #44]	; (401460 <hsmci_start_write_blocks+0x58>)
  401434:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  401436:	466a      	mov	r2, sp
  401438:	2100      	movs	r1, #0
  40143a:	4630      	mov	r0, r6
  40143c:	4b09      	ldr	r3, [pc, #36]	; (401464 <hsmci_start_write_blocks+0x5c>)
  40143e:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  401440:	61f5      	str	r5, [r6, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  401442:	4a09      	ldr	r2, [pc, #36]	; (401468 <hsmci_start_write_blocks+0x60>)
  401444:	6813      	ldr	r3, [r2, #0]
  401446:	441c      	add	r4, r3
  401448:	6014      	str	r4, [r2, #0]
	return true;
}
  40144a:	4628      	mov	r0, r5
  40144c:	b009      	add	sp, #36	; 0x24
  40144e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401450:	00404f55 	.word	0x00404f55
  401454:	40078000 	.word	0x40078000
  401458:	20400ac6 	.word	0x20400ac6
  40145c:	00015011 	.word	0x00015011
  401460:	40000200 	.word	0x40000200
  401464:	0040187b 	.word	0x0040187b
  401468:	20400acc 	.word	0x20400acc

0040146c <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  40146c:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40146e:	4b12      	ldr	r3, [pc, #72]	; (4014b8 <hsmci_wait_end_of_write_blocks+0x4c>)
  401470:	881b      	ldrh	r3, [r3, #0]
  401472:	4a12      	ldr	r2, [pc, #72]	; (4014bc <hsmci_wait_end_of_write_blocks+0x50>)
  401474:	8812      	ldrh	r2, [r2, #0]
  401476:	fb02 f203 	mul.w	r2, r2, r3
  40147a:	4b11      	ldr	r3, [pc, #68]	; (4014c0 <hsmci_wait_end_of_write_blocks+0x54>)
  40147c:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  40147e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401482:	4910      	ldr	r1, [pc, #64]	; (4014c4 <hsmci_wait_end_of_write_blocks+0x58>)
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401484:	4e10      	ldr	r6, [pc, #64]	; (4014c8 <hsmci_wait_end_of_write_blocks+0x5c>)
  401486:	e009      	b.n	40149c <hsmci_wait_end_of_write_blocks+0x30>
			hsmci_reset();
  401488:	4b10      	ldr	r3, [pc, #64]	; (4014cc <hsmci_wait_end_of_write_blocks+0x60>)
  40148a:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  40148c:	2201      	movs	r2, #1
  40148e:	4b0e      	ldr	r3, [pc, #56]	; (4014c8 <hsmci_wait_end_of_write_blocks+0x5c>)
  401490:	621a      	str	r2, [r3, #32]
			return false;
  401492:	2000      	movs	r0, #0
  401494:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401496:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  40149a:	d10a      	bne.n	4014b2 <hsmci_wait_end_of_write_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  40149c:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40149e:	420b      	tst	r3, r1
  4014a0:	d1f2      	bne.n	401488 <hsmci_wait_end_of_write_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4014a2:	42a2      	cmp	r2, r4
  4014a4:	d9f7      	bls.n	401496 <hsmci_wait_end_of_write_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4014a6:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  4014a8:	f015 0f01 	tst.w	r5, #1
  4014ac:	d0f3      	beq.n	401496 <hsmci_wait_end_of_write_blocks+0x2a>
				return true;
  4014ae:	2001      	movs	r0, #1

	return true;
}
  4014b0:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  4014b2:	2001      	movs	r0, #1
  4014b4:	bd70      	pop	{r4, r5, r6, pc}
  4014b6:	bf00      	nop
  4014b8:	20400ac6 	.word	0x20400ac6
  4014bc:	20400ac8 	.word	0x20400ac8
  4014c0:	20400acc 	.word	0x20400acc
  4014c4:	c0600000 	.word	0xc0600000
  4014c8:	40078000 	.word	0x40078000
  4014cc:	00400fb9 	.word	0x00400fb9

004014d0 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  4014d0:	b510      	push	{r4, lr}
  4014d2:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  4014d4:	4b0f      	ldr	r3, [pc, #60]	; (401514 <sd_mmc_test_unit_ready+0x44>)
  4014d6:	4798      	blx	r3
  4014d8:	2801      	cmp	r0, #1
  4014da:	d018      	beq.n	40150e <sd_mmc_test_unit_ready+0x3e>
  4014dc:	b118      	cbz	r0, 4014e6 <sd_mmc_test_unit_ready+0x16>
  4014de:	2802      	cmp	r0, #2
  4014e0:	d010      	beq.n	401504 <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  4014e2:	2001      	movs	r0, #1
  4014e4:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  4014e6:	4b0c      	ldr	r3, [pc, #48]	; (401518 <sd_mmc_test_unit_ready+0x48>)
  4014e8:	5d1b      	ldrb	r3, [r3, r4]
  4014ea:	b10b      	cbz	r3, 4014f0 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  4014ec:	2002      	movs	r0, #2
	}
}
  4014ee:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  4014f0:	4620      	mov	r0, r4
  4014f2:	4b0a      	ldr	r3, [pc, #40]	; (40151c <sd_mmc_test_unit_ready+0x4c>)
  4014f4:	4798      	blx	r3
  4014f6:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  4014fa:	2800      	cmp	r0, #0
  4014fc:	bf14      	ite	ne
  4014fe:	2000      	movne	r0, #0
  401500:	2002      	moveq	r0, #2
  401502:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  401504:	2200      	movs	r2, #0
  401506:	4b04      	ldr	r3, [pc, #16]	; (401518 <sd_mmc_test_unit_ready+0x48>)
  401508:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  40150a:	2002      	movs	r0, #2
  40150c:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  40150e:	2003      	movs	r0, #3
  401510:	bd10      	pop	{r4, pc}
  401512:	bf00      	nop
  401514:	0040029d 	.word	0x0040029d
  401518:	20400ad0 	.word	0x20400ad0
  40151c:	00400a0d 	.word	0x00400a0d

00401520 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  401520:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  401522:	2000      	movs	r0, #0
  401524:	4b01      	ldr	r3, [pc, #4]	; (40152c <sd_mmc_test_unit_ready_0+0xc>)
  401526:	4798      	blx	r3
}
  401528:	bd08      	pop	{r3, pc}
  40152a:	bf00      	nop
  40152c:	004014d1 	.word	0x004014d1

00401530 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  401530:	b538      	push	{r3, r4, r5, lr}
  401532:	4604      	mov	r4, r0
  401534:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  401536:	4b04      	ldr	r3, [pc, #16]	; (401548 <sd_mmc_read_capacity+0x18>)
  401538:	4798      	blx	r3
  40153a:	0040      	lsls	r0, r0, #1
  40153c:	3801      	subs	r0, #1
  40153e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  401540:	4620      	mov	r0, r4
  401542:	4b02      	ldr	r3, [pc, #8]	; (40154c <sd_mmc_read_capacity+0x1c>)
  401544:	4798      	blx	r3
}
  401546:	bd38      	pop	{r3, r4, r5, pc}
  401548:	00400a31 	.word	0x00400a31
  40154c:	004014d1 	.word	0x004014d1

00401550 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  401550:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  401552:	4601      	mov	r1, r0
  401554:	2000      	movs	r0, #0
  401556:	4b01      	ldr	r3, [pc, #4]	; (40155c <sd_mmc_read_capacity_0+0xc>)
  401558:	4798      	blx	r3
}
  40155a:	bd08      	pop	{r3, pc}
  40155c:	00401531 	.word	0x00401531

00401560 <sd_mmc_unload_0>:
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
	sd_mmc_ejected[slot] = unload;
  401560:	4b01      	ldr	r3, [pc, #4]	; (401568 <sd_mmc_unload_0+0x8>)
  401562:	7018      	strb	r0, [r3, #0]
}

bool sd_mmc_unload_0(bool unload)
{
	return sd_mmc_unload(0, unload);
}
  401564:	2001      	movs	r0, #1
  401566:	4770      	bx	lr
  401568:	20400ad0 	.word	0x20400ad0

0040156c <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  40156c:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  40156e:	2000      	movs	r0, #0
  401570:	4b01      	ldr	r3, [pc, #4]	; (401578 <sd_mmc_wr_protect_0+0xc>)
  401572:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  401574:	bd08      	pop	{r3, pc}
  401576:	bf00      	nop
  401578:	00400a55 	.word	0x00400a55

0040157c <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
  40157c:	2001      	movs	r0, #1
  40157e:	4770      	bx	lr

00401580 <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];
//.....................CIT...READ10...............
Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
  401580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401584:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
  401586:	4b2c      	ldr	r3, [pc, #176]	; (401638 <sd_mmc_usb_read_10+0xb8>)
  401588:	4798      	blx	r3
  40158a:	b128      	cbz	r0, 401598 <sd_mmc_usb_read_10+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  40158c:	2802      	cmp	r0, #2
  40158e:	bf0c      	ite	eq
  401590:	2002      	moveq	r0, #2
  401592:	2001      	movne	r0, #1
  401594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
  401598:	1c63      	adds	r3, r4, #1
  40159a:	b29b      	uxth	r3, r3
	bool b_first_step = true;
  40159c:	2501      	movs	r5, #1
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
			
			decrypt_read_data(((nb_step % 2) == 0) ? sector_buf_1 : sector_buf_0, SD_MMC_BLOCK_SIZE);
  40159e:	4e27      	ldr	r6, [pc, #156]	; (40163c <sd_mmc_usb_read_10+0xbc>)
  4015a0:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 40164c <sd_mmc_usb_read_10+0xcc>
			
			// RAM -> USB
			if (!udi_msc_trans_block(true,
  4015a4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 401650 <sd_mmc_usb_read_10+0xd0>
	while (nb_step--) {
  4015a8:	e006      	b.n	4015b8 <sd_mmc_usb_read_10+0x38>
			}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  4015aa:	2000      	movs	r0, #0
  4015ac:	4b24      	ldr	r3, [pc, #144]	; (401640 <sd_mmc_usb_read_10+0xc0>)
  4015ae:	4798      	blx	r3
  4015b0:	2800      	cmp	r0, #0
  4015b2:	d12e      	bne.n	401612 <sd_mmc_usb_read_10+0x92>
  4015b4:	2500      	movs	r5, #0
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
  4015b6:	4623      	mov	r3, r4
	while (nb_step--) {
  4015b8:	1e5c      	subs	r4, r3, #1
  4015ba:	b2a4      	uxth	r4, r4
  4015bc:	b31b      	cbz	r3, 401606 <sd_mmc_usb_read_10+0x86>
		if (nb_step) { // Skip last step
  4015be:	b35c      	cbz	r4, 401618 <sd_mmc_usb_read_10+0x98>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
  4015c0:	f004 0701 	and.w	r7, r4, #1
  4015c4:	2101      	movs	r1, #1
  4015c6:	481f      	ldr	r0, [pc, #124]	; (401644 <sd_mmc_usb_read_10+0xc4>)
  4015c8:	2f00      	cmp	r7, #0
  4015ca:	bf18      	it	ne
  4015cc:	4630      	movne	r0, r6
  4015ce:	4b1e      	ldr	r3, [pc, #120]	; (401648 <sd_mmc_usb_read_10+0xc8>)
  4015d0:	4798      	blx	r3
  4015d2:	b9d8      	cbnz	r0, 40160c <sd_mmc_usb_read_10+0x8c>
		if (!b_first_step) { // Skip first step
  4015d4:	2d00      	cmp	r5, #0
  4015d6:	d1e8      	bne.n	4015aa <sd_mmc_usb_read_10+0x2a>
			decrypt_read_data(((nb_step % 2) == 0) ? sector_buf_1 : sector_buf_0, SD_MMC_BLOCK_SIZE);
  4015d8:	4b1a      	ldr	r3, [pc, #104]	; (401644 <sd_mmc_usb_read_10+0xc4>)
  4015da:	2f00      	cmp	r7, #0
  4015dc:	bf0c      	ite	eq
  4015de:	4637      	moveq	r7, r6
  4015e0:	461f      	movne	r7, r3
  4015e2:	f44f 7100 	mov.w	r1, #512	; 0x200
  4015e6:	4638      	mov	r0, r7
  4015e8:	47c8      	blx	r9
			if (!udi_msc_trans_block(true,
  4015ea:	2300      	movs	r3, #0
  4015ec:	f44f 7200 	mov.w	r2, #512	; 0x200
  4015f0:	4639      	mov	r1, r7
  4015f2:	2001      	movs	r0, #1
  4015f4:	47c0      	blx	r8
  4015f6:	2800      	cmp	r0, #0
  4015f8:	d1d7      	bne.n	4015aa <sd_mmc_usb_read_10+0x2a>
					sd_mmc_wait_end_of_read_blocks(true);
  4015fa:	2001      	movs	r0, #1
  4015fc:	4b10      	ldr	r3, [pc, #64]	; (401640 <sd_mmc_usb_read_10+0xc0>)
  4015fe:	4798      	blx	r3
				return CTRL_FAIL;
  401600:	2001      	movs	r0, #1
  401602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return CTRL_FAIL;
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
  401606:	2000      	movs	r0, #0
  401608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return CTRL_FAIL;
  40160c:	2001      	movs	r0, #1
  40160e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return CTRL_FAIL;
  401612:	2001      	movs	r0, #1
  401614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!b_first_step) { // Skip first step
  401618:	2d00      	cmp	r5, #0
  40161a:	d1cb      	bne.n	4015b4 <sd_mmc_usb_read_10+0x34>
			decrypt_read_data(((nb_step % 2) == 0) ? sector_buf_1 : sector_buf_0, SD_MMC_BLOCK_SIZE);
  40161c:	f44f 7100 	mov.w	r1, #512	; 0x200
  401620:	4630      	mov	r0, r6
  401622:	47c8      	blx	r9
			if (!udi_msc_trans_block(true,
  401624:	2300      	movs	r3, #0
  401626:	f44f 7200 	mov.w	r2, #512	; 0x200
  40162a:	4631      	mov	r1, r6
  40162c:	2001      	movs	r0, #1
  40162e:	47c0      	blx	r8
  401630:	2800      	cmp	r0, #0
  401632:	d1bf      	bne.n	4015b4 <sd_mmc_usb_read_10+0x34>
  401634:	e7e1      	b.n	4015fa <sd_mmc_usb_read_10+0x7a>
  401636:	bf00      	nop
  401638:	00400a59 	.word	0x00400a59
  40163c:	20400c60 	.word	0x20400c60
  401640:	00400b81 	.word	0x00400b81
  401644:	20400e60 	.word	0x20400e60
  401648:	00400b59 	.word	0x00400b59
  40164c:	00404aa1 	.word	0x00404aa1
  401650:	00402369 	.word	0x00402369

00401654 <sd_mmc_usb_read_10_0>:
}

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
  401654:	b508      	push	{r3, lr}
	return sd_mmc_usb_read_10(0, addr, nb_sector);
  401656:	460a      	mov	r2, r1
  401658:	4601      	mov	r1, r0
  40165a:	2000      	movs	r0, #0
  40165c:	4b01      	ldr	r3, [pc, #4]	; (401664 <sd_mmc_usb_read_10_0+0x10>)
  40165e:	4798      	blx	r3
}
  401660:	bd08      	pop	{r3, pc}
  401662:	bf00      	nop
  401664:	00401581 	.word	0x00401581

00401668 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}
//........................CIT..WRITE10...................
Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
  401668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40166c:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
  40166e:	4b29      	ldr	r3, [pc, #164]	; (401714 <sd_mmc_usb_write_10+0xac>)
  401670:	4798      	blx	r3
  401672:	b178      	cbz	r0, 401694 <sd_mmc_usb_write_10+0x2c>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  401674:	2802      	cmp	r0, #2
  401676:	bf0c      	ite	eq
  401678:	2002      	moveq	r0, #2
  40167a:	2001      	movne	r0, #1
  40167c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (!udi_msc_trans_block(false,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				if (!b_first_step) {
  401680:	b115      	cbz	r5, 401688 <sd_mmc_usb_write_10+0x20>
					sd_mmc_wait_end_of_write_blocks(true);
				}
				return CTRL_FAIL;
  401682:	2001      	movs	r0, #1
  401684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					sd_mmc_wait_end_of_write_blocks(true);
  401688:	2001      	movs	r0, #1
  40168a:	4b23      	ldr	r3, [pc, #140]	; (401718 <sd_mmc_usb_write_10+0xb0>)
  40168c:	4798      	blx	r3
				return CTRL_FAIL;
  40168e:	2001      	movs	r0, #1
  401690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool b_first_step = true;
  401694:	2501      	movs	r5, #1
			}
		}
		if (!b_first_step) { // Skip first step
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  401696:	f8df 9080 	ldr.w	r9, [pc, #128]	; 401718 <sd_mmc_usb_write_10+0xb0>
			if (!udi_msc_trans_block(false,
  40169a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 40172c <sd_mmc_usb_write_10+0xc4>
  40169e:	4f1f      	ldr	r7, [pc, #124]	; (40171c <sd_mmc_usb_write_10+0xb4>)
  4016a0:	e009      	b.n	4016b6 <sd_mmc_usb_write_10+0x4e>
			}
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
  4016a2:	2000      	movs	r0, #0
  4016a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return CTRL_FAIL;
  4016a8:	2001      	movs	r0, #1
  4016aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (nb_step) { // Skip last step
  4016ae:	b9d4      	cbnz	r4, 4016e6 <sd_mmc_usb_write_10+0x7e>
  4016b0:	3c01      	subs	r4, #1
  4016b2:	b2a4      	uxth	r4, r4
  4016b4:	2500      	movs	r5, #0
	while (nb_step--) {
  4016b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4016ba:	429c      	cmp	r4, r3
  4016bc:	d0f1      	beq.n	4016a2 <sd_mmc_usb_write_10+0x3a>
		if (!b_first_step) { // Skip first step
  4016be:	2d00      	cmp	r5, #0
  4016c0:	d1f5      	bne.n	4016ae <sd_mmc_usb_write_10+0x46>
			encrypt_write_data(((nb_step % 2) == 0) ? sector_buf_0 : sector_buf_1, SD_MMC_BLOCK_SIZE);
  4016c2:	f004 0601 	and.w	r6, r4, #1
  4016c6:	2e00      	cmp	r6, #0
  4016c8:	bf0c      	ite	eq
  4016ca:	463e      	moveq	r6, r7
  4016cc:	4646      	movne	r6, r8
  4016ce:	f44f 7100 	mov.w	r1, #512	; 0x200
  4016d2:	4630      	mov	r0, r6
  4016d4:	4b12      	ldr	r3, [pc, #72]	; (401720 <sd_mmc_usb_write_10+0xb8>)
  4016d6:	4798      	blx	r3
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
  4016d8:	2101      	movs	r1, #1
  4016da:	4630      	mov	r0, r6
  4016dc:	4b11      	ldr	r3, [pc, #68]	; (401724 <sd_mmc_usb_write_10+0xbc>)
  4016de:	4798      	blx	r3
  4016e0:	2800      	cmp	r0, #0
  4016e2:	d1e1      	bne.n	4016a8 <sd_mmc_usb_write_10+0x40>
		if (nb_step) { // Skip last step
  4016e4:	b17c      	cbz	r4, 401706 <sd_mmc_usb_write_10+0x9e>
			if (!udi_msc_trans_block(false,
  4016e6:	f004 0101 	and.w	r1, r4, #1
  4016ea:	2300      	movs	r3, #0
  4016ec:	f44f 7200 	mov.w	r2, #512	; 0x200
  4016f0:	4299      	cmp	r1, r3
  4016f2:	bf0c      	ite	eq
  4016f4:	4641      	moveq	r1, r8
  4016f6:	4639      	movne	r1, r7
  4016f8:	4618      	mov	r0, r3
  4016fa:	4e0b      	ldr	r6, [pc, #44]	; (401728 <sd_mmc_usb_write_10+0xc0>)
  4016fc:	47b0      	blx	r6
  4016fe:	2800      	cmp	r0, #0
  401700:	d0be      	beq.n	401680 <sd_mmc_usb_write_10+0x18>
		if (!b_first_step) { // Skip first step
  401702:	2d00      	cmp	r5, #0
  401704:	d1d4      	bne.n	4016b0 <sd_mmc_usb_write_10+0x48>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  401706:	2000      	movs	r0, #0
  401708:	47c8      	blx	r9
  40170a:	2800      	cmp	r0, #0
  40170c:	d0d0      	beq.n	4016b0 <sd_mmc_usb_write_10+0x48>
				return CTRL_FAIL;
  40170e:	2001      	movs	r0, #1
  401710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401714:	00400be9 	.word	0x00400be9
  401718:	00400cb9 	.word	0x00400cb9
  40171c:	20400e60 	.word	0x20400e60
  401720:	00404a01 	.word	0x00404a01
  401724:	00400c91 	.word	0x00400c91
  401728:	00402369 	.word	0x00402369
  40172c:	20400c60 	.word	0x20400c60

00401730 <sd_mmc_usb_write_10_0>:
}

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
  401730:	b508      	push	{r3, lr}
	return sd_mmc_usb_write_10(0, addr, nb_sector);
  401732:	460a      	mov	r2, r1
  401734:	4601      	mov	r1, r0
  401736:	2000      	movs	r0, #0
  401738:	4b01      	ldr	r3, [pc, #4]	; (401740 <sd_mmc_usb_write_10_0+0x10>)
  40173a:	4798      	blx	r3
}
  40173c:	bd08      	pop	{r3, pc}
  40173e:	bf00      	nop
  401740:	00401669 	.word	0x00401669

00401744 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401744:	6943      	ldr	r3, [r0, #20]
  401746:	f013 0f02 	tst.w	r3, #2
  40174a:	d002      	beq.n	401752 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40174c:	61c1      	str	r1, [r0, #28]
	return 0;
  40174e:	2000      	movs	r0, #0
  401750:	4770      	bx	lr
		return 1;
  401752:	2001      	movs	r0, #1
}
  401754:	4770      	bx	lr

00401756 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401756:	6943      	ldr	r3, [r0, #20]
  401758:	f013 0f01 	tst.w	r3, #1
  40175c:	d003      	beq.n	401766 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40175e:	6983      	ldr	r3, [r0, #24]
  401760:	700b      	strb	r3, [r1, #0]
	return 0;
  401762:	2000      	movs	r0, #0
  401764:	4770      	bx	lr
		return 1;
  401766:	2001      	movs	r0, #1
}
  401768:	4770      	bx	lr

0040176a <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40176a:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40176c:	010b      	lsls	r3, r1, #4
  40176e:	4293      	cmp	r3, r2
  401770:	d914      	bls.n	40179c <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401772:	00c9      	lsls	r1, r1, #3
  401774:	084b      	lsrs	r3, r1, #1
  401776:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40177a:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  40177e:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401780:	1e5c      	subs	r4, r3, #1
  401782:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401786:	428c      	cmp	r4, r1
  401788:	d901      	bls.n	40178e <usart_set_async_baudrate+0x24>
		return 1;
  40178a:	2001      	movs	r0, #1
  40178c:	e017      	b.n	4017be <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  40178e:	6841      	ldr	r1, [r0, #4]
  401790:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401794:	6041      	str	r1, [r0, #4]
  401796:	e00c      	b.n	4017b2 <usart_set_async_baudrate+0x48>
		return 1;
  401798:	2001      	movs	r0, #1
  40179a:	e010      	b.n	4017be <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40179c:	0859      	lsrs	r1, r3, #1
  40179e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4017a2:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4017a6:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4017a8:	1e5c      	subs	r4, r3, #1
  4017aa:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4017ae:	428c      	cmp	r4, r1
  4017b0:	d8f2      	bhi.n	401798 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4017b2:	0412      	lsls	r2, r2, #16
  4017b4:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4017b8:	431a      	orrs	r2, r3
  4017ba:	6202      	str	r2, [r0, #32]

	return 0;
  4017bc:	2000      	movs	r0, #0
}
  4017be:	f85d 4b04 	ldr.w	r4, [sp], #4
  4017c2:	4770      	bx	lr

004017c4 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4017c4:	4b08      	ldr	r3, [pc, #32]	; (4017e8 <usart_reset+0x24>)
  4017c6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4017ca:	2300      	movs	r3, #0
  4017cc:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4017ce:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4017d0:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4017d2:	2388      	movs	r3, #136	; 0x88
  4017d4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4017d6:	2324      	movs	r3, #36	; 0x24
  4017d8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4017da:	f44f 7380 	mov.w	r3, #256	; 0x100
  4017de:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4017e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4017e4:	6003      	str	r3, [r0, #0]
  4017e6:	4770      	bx	lr
  4017e8:	55534100 	.word	0x55534100

004017ec <usart_init_rs232>:
{
  4017ec:	b570      	push	{r4, r5, r6, lr}
  4017ee:	4605      	mov	r5, r0
  4017f0:	460c      	mov	r4, r1
  4017f2:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4017f4:	4b0f      	ldr	r3, [pc, #60]	; (401834 <usart_init_rs232+0x48>)
  4017f6:	4798      	blx	r3
	ul_reg_val = 0;
  4017f8:	2200      	movs	r2, #0
  4017fa:	4b0f      	ldr	r3, [pc, #60]	; (401838 <usart_init_rs232+0x4c>)
  4017fc:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4017fe:	b1a4      	cbz	r4, 40182a <usart_init_rs232+0x3e>
  401800:	4632      	mov	r2, r6
  401802:	6821      	ldr	r1, [r4, #0]
  401804:	4628      	mov	r0, r5
  401806:	4b0d      	ldr	r3, [pc, #52]	; (40183c <usart_init_rs232+0x50>)
  401808:	4798      	blx	r3
  40180a:	4602      	mov	r2, r0
  40180c:	b978      	cbnz	r0, 40182e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40180e:	6863      	ldr	r3, [r4, #4]
  401810:	68a1      	ldr	r1, [r4, #8]
  401812:	430b      	orrs	r3, r1
  401814:	6921      	ldr	r1, [r4, #16]
  401816:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401818:	68e1      	ldr	r1, [r4, #12]
  40181a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40181c:	4906      	ldr	r1, [pc, #24]	; (401838 <usart_init_rs232+0x4c>)
  40181e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401820:	6869      	ldr	r1, [r5, #4]
  401822:	430b      	orrs	r3, r1
  401824:	606b      	str	r3, [r5, #4]
}
  401826:	4610      	mov	r0, r2
  401828:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40182a:	2201      	movs	r2, #1
  40182c:	e7fb      	b.n	401826 <usart_init_rs232+0x3a>
  40182e:	2201      	movs	r2, #1
  401830:	e7f9      	b.n	401826 <usart_init_rs232+0x3a>
  401832:	bf00      	nop
  401834:	004017c5 	.word	0x004017c5
  401838:	20400ad4 	.word	0x20400ad4
  40183c:	0040176b 	.word	0x0040176b

00401840 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401840:	2340      	movs	r3, #64	; 0x40
  401842:	6003      	str	r3, [r0, #0]
  401844:	4770      	bx	lr

00401846 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401846:	2310      	movs	r3, #16
  401848:	6003      	str	r3, [r0, #0]
  40184a:	4770      	bx	lr

0040184c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40184c:	6943      	ldr	r3, [r0, #20]
  40184e:	f013 0f02 	tst.w	r3, #2
  401852:	d004      	beq.n	40185e <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401854:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401858:	61c1      	str	r1, [r0, #28]
	return 0;
  40185a:	2000      	movs	r0, #0
  40185c:	4770      	bx	lr
		return 1;
  40185e:	2001      	movs	r0, #1
}
  401860:	4770      	bx	lr

00401862 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401862:	6943      	ldr	r3, [r0, #20]
  401864:	f013 0f01 	tst.w	r3, #1
  401868:	d005      	beq.n	401876 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40186a:	6983      	ldr	r3, [r0, #24]
  40186c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401870:	600b      	str	r3, [r1, #0]
	return 0;
  401872:	2000      	movs	r0, #0
  401874:	4770      	bx	lr
		return 1;
  401876:	2001      	movs	r0, #1
}
  401878:	4770      	bx	lr

0040187a <xdmac_configure_transfer>:
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  40187a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40187e:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  401880:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401882:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  401884:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  401886:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  401888:	6813      	ldr	r3, [r2, #0]
  40188a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40188e:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  401890:	6913      	ldr	r3, [r2, #16]
  401892:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401896:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  401898:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  40189a:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  40189c:	6993      	ldr	r3, [r2, #24]
  40189e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4018a2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  4018a6:	69d3      	ldr	r3, [r2, #28]
  4018a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4018ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  4018b0:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  4018b2:	678b      	str	r3, [r1, #120]	; 0x78
  4018b4:	4770      	bx	lr
	...

004018b8 <ui_initalization>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4018b8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4018bc:	4b01      	ldr	r3, [pc, #4]	; (4018c4 <ui_initalization+0xc>)
  4018be:	635a      	str	r2, [r3, #52]	; 0x34
  4018c0:	4770      	bx	lr
  4018c2:	bf00      	nop
  4018c4:	400e1200 	.word	0x400e1200

004018c8 <ui_powerdown>:
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4018c8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4018cc:	4b01      	ldr	r3, [pc, #4]	; (4018d4 <ui_powerdown+0xc>)
  4018ce:	631a      	str	r2, [r3, #48]	; 0x30
  4018d0:	4770      	bx	lr
  4018d2:	bf00      	nop
  4018d4:	400e1200 	.word	0x400e1200

004018d8 <ui_wakeup>:
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4018d8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4018dc:	4b01      	ldr	r3, [pc, #4]	; (4018e4 <ui_wakeup+0xc>)
  4018de:	635a      	str	r2, [r3, #52]	; 0x34
  4018e0:	4770      	bx	lr
  4018e2:	bf00      	nop
  4018e4:	400e1200 	.word	0x400e1200

004018e8 <ui_start_read>:
{
	LED_On(LED0);
}

void ui_start_read(void)
{
  4018e8:	4770      	bx	lr

004018ea <ui_stop_read>:

}

void ui_stop_read(void)
{
  4018ea:	4770      	bx	lr

004018ec <ui_start_write>:

}

void ui_start_write(void)
{
  4018ec:	4770      	bx	lr

004018ee <ui_stop_write>:

}

void ui_stop_write(void)
{
  4018ee:	4770      	bx	lr

004018f0 <ui_process>:

}

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
  4018f0:	b920      	cbnz	r0, 4018fc <ui_process+0xc>
  4018f2:	f44f 7280 	mov.w	r2, #256	; 0x100
  4018f6:	4b05      	ldr	r3, [pc, #20]	; (40190c <ui_process+0x1c>)
  4018f8:	635a      	str	r2, [r3, #52]	; 0x34
  4018fa:	4770      	bx	lr
		LED_On(LED0);
	}
	if (1000 == framenumber) {
  4018fc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  401900:	d103      	bne.n	40190a <ui_process+0x1a>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401902:	f44f 7280 	mov.w	r2, #256	; 0x100
  401906:	4b01      	ldr	r3, [pc, #4]	; (40190c <ui_process+0x1c>)
  401908:	631a      	str	r2, [r3, #48]	; 0x30
  40190a:	4770      	bx	lr
  40190c:	400e1200 	.word	0x400e1200

00401910 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  401910:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
  401912:	4b04      	ldr	r3, [pc, #16]	; (401924 <sysclk_enable_usb+0x14>)
  401914:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
  401916:	2000      	movs	r0, #0
  401918:	4b03      	ldr	r3, [pc, #12]	; (401928 <sysclk_enable_usb+0x18>)
  40191a:	4798      	blx	r3
		pmc_enable_udpck();
  40191c:	4b03      	ldr	r3, [pc, #12]	; (40192c <sysclk_enable_usb+0x1c>)
  40191e:	4798      	blx	r3
  401920:	bd08      	pop	{r3, pc}
  401922:	bf00      	nop
  401924:	00402f7d 	.word	0x00402f7d
  401928:	0040303d 	.word	0x0040303d
  40192c:	00403051 	.word	0x00403051

00401930 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401930:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401932:	4810      	ldr	r0, [pc, #64]	; (401974 <sysclk_init+0x44>)
  401934:	4b10      	ldr	r3, [pc, #64]	; (401978 <sysclk_init+0x48>)
  401936:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401938:	213e      	movs	r1, #62	; 0x3e
  40193a:	2000      	movs	r0, #0
  40193c:	4b0f      	ldr	r3, [pc, #60]	; (40197c <sysclk_init+0x4c>)
  40193e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401940:	4c0f      	ldr	r4, [pc, #60]	; (401980 <sysclk_init+0x50>)
  401942:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401944:	2800      	cmp	r0, #0
  401946:	d0fc      	beq.n	401942 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401948:	4b0e      	ldr	r3, [pc, #56]	; (401984 <sysclk_init+0x54>)
  40194a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40194c:	4a0e      	ldr	r2, [pc, #56]	; (401988 <sysclk_init+0x58>)
  40194e:	4b0f      	ldr	r3, [pc, #60]	; (40198c <sysclk_init+0x5c>)
  401950:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401952:	4c0f      	ldr	r4, [pc, #60]	; (401990 <sysclk_init+0x60>)
  401954:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401956:	2800      	cmp	r0, #0
  401958:	d0fc      	beq.n	401954 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40195a:	2002      	movs	r0, #2
  40195c:	4b0d      	ldr	r3, [pc, #52]	; (401994 <sysclk_init+0x64>)
  40195e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401960:	2000      	movs	r0, #0
  401962:	4b0d      	ldr	r3, [pc, #52]	; (401998 <sysclk_init+0x68>)
  401964:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401966:	4b0d      	ldr	r3, [pc, #52]	; (40199c <sysclk_init+0x6c>)
  401968:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40196a:	4802      	ldr	r0, [pc, #8]	; (401974 <sysclk_init+0x44>)
  40196c:	4b02      	ldr	r3, [pc, #8]	; (401978 <sysclk_init+0x48>)
  40196e:	4798      	blx	r3
  401970:	bd10      	pop	{r4, pc}
  401972:	bf00      	nop
  401974:	11e1a300 	.word	0x11e1a300
  401978:	004048c9 	.word	0x004048c9
  40197c:	00402ef9 	.word	0x00402ef9
  401980:	00402f4d 	.word	0x00402f4d
  401984:	00402f5d 	.word	0x00402f5d
  401988:	20183f01 	.word	0x20183f01
  40198c:	400e0600 	.word	0x400e0600
  401990:	00402f6d 	.word	0x00402f6d
  401994:	00402e5d 	.word	0x00402e5d
  401998:	00402e95 	.word	0x00402e95
  40199c:	004047bd 	.word	0x004047bd

004019a0 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
  4019a0:	2001      	movs	r0, #1
  4019a2:	4770      	bx	lr

004019a4 <mem_test_unit_ready>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  4019a4:	b108      	cbz	r0, 4019aa <mem_test_unit_ready+0x6>
  4019a6:	2001      	movs	r0, #1
  4019a8:	4770      	bx	lr
{
  4019aa:	b508      	push	{r3, lr}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  4019ac:	4b01      	ldr	r3, [pc, #4]	; (4019b4 <mem_test_unit_ready+0x10>)
  4019ae:	4798      	blx	r3
  4019b0:	bd08      	pop	{r3, pc}
  4019b2:	bf00      	nop
  4019b4:	00401521 	.word	0x00401521

004019b8 <mem_read_capacity>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  4019b8:	b108      	cbz	r0, 4019be <mem_read_capacity+0x6>
  4019ba:	2001      	movs	r0, #1
  4019bc:	4770      	bx	lr
{
  4019be:	b508      	push	{r3, lr}
  4019c0:	4608      	mov	r0, r1
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  4019c2:	4b01      	ldr	r3, [pc, #4]	; (4019c8 <mem_read_capacity+0x10>)
  4019c4:	4798      	blx	r3
  4019c6:	bd08      	pop	{r3, pc}
  4019c8:	00401551 	.word	0x00401551

004019cc <mem_unload>:

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
  4019cc:	b920      	cbnz	r0, 4019d8 <mem_unload+0xc>
{
  4019ce:	b508      	push	{r3, lr}
  4019d0:	4608      	mov	r0, r1
                  lun_desc[lun].unload(unload) : !unload) :
  4019d2:	4b02      	ldr	r3, [pc, #8]	; (4019dc <mem_unload+0x10>)
  4019d4:	4798      	blx	r3
  4019d6:	bd08      	pop	{r3, pc}
  4019d8:	2000      	movs	r0, #0
  4019da:	4770      	bx	lr
  4019dc:	00401561 	.word	0x00401561

004019e0 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4019e0:	b108      	cbz	r0, 4019e6 <mem_wr_protect+0x6>
  4019e2:	2001      	movs	r0, #1
  4019e4:	4770      	bx	lr
{
  4019e6:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4019e8:	4b01      	ldr	r3, [pc, #4]	; (4019f0 <mem_wr_protect+0x10>)
  4019ea:	4798      	blx	r3
  4019ec:	bd08      	pop	{r3, pc}
  4019ee:	bf00      	nop
  4019f0:	0040156d 	.word	0x0040156d

004019f4 <mem_removal>:

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
  4019f4:	b108      	cbz	r0, 4019fa <mem_removal+0x6>
  4019f6:	2001      	movs	r0, #1
  4019f8:	4770      	bx	lr
{
  4019fa:	b508      	push	{r3, lr}
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
  4019fc:	4b01      	ldr	r3, [pc, #4]	; (401a04 <mem_removal+0x10>)
  4019fe:	4798      	blx	r3
  401a00:	bd08      	pop	{r3, pc}
  401a02:	bf00      	nop
  401a04:	0040157d 	.word	0x0040157d

00401a08 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
  401a08:	2800      	cmp	r0, #0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
  401a0a:	4802      	ldr	r0, [pc, #8]	; (401a14 <mem_name+0xc>)
  401a0c:	bf18      	it	ne
  401a0e:	2000      	movne	r0, #0
  401a10:	4770      	bx	lr
  401a12:	bf00      	nop
  401a14:	004081d4 	.word	0x004081d4

00401a18 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
  401a18:	b570      	push	{r4, r5, r6, lr}
  401a1a:	4604      	mov	r4, r0
  401a1c:	460d      	mov	r5, r1
  401a1e:	4616      	mov	r6, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  401a20:	4b06      	ldr	r3, [pc, #24]	; (401a3c <memory_2_usb+0x24>)
  401a22:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
  401a24:	b124      	cbz	r4, 401a30 <memory_2_usb+0x18>
  401a26:	2401      	movs	r4, #1
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
  401a28:	4b05      	ldr	r3, [pc, #20]	; (401a40 <memory_2_usb+0x28>)
  401a2a:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
  401a2c:	4620      	mov	r0, r4
  401a2e:	bd70      	pop	{r4, r5, r6, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
  401a30:	4631      	mov	r1, r6
  401a32:	4628      	mov	r0, r5
  401a34:	4b03      	ldr	r3, [pc, #12]	; (401a44 <memory_2_usb+0x2c>)
  401a36:	4798      	blx	r3
  401a38:	4604      	mov	r4, r0
  401a3a:	e7f5      	b.n	401a28 <memory_2_usb+0x10>
  401a3c:	004018e9 	.word	0x004018e9
  401a40:	004018eb 	.word	0x004018eb
  401a44:	00401655 	.word	0x00401655

00401a48 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
  401a48:	b570      	push	{r4, r5, r6, lr}
  401a4a:	4604      	mov	r4, r0
  401a4c:	460d      	mov	r5, r1
  401a4e:	4616      	mov	r6, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  401a50:	4b06      	ldr	r3, [pc, #24]	; (401a6c <usb_2_memory+0x24>)
  401a52:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
  401a54:	b124      	cbz	r4, 401a60 <usb_2_memory+0x18>
  401a56:	2401      	movs	r4, #1
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
  401a58:	4b05      	ldr	r3, [pc, #20]	; (401a70 <usb_2_memory+0x28>)
  401a5a:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
  401a5c:	4620      	mov	r0, r4
  401a5e:	bd70      	pop	{r4, r5, r6, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
  401a60:	4631      	mov	r1, r6
  401a62:	4628      	mov	r0, r5
  401a64:	4b03      	ldr	r3, [pc, #12]	; (401a74 <usb_2_memory+0x2c>)
  401a66:	4798      	blx	r3
  401a68:	4604      	mov	r4, r0
  401a6a:	e7f5      	b.n	401a58 <usb_2_memory+0x10>
  401a6c:	004018ed 	.word	0x004018ed
  401a70:	004018ef 	.word	0x004018ef
  401a74:	00401731 	.word	0x00401731

00401a78 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
  401a78:	2000      	movs	r0, #0
  401a7a:	4770      	bx	lr

00401a7c <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
  401a7c:	3000      	adds	r0, #0
  401a7e:	bf18      	it	ne
  401a80:	2001      	movne	r0, #1
  401a82:	4b03      	ldr	r3, [pc, #12]	; (401a90 <udi_msc_trans_ack+0x14>)
  401a84:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
  401a86:	2201      	movs	r2, #1
  401a88:	4b02      	ldr	r3, [pc, #8]	; (401a94 <udi_msc_trans_ack+0x18>)
  401a8a:	701a      	strb	r2, [r3, #0]
  401a8c:	4770      	bx	lr
  401a8e:	bf00      	nop
  401a90:	20401066 	.word	0x20401066
  401a94:	20400014 	.word	0x20400014

00401a98 <udi_msc_cbw_wait>:
{
  401a98:	b510      	push	{r4, lr}
  401a9a:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
  401a9c:	4b07      	ldr	r3, [pc, #28]	; (401abc <udi_msc_cbw_wait+0x24>)
  401a9e:	9300      	str	r3, [sp, #0]
  401aa0:	231f      	movs	r3, #31
  401aa2:	4a07      	ldr	r2, [pc, #28]	; (401ac0 <udi_msc_cbw_wait+0x28>)
  401aa4:	2101      	movs	r1, #1
  401aa6:	2002      	movs	r0, #2
  401aa8:	4c06      	ldr	r4, [pc, #24]	; (401ac4 <udi_msc_cbw_wait+0x2c>)
  401aaa:	47a0      	blx	r4
  401aac:	b108      	cbz	r0, 401ab2 <udi_msc_cbw_wait+0x1a>
}
  401aae:	b002      	add	sp, #8
  401ab0:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
  401ab2:	4905      	ldr	r1, [pc, #20]	; (401ac8 <udi_msc_cbw_wait+0x30>)
  401ab4:	2002      	movs	r0, #2
  401ab6:	4b05      	ldr	r3, [pc, #20]	; (401acc <udi_msc_cbw_wait+0x34>)
  401ab8:	4798      	blx	r3
}
  401aba:	e7f8      	b.n	401aae <udi_msc_cbw_wait+0x16>
  401abc:	00401ea1 	.word	0x00401ea1
  401ac0:	20400afc 	.word	0x20400afc
  401ac4:	004042ed 	.word	0x004042ed
  401ac8:	00401a99 	.word	0x00401a99
  401acc:	00404679 	.word	0x00404679

00401ad0 <udi_msc_enable>:
{
  401ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udi_msc_b_trans_req = false;
  401ad4:	2300      	movs	r3, #0
  401ad6:	4a14      	ldr	r2, [pc, #80]	; (401b28 <udi_msc_enable+0x58>)
  401ad8:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
  401ada:	4a14      	ldr	r2, [pc, #80]	; (401b2c <udi_msc_enable+0x5c>)
  401adc:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
  401ade:	2301      	movs	r3, #1
  401ae0:	4a13      	ldr	r2, [pc, #76]	; (401b30 <udi_msc_enable+0x60>)
  401ae2:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
  401ae4:	4a13      	ldr	r2, [pc, #76]	; (401b34 <udi_msc_enable+0x64>)
  401ae6:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
  401ae8:	4b13      	ldr	r3, [pc, #76]	; (401b38 <udi_msc_enable+0x68>)
  401aea:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
  401aec:	b928      	cbnz	r0, 401afa <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
  401aee:	2500      	movs	r5, #0
  401af0:	4b12      	ldr	r3, [pc, #72]	; (401b3c <udi_msc_enable+0x6c>)
  401af2:	701d      	strb	r5, [r3, #0]
}
  401af4:	4628      	mov	r0, r5
  401af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	udi_msc_nb_lun--;
  401afa:	1e43      	subs	r3, r0, #1
  401afc:	4a0f      	ldr	r2, [pc, #60]	; (401b3c <udi_msc_enable+0x6c>)
  401afe:	7013      	strb	r3, [r2, #0]
	if (!UDI_MSC_ENABLE_EXT())
  401b00:	4b0f      	ldr	r3, [pc, #60]	; (401b40 <udi_msc_enable+0x70>)
  401b02:	4798      	blx	r3
  401b04:	4605      	mov	r5, r0
  401b06:	2800      	cmp	r0, #0
  401b08:	d0f4      	beq.n	401af4 <udi_msc_enable+0x24>
  401b0a:	2400      	movs	r4, #0
		mem_unload(lun, false);
  401b0c:	46a0      	mov	r8, r4
  401b0e:	4f0d      	ldr	r7, [pc, #52]	; (401b44 <udi_msc_enable+0x74>)
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
  401b10:	4e0a      	ldr	r6, [pc, #40]	; (401b3c <udi_msc_enable+0x6c>)
		mem_unload(lun, false);
  401b12:	4641      	mov	r1, r8
  401b14:	4620      	mov	r0, r4
  401b16:	47b8      	blx	r7
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
  401b18:	3401      	adds	r4, #1
  401b1a:	b2e4      	uxtb	r4, r4
  401b1c:	7833      	ldrb	r3, [r6, #0]
  401b1e:	42a3      	cmp	r3, r4
  401b20:	d2f7      	bcs.n	401b12 <udi_msc_enable+0x42>
	udi_msc_cbw_wait();
  401b22:	4b09      	ldr	r3, [pc, #36]	; (401b48 <udi_msc_enable+0x78>)
  401b24:	4798      	blx	r3
	return true;
  401b26:	e7e5      	b.n	401af4 <udi_msc_enable+0x24>
  401b28:	20400af2 	.word	0x20400af2
  401b2c:	20400af0 	.word	0x20400af0
  401b30:	20400014 	.word	0x20400014
  401b34:	20400015 	.word	0x20400015
  401b38:	004019a1 	.word	0x004019a1
  401b3c:	20400b20 	.word	0x20400b20
  401b40:	00404eb9 	.word	0x00404eb9
  401b44:	004019cd 	.word	0x004019cd
  401b48:	00401a99 	.word	0x00401a99

00401b4c <udi_msc_csw_sent>:
{
  401b4c:	b508      	push	{r3, lr}
	udi_msc_cbw_wait();
  401b4e:	4b01      	ldr	r3, [pc, #4]	; (401b54 <udi_msc_csw_sent+0x8>)
  401b50:	4798      	blx	r3
  401b52:	bd08      	pop	{r3, pc}
  401b54:	00401a99 	.word	0x00401a99

00401b58 <udi_msc_csw_send>:
{
  401b58:	b510      	push	{r4, lr}
  401b5a:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
  401b5c:	4b07      	ldr	r3, [pc, #28]	; (401b7c <udi_msc_csw_send+0x24>)
  401b5e:	9300      	str	r3, [sp, #0]
  401b60:	230d      	movs	r3, #13
  401b62:	4a07      	ldr	r2, [pc, #28]	; (401b80 <udi_msc_csw_send+0x28>)
  401b64:	2100      	movs	r1, #0
  401b66:	2081      	movs	r0, #129	; 0x81
  401b68:	4c06      	ldr	r4, [pc, #24]	; (401b84 <udi_msc_csw_send+0x2c>)
  401b6a:	47a0      	blx	r4
  401b6c:	b108      	cbz	r0, 401b72 <udi_msc_csw_send+0x1a>
}
  401b6e:	b002      	add	sp, #8
  401b70:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
  401b72:	4905      	ldr	r1, [pc, #20]	; (401b88 <udi_msc_csw_send+0x30>)
  401b74:	2081      	movs	r0, #129	; 0x81
  401b76:	4b05      	ldr	r3, [pc, #20]	; (401b8c <udi_msc_csw_send+0x34>)
  401b78:	4798      	blx	r3
}
  401b7a:	e7f8      	b.n	401b6e <udi_msc_csw_send+0x16>
  401b7c:	00401b4d 	.word	0x00401b4d
  401b80:	20400018 	.word	0x20400018
  401b84:	004042ed 	.word	0x004042ed
  401b88:	00401b59 	.word	0x00401b59
  401b8c:	00404679 	.word	0x00404679

00401b90 <udi_msc_cbw_invalid>:
{
  401b90:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
  401b92:	4b06      	ldr	r3, [pc, #24]	; (401bac <udi_msc_cbw_invalid+0x1c>)
  401b94:	781b      	ldrb	r3, [r3, #0]
  401b96:	b903      	cbnz	r3, 401b9a <udi_msc_cbw_invalid+0xa>
  401b98:	bd08      	pop	{r3, pc}
	udd_ep_set_halt(UDI_MSC_EP_OUT);
  401b9a:	2002      	movs	r0, #2
  401b9c:	4b04      	ldr	r3, [pc, #16]	; (401bb0 <udi_msc_cbw_invalid+0x20>)
  401b9e:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
  401ba0:	4904      	ldr	r1, [pc, #16]	; (401bb4 <udi_msc_cbw_invalid+0x24>)
  401ba2:	2002      	movs	r0, #2
  401ba4:	4b04      	ldr	r3, [pc, #16]	; (401bb8 <udi_msc_cbw_invalid+0x28>)
  401ba6:	4798      	blx	r3
  401ba8:	e7f6      	b.n	401b98 <udi_msc_cbw_invalid+0x8>
  401baa:	bf00      	nop
  401bac:	20400af0 	.word	0x20400af0
  401bb0:	0040410d 	.word	0x0040410d
  401bb4:	00401b91 	.word	0x00401b91
  401bb8:	00404679 	.word	0x00404679

00401bbc <udi_msc_csw_invalid>:
{
  401bbc:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
  401bbe:	4b06      	ldr	r3, [pc, #24]	; (401bd8 <udi_msc_csw_invalid+0x1c>)
  401bc0:	781b      	ldrb	r3, [r3, #0]
  401bc2:	b903      	cbnz	r3, 401bc6 <udi_msc_csw_invalid+0xa>
  401bc4:	bd08      	pop	{r3, pc}
	udd_ep_set_halt(UDI_MSC_EP_IN);
  401bc6:	2081      	movs	r0, #129	; 0x81
  401bc8:	4b04      	ldr	r3, [pc, #16]	; (401bdc <udi_msc_csw_invalid+0x20>)
  401bca:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
  401bcc:	4904      	ldr	r1, [pc, #16]	; (401be0 <udi_msc_csw_invalid+0x24>)
  401bce:	2081      	movs	r0, #129	; 0x81
  401bd0:	4b04      	ldr	r3, [pc, #16]	; (401be4 <udi_msc_csw_invalid+0x28>)
  401bd2:	4798      	blx	r3
  401bd4:	e7f6      	b.n	401bc4 <udi_msc_csw_invalid+0x8>
  401bd6:	bf00      	nop
  401bd8:	20400af0 	.word	0x20400af0
  401bdc:	0040410d 	.word	0x0040410d
  401be0:	00401bbd 	.word	0x00401bbd
  401be4:	00404679 	.word	0x00404679

00401be8 <udi_msc_csw_process>:
{
  401be8:	b508      	push	{r3, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
  401bea:	4b09      	ldr	r3, [pc, #36]	; (401c10 <udi_msc_csw_process+0x28>)
  401bec:	689b      	ldr	r3, [r3, #8]
  401bee:	b143      	cbz	r3, 401c02 <udi_msc_csw_process+0x1a>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
  401bf0:	4b08      	ldr	r3, [pc, #32]	; (401c14 <udi_msc_csw_process+0x2c>)
  401bf2:	f993 300c 	ldrsb.w	r3, [r3, #12]
  401bf6:	2b00      	cmp	r3, #0
			udd_ep_set_halt(UDI_MSC_EP_IN);
  401bf8:	bfb4      	ite	lt
  401bfa:	2081      	movlt	r0, #129	; 0x81
			udd_ep_set_halt(UDI_MSC_EP_OUT);
  401bfc:	2002      	movge	r0, #2
  401bfe:	4b06      	ldr	r3, [pc, #24]	; (401c18 <udi_msc_csw_process+0x30>)
  401c00:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
  401c02:	4b04      	ldr	r3, [pc, #16]	; (401c14 <udi_msc_csw_process+0x2c>)
  401c04:	685a      	ldr	r2, [r3, #4]
  401c06:	4b02      	ldr	r3, [pc, #8]	; (401c10 <udi_msc_csw_process+0x28>)
  401c08:	605a      	str	r2, [r3, #4]
	udi_msc_csw_send();
  401c0a:	4b04      	ldr	r3, [pc, #16]	; (401c1c <udi_msc_csw_process+0x34>)
  401c0c:	4798      	blx	r3
  401c0e:	bd08      	pop	{r3, pc}
  401c10:	20400018 	.word	0x20400018
  401c14:	20400afc 	.word	0x20400afc
  401c18:	0040410d 	.word	0x0040410d
  401c1c:	00401b59 	.word	0x00401b59

00401c20 <udi_msc_clear_sense>:
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
  401c20:	4b05      	ldr	r3, [pc, #20]	; (401c38 <udi_msc_clear_sense+0x18>)
  401c22:	2200      	movs	r2, #0
  401c24:	601a      	str	r2, [r3, #0]
  401c26:	605a      	str	r2, [r3, #4]
  401c28:	609a      	str	r2, [r3, #8]
  401c2a:	60da      	str	r2, [r3, #12]
  401c2c:	821a      	strh	r2, [r3, #16]
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
  401c2e:	22f0      	movs	r2, #240	; 0xf0
  401c30:	701a      	strb	r2, [r3, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
  401c32:	220a      	movs	r2, #10
  401c34:	71da      	strb	r2, [r3, #7]
  401c36:	4770      	bx	lr
  401c38:	20400b24 	.word	0x20400b24

00401c3c <udi_msc_sense_fail>:
{
  401c3c:	b570      	push	{r4, r5, r6, lr}
  401c3e:	4606      	mov	r6, r0
  401c40:	460d      	mov	r5, r1
  401c42:	4614      	mov	r4, r2
	udi_msc_clear_sense();
  401c44:	4b08      	ldr	r3, [pc, #32]	; (401c68 <udi_msc_sense_fail+0x2c>)
  401c46:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
  401c48:	2201      	movs	r2, #1
  401c4a:	4b08      	ldr	r3, [pc, #32]	; (401c6c <udi_msc_sense_fail+0x30>)
  401c4c:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
  401c4e:	4b08      	ldr	r3, [pc, #32]	; (401c70 <udi_msc_sense_fail+0x34>)
  401c50:	709e      	strb	r6, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
  401c52:	0e22      	lsrs	r2, r4, #24
  401c54:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
  401c56:	0c22      	lsrs	r2, r4, #16
  401c58:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
  401c5a:	0a22      	lsrs	r2, r4, #8
  401c5c:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
  401c5e:	719c      	strb	r4, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
  401c60:	0a2a      	lsrs	r2, r5, #8
  401c62:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
  401c64:	735d      	strb	r5, [r3, #13]
  401c66:	bd70      	pop	{r4, r5, r6, pc}
  401c68:	00401c21 	.word	0x00401c21
  401c6c:	20400018 	.word	0x20400018
  401c70:	20400b24 	.word	0x20400b24

00401c74 <udi_msc_sense_fail_cdb_invalid>:
{
  401c74:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
  401c76:	2200      	movs	r2, #0
  401c78:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  401c7c:	2005      	movs	r0, #5
  401c7e:	4b01      	ldr	r3, [pc, #4]	; (401c84 <udi_msc_sense_fail_cdb_invalid+0x10>)
  401c80:	4798      	blx	r3
  401c82:	bd08      	pop	{r3, pc}
  401c84:	00401c3d 	.word	0x00401c3d

00401c88 <udi_msc_cbw_validate>:
{
  401c88:	b508      	push	{r3, lr}
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
  401c8a:	4b09      	ldr	r3, [pc, #36]	; (401cb0 <udi_msc_cbw_validate+0x28>)
  401c8c:	7b1b      	ldrb	r3, [r3, #12]
  401c8e:	4059      	eors	r1, r3
  401c90:	f011 0f80 	tst.w	r1, #128	; 0x80
  401c94:	d103      	bne.n	401c9e <udi_msc_cbw_validate+0x16>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
  401c96:	4b07      	ldr	r3, [pc, #28]	; (401cb4 <udi_msc_cbw_validate+0x2c>)
  401c98:	689b      	ldr	r3, [r3, #8]
  401c9a:	4283      	cmp	r3, r0
  401c9c:	d205      	bcs.n	401caa <udi_msc_cbw_validate+0x22>
		udi_msc_sense_fail_cdb_invalid();
  401c9e:	4b06      	ldr	r3, [pc, #24]	; (401cb8 <udi_msc_cbw_validate+0x30>)
  401ca0:	4798      	blx	r3
		udi_msc_csw_process();
  401ca2:	4b06      	ldr	r3, [pc, #24]	; (401cbc <udi_msc_cbw_validate+0x34>)
  401ca4:	4798      	blx	r3
		return false;
  401ca6:	2000      	movs	r0, #0
  401ca8:	bd08      	pop	{r3, pc}
	return true;
  401caa:	2001      	movs	r0, #1
}
  401cac:	bd08      	pop	{r3, pc}
  401cae:	bf00      	nop
  401cb0:	20400afc 	.word	0x20400afc
  401cb4:	20400018 	.word	0x20400018
  401cb8:	00401c75 	.word	0x00401c75
  401cbc:	00401be9 	.word	0x00401be9

00401cc0 <udi_msc_sense_fail_hardware>:
{
  401cc0:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
  401cc2:	2200      	movs	r2, #0
  401cc4:	4611      	mov	r1, r2
  401cc6:	2004      	movs	r0, #4
  401cc8:	4b01      	ldr	r3, [pc, #4]	; (401cd0 <udi_msc_sense_fail_hardware+0x10>)
  401cca:	4798      	blx	r3
  401ccc:	bd08      	pop	{r3, pc}
  401cce:	bf00      	nop
  401cd0:	00401c3d 	.word	0x00401c3d

00401cd4 <udi_msc_data_send>:
{
  401cd4:	b510      	push	{r4, lr}
  401cd6:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
  401cd8:	4b07      	ldr	r3, [pc, #28]	; (401cf8 <udi_msc_data_send+0x24>)
  401cda:	9300      	str	r3, [sp, #0]
  401cdc:	460b      	mov	r3, r1
  401cde:	4602      	mov	r2, r0
  401ce0:	2101      	movs	r1, #1
  401ce2:	2081      	movs	r0, #129	; 0x81
  401ce4:	4c05      	ldr	r4, [pc, #20]	; (401cfc <udi_msc_data_send+0x28>)
  401ce6:	47a0      	blx	r4
  401ce8:	b108      	cbz	r0, 401cee <udi_msc_data_send+0x1a>
}
  401cea:	b002      	add	sp, #8
  401cec:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_hardware();
  401cee:	4b04      	ldr	r3, [pc, #16]	; (401d00 <udi_msc_data_send+0x2c>)
  401cf0:	4798      	blx	r3
		udi_msc_csw_process();
  401cf2:	4b04      	ldr	r3, [pc, #16]	; (401d04 <udi_msc_data_send+0x30>)
  401cf4:	4798      	blx	r3
}
  401cf6:	e7f8      	b.n	401cea <udi_msc_data_send+0x16>
  401cf8:	00401d49 	.word	0x00401d49
  401cfc:	004042ed 	.word	0x004042ed
  401d00:	00401cc1 	.word	0x00401cc1
  401d04:	00401be9 	.word	0x00401be9

00401d08 <udi_msc_sense_fail_busy_or_change>:
{
  401d08:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
  401d0a:	2200      	movs	r2, #0
  401d0c:	f44f 5120 	mov.w	r1, #10240	; 0x2800
  401d10:	2006      	movs	r0, #6
  401d12:	4b01      	ldr	r3, [pc, #4]	; (401d18 <udi_msc_sense_fail_busy_or_change+0x10>)
  401d14:	4798      	blx	r3
  401d16:	bd08      	pop	{r3, pc}
  401d18:	00401c3d 	.word	0x00401c3d

00401d1c <udi_msc_sense_fail_not_present>:
{
  401d1c:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
  401d1e:	2200      	movs	r2, #0
  401d20:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
  401d24:	2002      	movs	r0, #2
  401d26:	4b01      	ldr	r3, [pc, #4]	; (401d2c <udi_msc_sense_fail_not_present+0x10>)
  401d28:	4798      	blx	r3
  401d2a:	bd08      	pop	{r3, pc}
  401d2c:	00401c3d 	.word	0x00401c3d

00401d30 <udi_msc_sense_pass>:
{
  401d30:	b508      	push	{r3, lr}
	udi_msc_clear_sense();
  401d32:	4b03      	ldr	r3, [pc, #12]	; (401d40 <udi_msc_sense_pass+0x10>)
  401d34:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
  401d36:	2200      	movs	r2, #0
  401d38:	4b02      	ldr	r3, [pc, #8]	; (401d44 <udi_msc_sense_pass+0x14>)
  401d3a:	731a      	strb	r2, [r3, #12]
  401d3c:	bd08      	pop	{r3, pc}
  401d3e:	bf00      	nop
  401d40:	00401c21 	.word	0x00401c21
  401d44:	20400018 	.word	0x20400018

00401d48 <udi_msc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
  401d48:	b100      	cbz	r0, 401d4c <udi_msc_data_sent+0x4>
  401d4a:	4770      	bx	lr
{
  401d4c:	b510      	push	{r4, lr}
  401d4e:	460c      	mov	r4, r1
	udi_msc_sense_pass();
  401d50:	4b04      	ldr	r3, [pc, #16]	; (401d64 <udi_msc_data_sent+0x1c>)
  401d52:	4798      	blx	r3
	udi_msc_csw.dCSWDataResidue -= nb_sent;
  401d54:	4b04      	ldr	r3, [pc, #16]	; (401d68 <udi_msc_data_sent+0x20>)
  401d56:	6899      	ldr	r1, [r3, #8]
  401d58:	1b09      	subs	r1, r1, r4
  401d5a:	6099      	str	r1, [r3, #8]
	udi_msc_csw_process();
  401d5c:	4b03      	ldr	r3, [pc, #12]	; (401d6c <udi_msc_data_sent+0x24>)
  401d5e:	4798      	blx	r3
  401d60:	bd10      	pop	{r4, pc}
  401d62:	bf00      	nop
  401d64:	00401d31 	.word	0x00401d31
  401d68:	20400018 	.word	0x20400018
  401d6c:	00401be9 	.word	0x00401be9

00401d70 <udi_msc_spc_mode_sense>:
{
  401d70:	b570      	push	{r4, r5, r6, lr}
	memset(&sense, 0, sizeof(sense));
  401d72:	4b23      	ldr	r3, [pc, #140]	; (401e00 <udi_msc_spc_mode_sense+0x90>)
  401d74:	2200      	movs	r2, #0
  401d76:	601a      	str	r2, [r3, #0]
  401d78:	605a      	str	r2, [r3, #4]
  401d7a:	609a      	str	r2, [r3, #8]
  401d7c:	60da      	str	r2, [r3, #12]
  401d7e:	611a      	str	r2, [r3, #16]
	if (b_sense10) {
  401d80:	4606      	mov	r6, r0
  401d82:	b1a0      	cbz	r0, 401dae <udi_msc_spc_mode_sense+0x3e>
		request_lgt = udi_msc_cbw.CDB[8];
  401d84:	4b1f      	ldr	r3, [pc, #124]	; (401e04 <udi_msc_spc_mode_sense+0x94>)
  401d86:	7ddd      	ldrb	r5, [r3, #23]
		ptr_mode = &sense.s10.sense_data;
  401d88:	4a1f      	ldr	r2, [pc, #124]	; (401e08 <udi_msc_spc_mode_sense+0x98>)
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
  401d8a:	2408      	movs	r4, #8
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
  401d8c:	4b1d      	ldr	r3, [pc, #116]	; (401e04 <udi_msc_spc_mode_sense+0x94>)
  401d8e:	7c5b      	ldrb	r3, [r3, #17]
  401d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((SCSI_MS_MODE_INFEXP == mode)
  401d94:	2b1c      	cmp	r3, #28
  401d96:	d00f      	beq.n	401db8 <udi_msc_spc_mode_sense+0x48>
  401d98:	2b3f      	cmp	r3, #63	; 0x3f
  401d9a:	d00d      	beq.n	401db8 <udi_msc_spc_mode_sense+0x48>
  401d9c:	42a5      	cmp	r5, r4
  401d9e:	bf28      	it	cs
  401da0:	4625      	movcs	r5, r4
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
  401da2:	2180      	movs	r1, #128	; 0x80
  401da4:	4628      	mov	r0, r5
  401da6:	4b19      	ldr	r3, [pc, #100]	; (401e0c <udi_msc_spc_mode_sense+0x9c>)
  401da8:	4798      	blx	r3
  401daa:	b970      	cbnz	r0, 401dca <udi_msc_spc_mode_sense+0x5a>
  401dac:	bd70      	pop	{r4, r5, r6, pc}
		request_lgt = udi_msc_cbw.CDB[4];
  401dae:	4b15      	ldr	r3, [pc, #84]	; (401e04 <udi_msc_spc_mode_sense+0x94>)
  401db0:	7cdd      	ldrb	r5, [r3, #19]
		ptr_mode = &sense.s6.sense_data;
  401db2:	4a17      	ldr	r2, [pc, #92]	; (401e10 <udi_msc_spc_mode_sense+0xa0>)
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
  401db4:	2404      	movs	r4, #4
  401db6:	e7e9      	b.n	401d8c <udi_msc_spc_mode_sense+0x1c>
		ptr_mode->page_code =
  401db8:	231c      	movs	r3, #28
  401dba:	7013      	strb	r3, [r2, #0]
		ptr_mode->page_length =
  401dbc:	230a      	movs	r3, #10
  401dbe:	7053      	strb	r3, [r2, #1]
		ptr_mode->mrie =
  401dc0:	2305      	movs	r3, #5
  401dc2:	70d3      	strb	r3, [r2, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
  401dc4:	340c      	adds	r4, #12
  401dc6:	b2e4      	uxtb	r4, r4
  401dc8:	e7e8      	b.n	401d9c <udi_msc_spc_mode_sense+0x2c>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
  401dca:	4b0e      	ldr	r3, [pc, #56]	; (401e04 <udi_msc_spc_mode_sense+0x94>)
  401dcc:	7b58      	ldrb	r0, [r3, #13]
  401dce:	4b11      	ldr	r3, [pc, #68]	; (401e14 <udi_msc_spc_mode_sense+0xa4>)
  401dd0:	4798      	blx	r3
  401dd2:	2800      	cmp	r0, #0
  401dd4:	bf14      	ite	ne
  401dd6:	2380      	movne	r3, #128	; 0x80
  401dd8:	2300      	moveq	r3, #0
	if (b_sense10) {
  401dda:	b166      	cbz	r6, 401df6 <udi_msc_spc_mode_sense+0x86>
				cpu_to_be16((data_sense_lgt - 2));
  401ddc:	3c02      	subs	r4, #2
  401dde:	b2a4      	uxth	r4, r4
		sense.s10.header.mode_data_length =
  401de0:	4907      	ldr	r1, [pc, #28]	; (401e00 <udi_msc_spc_mode_sense+0x90>)
				cpu_to_be16((data_sense_lgt - 2));
  401de2:	0222      	lsls	r2, r4, #8
  401de4:	ea42 2414 	orr.w	r4, r2, r4, lsr #8
		sense.s10.header.mode_data_length =
  401de8:	800c      	strh	r4, [r1, #0]
		sense.s10.header.device_specific_parameter = wp;
  401dea:	70cb      	strb	r3, [r1, #3]
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
  401dec:	4629      	mov	r1, r5
  401dee:	4804      	ldr	r0, [pc, #16]	; (401e00 <udi_msc_spc_mode_sense+0x90>)
  401df0:	4b09      	ldr	r3, [pc, #36]	; (401e18 <udi_msc_spc_mode_sense+0xa8>)
  401df2:	4798      	blx	r3
  401df4:	e7da      	b.n	401dac <udi_msc_spc_mode_sense+0x3c>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
  401df6:	4a02      	ldr	r2, [pc, #8]	; (401e00 <udi_msc_spc_mode_sense+0x90>)
  401df8:	3c01      	subs	r4, #1
  401dfa:	7014      	strb	r4, [r2, #0]
		sense.s6.header.device_specific_parameter = wp;
  401dfc:	7093      	strb	r3, [r2, #2]
  401dfe:	e7f5      	b.n	401dec <udi_msc_spc_mode_sense+0x7c>
  401e00:	20400ad8 	.word	0x20400ad8
  401e04:	20400afc 	.word	0x20400afc
  401e08:	20400ae0 	.word	0x20400ae0
  401e0c:	00401c89 	.word	0x00401c89
  401e10:	20400adc 	.word	0x20400adc
  401e14:	004019e1 	.word	0x004019e1
  401e18:	00401cd5 	.word	0x00401cd5

00401e1c <udi_msc_sbc_trans>:
{
  401e1c:	b510      	push	{r4, lr}
	if (!b_read) {
  401e1e:	4604      	mov	r4, r0
  401e20:	b1e8      	cbz	r0, 401e5e <udi_msc_sbc_trans+0x42>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
  401e22:	4a16      	ldr	r2, [pc, #88]	; (401e7c <udi_msc_sbc_trans+0x60>)
  401e24:	4b16      	ldr	r3, [pc, #88]	; (401e80 <udi_msc_sbc_trans+0x64>)
  401e26:	7c59      	ldrb	r1, [r3, #17]
  401e28:	70d1      	strb	r1, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
  401e2a:	7c99      	ldrb	r1, [r3, #18]
  401e2c:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
  401e2e:	7cd9      	ldrb	r1, [r3, #19]
  401e30:	7051      	strb	r1, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
  401e32:	7d19      	ldrb	r1, [r3, #20]
  401e34:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
  401e36:	4a13      	ldr	r2, [pc, #76]	; (401e84 <udi_msc_sbc_trans+0x68>)
  401e38:	7d99      	ldrb	r1, [r3, #22]
  401e3a:	7051      	strb	r1, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
  401e3c:	7ddb      	ldrb	r3, [r3, #23]
  401e3e:	7013      	strb	r3, [r2, #0]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
  401e40:	8810      	ldrh	r0, [r2, #0]
	if (!udi_msc_cbw_validate(trans_size,
  401e42:	2c00      	cmp	r4, #0
  401e44:	bf14      	ite	ne
  401e46:	2180      	movne	r1, #128	; 0x80
  401e48:	2100      	moveq	r1, #0
  401e4a:	0240      	lsls	r0, r0, #9
  401e4c:	4b0e      	ldr	r3, [pc, #56]	; (401e88 <udi_msc_sbc_trans+0x6c>)
  401e4e:	4798      	blx	r3
  401e50:	b120      	cbz	r0, 401e5c <udi_msc_sbc_trans+0x40>
	udi_msc_b_read = b_read;
  401e52:	4b0e      	ldr	r3, [pc, #56]	; (401e8c <udi_msc_sbc_trans+0x70>)
  401e54:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
  401e56:	2201      	movs	r2, #1
  401e58:	4b0d      	ldr	r3, [pc, #52]	; (401e90 <udi_msc_sbc_trans+0x74>)
  401e5a:	701a      	strb	r2, [r3, #0]
  401e5c:	bd10      	pop	{r4, pc}
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
  401e5e:	4b08      	ldr	r3, [pc, #32]	; (401e80 <udi_msc_sbc_trans+0x64>)
  401e60:	7b58      	ldrb	r0, [r3, #13]
  401e62:	4b0c      	ldr	r3, [pc, #48]	; (401e94 <udi_msc_sbc_trans+0x78>)
  401e64:	4798      	blx	r3
  401e66:	2800      	cmp	r0, #0
  401e68:	d0db      	beq.n	401e22 <udi_msc_sbc_trans+0x6>
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
  401e6a:	2200      	movs	r2, #0
  401e6c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
  401e70:	2007      	movs	r0, #7
  401e72:	4b09      	ldr	r3, [pc, #36]	; (401e98 <udi_msc_sbc_trans+0x7c>)
  401e74:	4798      	blx	r3
			udi_msc_csw_process();
  401e76:	4b09      	ldr	r3, [pc, #36]	; (401e9c <udi_msc_sbc_trans+0x80>)
  401e78:	4798      	blx	r3
			return;
  401e7a:	bd10      	pop	{r4, pc}
  401e7c:	20400aec 	.word	0x20400aec
  401e80:	20400afc 	.word	0x20400afc
  401e84:	20400b1c 	.word	0x20400b1c
  401e88:	00401c89 	.word	0x00401c89
  401e8c:	20400af1 	.word	0x20400af1
  401e90:	20400af2 	.word	0x20400af2
  401e94:	004019e1 	.word	0x004019e1
  401e98:	00401c3d 	.word	0x00401c3d
  401e9c:	00401be9 	.word	0x00401be9

00401ea0 <udi_msc_cbw_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  401ea0:	2800      	cmp	r0, #0
  401ea2:	f040 818f 	bne.w	4021c4 <udi_msc_cbw_received+0x324>
{
  401ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((sizeof(udi_msc_cbw) != nb_received)
  401ea8:	291f      	cmp	r1, #31
  401eaa:	d104      	bne.n	401eb6 <udi_msc_cbw_received+0x16>
			|| (udi_msc_cbw.dCBWSignature !=
  401eac:	4b89      	ldr	r3, [pc, #548]	; (4020d4 <udi_msc_cbw_received+0x234>)
  401eae:	681a      	ldr	r2, [r3, #0]
  401eb0:	4b89      	ldr	r3, [pc, #548]	; (4020d8 <udi_msc_cbw_received+0x238>)
  401eb2:	429a      	cmp	r2, r3
  401eb4:	d007      	beq.n	401ec6 <udi_msc_cbw_received+0x26>
		udi_msc_b_cbw_invalid = true;
  401eb6:	2201      	movs	r2, #1
  401eb8:	4b88      	ldr	r3, [pc, #544]	; (4020dc <udi_msc_cbw_received+0x23c>)
  401eba:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
  401ebc:	4b88      	ldr	r3, [pc, #544]	; (4020e0 <udi_msc_cbw_received+0x240>)
  401ebe:	4798      	blx	r3
		udi_msc_csw_invalid();
  401ec0:	4b88      	ldr	r3, [pc, #544]	; (4020e4 <udi_msc_cbw_received+0x244>)
  401ec2:	4798      	blx	r3
		return;
  401ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
  401ec6:	4b83      	ldr	r3, [pc, #524]	; (4020d4 <udi_msc_cbw_received+0x234>)
  401ec8:	7b58      	ldrb	r0, [r3, #13]
  401eca:	f000 000f 	and.w	r0, r0, #15
  401ece:	7358      	strb	r0, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
  401ed0:	4b85      	ldr	r3, [pc, #532]	; (4020e8 <udi_msc_cbw_received+0x248>)
  401ed2:	781b      	ldrb	r3, [r3, #0]
  401ed4:	4283      	cmp	r3, r0
  401ed6:	d364      	bcc.n	401fa2 <udi_msc_cbw_received+0x102>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
  401ed8:	4b7e      	ldr	r3, [pc, #504]	; (4020d4 <udi_msc_cbw_received+0x234>)
	udi_msc_csw.dCSWDataResidue =
  401eda:	6899      	ldr	r1, [r3, #8]
  401edc:	4a83      	ldr	r2, [pc, #524]	; (4020ec <udi_msc_cbw_received+0x24c>)
  401ede:	6091      	str	r1, [r2, #8]
	switch (udi_msc_cbw.CDB[0]) {
  401ee0:	7bdb      	ldrb	r3, [r3, #15]
  401ee2:	2b5a      	cmp	r3, #90	; 0x5a
  401ee4:	f200 8158 	bhi.w	402198 <udi_msc_cbw_received+0x2f8>
  401ee8:	e8df f013 	tbh	[pc, r3, lsl #1]
  401eec:	015600be 	.word	0x015600be
  401ef0:	00600156 	.word	0x00600156
  401ef4:	01560156 	.word	0x01560156
  401ef8:	01560156 	.word	0x01560156
  401efc:	01560156 	.word	0x01560156
  401f00:	01560156 	.word	0x01560156
  401f04:	01560156 	.word	0x01560156
  401f08:	01560156 	.word	0x01560156
  401f0c:	01560156 	.word	0x01560156
  401f10:	01560070 	.word	0x01560070
  401f14:	01560156 	.word	0x01560156
  401f18:	01560156 	.word	0x01560156
  401f1c:	01560156 	.word	0x01560156
  401f20:	012d00b6 	.word	0x012d00b6
  401f24:	01560156 	.word	0x01560156
  401f28:	0156013e 	.word	0x0156013e
  401f2c:	01560156 	.word	0x01560156
  401f30:	01560156 	.word	0x01560156
  401f34:	00d30156 	.word	0x00d30156
  401f38:	01560156 	.word	0x01560156
  401f3c:	0156014e 	.word	0x0156014e
  401f40:	01560152 	.word	0x01560152
  401f44:	01560156 	.word	0x01560156
  401f48:	01490156 	.word	0x01490156
  401f4c:	01560156 	.word	0x01560156
  401f50:	01560156 	.word	0x01560156
  401f54:	01560156 	.word	0x01560156
  401f58:	01560156 	.word	0x01560156
  401f5c:	01560156 	.word	0x01560156
  401f60:	01560156 	.word	0x01560156
  401f64:	01560156 	.word	0x01560156
  401f68:	01560156 	.word	0x01560156
  401f6c:	01560156 	.word	0x01560156
  401f70:	01560156 	.word	0x01560156
  401f74:	01560156 	.word	0x01560156
  401f78:	01560156 	.word	0x01560156
  401f7c:	01560156 	.word	0x01560156
  401f80:	01560156 	.word	0x01560156
  401f84:	01560156 	.word	0x01560156
  401f88:	01560156 	.word	0x01560156
  401f8c:	01560156 	.word	0x01560156
  401f90:	01560156 	.word	0x01560156
  401f94:	01560156 	.word	0x01560156
  401f98:	01560156 	.word	0x01560156
  401f9c:	01560156 	.word	0x01560156
  401fa0:	00ba      	.short	0x00ba
		udi_msc_sense_fail_cdb_invalid();
  401fa2:	4b53      	ldr	r3, [pc, #332]	; (4020f0 <udi_msc_cbw_received+0x250>)
  401fa4:	4798      	blx	r3
		udi_msc_csw_process();
  401fa6:	4b53      	ldr	r3, [pc, #332]	; (4020f4 <udi_msc_cbw_received+0x254>)
  401fa8:	4798      	blx	r3
		return;
  401faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t length = udi_msc_cbw.CDB[4];
  401fac:	4b49      	ldr	r3, [pc, #292]	; (4020d4 <udi_msc_cbw_received+0x234>)
  401fae:	7cdc      	ldrb	r4, [r3, #19]
  401fb0:	2c12      	cmp	r4, #18
  401fb2:	bf28      	it	cs
  401fb4:	2412      	movcs	r4, #18
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
  401fb6:	2180      	movs	r1, #128	; 0x80
  401fb8:	4620      	mov	r0, r4
  401fba:	4b4f      	ldr	r3, [pc, #316]	; (4020f8 <udi_msc_cbw_received+0x258>)
  401fbc:	4798      	blx	r3
  401fbe:	b900      	cbnz	r0, 401fc2 <udi_msc_cbw_received+0x122>
  401fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
  401fc2:	4621      	mov	r1, r4
  401fc4:	484d      	ldr	r0, [pc, #308]	; (4020fc <udi_msc_cbw_received+0x25c>)
  401fc6:	4b4e      	ldr	r3, [pc, #312]	; (402100 <udi_msc_cbw_received+0x260>)
  401fc8:	4798      	blx	r3
  401fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	length = udi_msc_cbw.CDB[4];
  401fcc:	4b41      	ldr	r3, [pc, #260]	; (4020d4 <udi_msc_cbw_received+0x234>)
  401fce:	7cdd      	ldrb	r5, [r3, #19]
  401fd0:	2d24      	cmp	r5, #36	; 0x24
  401fd2:	bf28      	it	cs
  401fd4:	2524      	movcs	r5, #36	; 0x24
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
  401fd6:	2180      	movs	r1, #128	; 0x80
  401fd8:	4628      	mov	r0, r5
  401fda:	4b47      	ldr	r3, [pc, #284]	; (4020f8 <udi_msc_cbw_received+0x258>)
  401fdc:	4798      	blx	r3
  401fde:	2800      	cmp	r0, #0
  401fe0:	d0ee      	beq.n	401fc0 <udi_msc_cbw_received+0x120>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
  401fe2:	4b3c      	ldr	r3, [pc, #240]	; (4020d4 <udi_msc_cbw_received+0x234>)
  401fe4:	7c1b      	ldrb	r3, [r3, #16]
  401fe6:	f013 0f03 	tst.w	r3, #3
  401fea:	d102      	bne.n	401ff2 <udi_msc_cbw_received+0x152>
			|| (0 != udi_msc_cbw.CDB[2])) {
  401fec:	4b39      	ldr	r3, [pc, #228]	; (4020d4 <udi_msc_cbw_received+0x234>)
  401fee:	7c5c      	ldrb	r4, [r3, #17]
  401ff0:	b124      	cbz	r4, 401ffc <udi_msc_cbw_received+0x15c>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
  401ff2:	4b3f      	ldr	r3, [pc, #252]	; (4020f0 <udi_msc_cbw_received+0x250>)
  401ff4:	4798      	blx	r3
		udi_msc_csw_process();
  401ff6:	4b3f      	ldr	r3, [pc, #252]	; (4020f4 <udi_msc_cbw_received+0x254>)
  401ff8:	4798      	blx	r3
  401ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
  401ffc:	4b35      	ldr	r3, [pc, #212]	; (4020d4 <udi_msc_cbw_received+0x234>)
  401ffe:	7b58      	ldrb	r0, [r3, #13]
  402000:	4b40      	ldr	r3, [pc, #256]	; (402104 <udi_msc_cbw_received+0x264>)
  402002:	4798      	blx	r3
  402004:	2800      	cmp	r0, #0
  402006:	bf0c      	ite	eq
  402008:	4623      	moveq	r3, r4
  40200a:	2380      	movne	r3, #128	; 0x80
  40200c:	4f3e      	ldr	r7, [pc, #248]	; (402108 <udi_msc_cbw_received+0x268>)
  40200e:	707b      	strb	r3, [r7, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
  402010:	4b30      	ldr	r3, [pc, #192]	; (4020d4 <udi_msc_cbw_received+0x234>)
  402012:	7b58      	ldrb	r0, [r3, #13]
  402014:	4b3d      	ldr	r3, [pc, #244]	; (40210c <udi_msc_cbw_received+0x26c>)
  402016:	4798      	blx	r3
	memcpy(udi_msc_inquiry_data.product_id,
  402018:	f107 0610 	add.w	r6, r7, #16
  40201c:	4603      	mov	r3, r0
  40201e:	f853 0f01 	ldr.w	r0, [r3, #1]!
  402022:	6859      	ldr	r1, [r3, #4]
  402024:	689a      	ldr	r2, [r3, #8]
  402026:	68db      	ldr	r3, [r3, #12]
  402028:	c60f      	stmia	r6!, {r0, r1, r2, r3}
		if ((0 == udi_msc_inquiry_data.product_id[i])
  40202a:	7c3b      	ldrb	r3, [r7, #16]
  40202c:	2b22      	cmp	r3, #34	; 0x22
  40202e:	f000 80bc 	beq.w	4021aa <udi_msc_cbw_received+0x30a>
  402032:	2b00      	cmp	r3, #0
  402034:	f000 80b9 	beq.w	4021aa <udi_msc_cbw_received+0x30a>
  402038:	f1a6 020f 	sub.w	r2, r6, #15
		i++;
  40203c:	2401      	movs	r4, #1
		if ((0 == udi_msc_inquiry_data.product_id[i])
  40203e:	f812 3b01 	ldrb.w	r3, [r2], #1
  402042:	2b00      	cmp	r3, #0
  402044:	f000 80b1 	beq.w	4021aa <udi_msc_cbw_received+0x30a>
  402048:	2b22      	cmp	r3, #34	; 0x22
  40204a:	f000 80ae 	beq.w	4021aa <udi_msc_cbw_received+0x30a>
		i++;
  40204e:	3401      	adds	r4, #1
  402050:	b2e4      	uxtb	r4, r4
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
  402052:	2c10      	cmp	r4, #16
  402054:	d1f3      	bne.n	40203e <udi_msc_cbw_received+0x19e>
  402056:	e0b0      	b.n	4021ba <udi_msc_cbw_received+0x31a>
		udi_msc_spc_mode_sense(false);
  402058:	2000      	movs	r0, #0
  40205a:	4b2d      	ldr	r3, [pc, #180]	; (402110 <udi_msc_cbw_received+0x270>)
  40205c:	4798      	blx	r3
		break;
  40205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udi_msc_spc_mode_sense(true);
  402060:	2001      	movs	r0, #1
  402062:	4b2b      	ldr	r3, [pc, #172]	; (402110 <udi_msc_cbw_received+0x270>)
  402064:	4798      	blx	r3
		break;
  402066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
  402068:	4b2a      	ldr	r3, [pc, #168]	; (402114 <udi_msc_cbw_received+0x274>)
  40206a:	4798      	blx	r3
  40206c:	2802      	cmp	r0, #2
  40206e:	d008      	beq.n	402082 <udi_msc_cbw_received+0x1e2>
  402070:	2803      	cmp	r0, #3
  402072:	d003      	beq.n	40207c <udi_msc_cbw_received+0x1dc>
  402074:	b140      	cbz	r0, 402088 <udi_msc_cbw_received+0x1e8>
		udi_msc_sense_fail_hardware();
  402076:	4b28      	ldr	r3, [pc, #160]	; (402118 <udi_msc_cbw_received+0x278>)
  402078:	4798      	blx	r3
  40207a:	e007      	b.n	40208c <udi_msc_cbw_received+0x1ec>
		udi_msc_sense_fail_busy_or_change();
  40207c:	4b27      	ldr	r3, [pc, #156]	; (40211c <udi_msc_cbw_received+0x27c>)
  40207e:	4798      	blx	r3
  402080:	e004      	b.n	40208c <udi_msc_cbw_received+0x1ec>
		udi_msc_sense_fail_not_present();
  402082:	4b27      	ldr	r3, [pc, #156]	; (402120 <udi_msc_cbw_received+0x280>)
  402084:	4798      	blx	r3
  402086:	e001      	b.n	40208c <udi_msc_cbw_received+0x1ec>
		udi_msc_sense_pass();
  402088:	4b26      	ldr	r3, [pc, #152]	; (402124 <udi_msc_cbw_received+0x284>)
  40208a:	4798      	blx	r3
	udi_msc_csw_process();
  40208c:	4b19      	ldr	r3, [pc, #100]	; (4020f4 <udi_msc_cbw_received+0x254>)
  40208e:	4798      	blx	r3
  402090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
  402092:	2180      	movs	r1, #128	; 0x80
  402094:	2008      	movs	r0, #8
  402096:	4b18      	ldr	r3, [pc, #96]	; (4020f8 <udi_msc_cbw_received+0x258>)
  402098:	4798      	blx	r3
  40209a:	2800      	cmp	r0, #0
  40209c:	d090      	beq.n	401fc0 <udi_msc_cbw_received+0x120>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
  40209e:	4922      	ldr	r1, [pc, #136]	; (402128 <udi_msc_cbw_received+0x288>)
  4020a0:	4b0c      	ldr	r3, [pc, #48]	; (4020d4 <udi_msc_cbw_received+0x234>)
  4020a2:	7b58      	ldrb	r0, [r3, #13]
  4020a4:	4b21      	ldr	r3, [pc, #132]	; (40212c <udi_msc_cbw_received+0x28c>)
  4020a6:	4798      	blx	r3
  4020a8:	2802      	cmp	r0, #2
  4020aa:	d00d      	beq.n	4020c8 <udi_msc_cbw_received+0x228>
  4020ac:	2803      	cmp	r0, #3
  4020ae:	d006      	beq.n	4020be <udi_msc_cbw_received+0x21e>
  4020b0:	2800      	cmp	r0, #0
  4020b2:	d03d      	beq.n	402130 <udi_msc_cbw_received+0x290>
		udi_msc_sense_fail_hardware();
  4020b4:	4b18      	ldr	r3, [pc, #96]	; (402118 <udi_msc_cbw_received+0x278>)
  4020b6:	4798      	blx	r3
		udi_msc_csw_process();
  4020b8:	4b0e      	ldr	r3, [pc, #56]	; (4020f4 <udi_msc_cbw_received+0x254>)
  4020ba:	4798      	blx	r3
  4020bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udi_msc_sense_fail_busy_or_change();
  4020be:	4b17      	ldr	r3, [pc, #92]	; (40211c <udi_msc_cbw_received+0x27c>)
  4020c0:	4798      	blx	r3
		udi_msc_csw_process();
  4020c2:	4b0c      	ldr	r3, [pc, #48]	; (4020f4 <udi_msc_cbw_received+0x254>)
  4020c4:	4798      	blx	r3
  4020c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udi_msc_sense_fail_not_present();
  4020c8:	4b15      	ldr	r3, [pc, #84]	; (402120 <udi_msc_cbw_received+0x280>)
  4020ca:	4798      	blx	r3
		udi_msc_csw_process();
  4020cc:	4b09      	ldr	r3, [pc, #36]	; (4020f4 <udi_msc_cbw_received+0x254>)
  4020ce:	4798      	blx	r3
  4020d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4020d2:	bf00      	nop
  4020d4:	20400afc 	.word	0x20400afc
  4020d8:	43425355 	.word	0x43425355
  4020dc:	20400af0 	.word	0x20400af0
  4020e0:	00401b91 	.word	0x00401b91
  4020e4:	00401bbd 	.word	0x00401bbd
  4020e8:	20400b20 	.word	0x20400b20
  4020ec:	20400018 	.word	0x20400018
  4020f0:	00401c75 	.word	0x00401c75
  4020f4:	00401be9 	.word	0x00401be9
  4020f8:	00401c89 	.word	0x00401c89
  4020fc:	20400b24 	.word	0x20400b24
  402100:	00401cd5 	.word	0x00401cd5
  402104:	004019f5 	.word	0x004019f5
  402108:	20400028 	.word	0x20400028
  40210c:	00401a09 	.word	0x00401a09
  402110:	00401d71 	.word	0x00401d71
  402114:	004019a5 	.word	0x004019a5
  402118:	00401cc1 	.word	0x00401cc1
  40211c:	00401d09 	.word	0x00401d09
  402120:	00401d1d 	.word	0x00401d1d
  402124:	00401d31 	.word	0x00401d31
  402128:	20400af4 	.word	0x20400af4
  40212c:	004019b9 	.word	0x004019b9
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
  402130:	4825      	ldr	r0, [pc, #148]	; (4021c8 <udi_msc_cbw_received+0x328>)
  402132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  402136:	6043      	str	r3, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
  402138:	6803      	ldr	r3, [r0, #0]
  40213a:	ba1b      	rev	r3, r3
  40213c:	6003      	str	r3, [r0, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
  40213e:	2108      	movs	r1, #8
  402140:	4b22      	ldr	r3, [pc, #136]	; (4021cc <udi_msc_cbw_received+0x32c>)
  402142:	4798      	blx	r3
  402144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	bool start = 0x1 & udi_msc_cbw.CDB[4];
  402146:	4b22      	ldr	r3, [pc, #136]	; (4021d0 <udi_msc_cbw_received+0x330>)
  402148:	7cdb      	ldrb	r3, [r3, #19]
	if (loej) {
  40214a:	f013 0f02 	tst.w	r3, #2
  40214e:	d104      	bne.n	40215a <udi_msc_cbw_received+0x2ba>
	udi_msc_sense_pass();
  402150:	4b20      	ldr	r3, [pc, #128]	; (4021d4 <udi_msc_cbw_received+0x334>)
  402152:	4798      	blx	r3
	udi_msc_csw_process();
  402154:	4b20      	ldr	r3, [pc, #128]	; (4021d8 <udi_msc_cbw_received+0x338>)
  402156:	4798      	blx	r3
  402158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
  40215a:	f083 0301 	eor.w	r3, r3, #1
  40215e:	f003 0101 	and.w	r1, r3, #1
  402162:	4b1e      	ldr	r3, [pc, #120]	; (4021dc <udi_msc_cbw_received+0x33c>)
  402164:	4798      	blx	r3
  402166:	e7f3      	b.n	402150 <udi_msc_cbw_received+0x2b0>
	uint8_t prevent = udi_msc_cbw.CDB[4];
  402168:	4b19      	ldr	r3, [pc, #100]	; (4021d0 <udi_msc_cbw_received+0x330>)
	if (0 == prevent) {
  40216a:	7cdb      	ldrb	r3, [r3, #19]
  40216c:	b123      	cbz	r3, 402178 <udi_msc_cbw_received+0x2d8>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
  40216e:	4b1c      	ldr	r3, [pc, #112]	; (4021e0 <udi_msc_cbw_received+0x340>)
  402170:	4798      	blx	r3
	udi_msc_csw_process();
  402172:	4b19      	ldr	r3, [pc, #100]	; (4021d8 <udi_msc_cbw_received+0x338>)
  402174:	4798      	blx	r3
  402176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udi_msc_sense_pass();
  402178:	4b16      	ldr	r3, [pc, #88]	; (4021d4 <udi_msc_cbw_received+0x334>)
  40217a:	4798      	blx	r3
  40217c:	e7f9      	b.n	402172 <udi_msc_cbw_received+0x2d2>
		udi_msc_sense_pass();
  40217e:	4b15      	ldr	r3, [pc, #84]	; (4021d4 <udi_msc_cbw_received+0x334>)
  402180:	4798      	blx	r3
		udi_msc_csw_process();
  402182:	4b15      	ldr	r3, [pc, #84]	; (4021d8 <udi_msc_cbw_received+0x338>)
  402184:	4798      	blx	r3
		break;
  402186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udi_msc_sbc_trans(true);
  402188:	2001      	movs	r0, #1
  40218a:	4b16      	ldr	r3, [pc, #88]	; (4021e4 <udi_msc_cbw_received+0x344>)
  40218c:	4798      	blx	r3
		break;
  40218e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udi_msc_sbc_trans(false);
  402190:	2000      	movs	r0, #0
  402192:	4b14      	ldr	r3, [pc, #80]	; (4021e4 <udi_msc_cbw_received+0x344>)
  402194:	4798      	blx	r3
		break;
  402196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
  402198:	2200      	movs	r2, #0
  40219a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40219e:	2005      	movs	r0, #5
  4021a0:	4b11      	ldr	r3, [pc, #68]	; (4021e8 <udi_msc_cbw_received+0x348>)
  4021a2:	4798      	blx	r3
		udi_msc_csw_process();
  4021a4:	4b0c      	ldr	r3, [pc, #48]	; (4021d8 <udi_msc_cbw_received+0x338>)
  4021a6:	4798      	blx	r3
		break;
  4021a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udi_msc_inquiry_data.product_id[i] = ' ';
  4021aa:	4910      	ldr	r1, [pc, #64]	; (4021ec <udi_msc_cbw_received+0x34c>)
  4021ac:	2220      	movs	r2, #32
  4021ae:	190b      	adds	r3, r1, r4
  4021b0:	741a      	strb	r2, [r3, #16]
		i++;
  4021b2:	3401      	adds	r4, #1
  4021b4:	b2e4      	uxtb	r4, r4
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
  4021b6:	2c10      	cmp	r4, #16
  4021b8:	d1f9      	bne.n	4021ae <udi_msc_cbw_received+0x30e>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
  4021ba:	4629      	mov	r1, r5
  4021bc:	480b      	ldr	r0, [pc, #44]	; (4021ec <udi_msc_cbw_received+0x34c>)
  4021be:	4b03      	ldr	r3, [pc, #12]	; (4021cc <udi_msc_cbw_received+0x32c>)
  4021c0:	4798      	blx	r3
  4021c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4021c4:	4770      	bx	lr
  4021c6:	bf00      	nop
  4021c8:	20400af4 	.word	0x20400af4
  4021cc:	00401cd5 	.word	0x00401cd5
  4021d0:	20400afc 	.word	0x20400afc
  4021d4:	00401d31 	.word	0x00401d31
  4021d8:	00401be9 	.word	0x00401be9
  4021dc:	004019cd 	.word	0x004019cd
  4021e0:	00401c75 	.word	0x00401c75
  4021e4:	00401e1d 	.word	0x00401e1d
  4021e8:	00401c3d 	.word	0x00401c3d
  4021ec:	20400028 	.word	0x20400028

004021f0 <udi_msc_disable>:
{
  4021f0:	b508      	push	{r3, lr}
	udi_msc_b_trans_req = false;
  4021f2:	2200      	movs	r2, #0
  4021f4:	4b04      	ldr	r3, [pc, #16]	; (402208 <udi_msc_disable+0x18>)
  4021f6:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
  4021f8:	2301      	movs	r3, #1
  4021fa:	4a04      	ldr	r2, [pc, #16]	; (40220c <udi_msc_disable+0x1c>)
  4021fc:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
  4021fe:	4a04      	ldr	r2, [pc, #16]	; (402210 <udi_msc_disable+0x20>)
  402200:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
  402202:	4b04      	ldr	r3, [pc, #16]	; (402214 <udi_msc_disable+0x24>)
  402204:	4798      	blx	r3
  402206:	bd08      	pop	{r3, pc}
  402208:	20400af2 	.word	0x20400af2
  40220c:	20400014 	.word	0x20400014
  402210:	20400015 	.word	0x20400015
  402214:	00404ec5 	.word	0x00404ec5

00402218 <udi_msc_setup>:
	if (Udd_setup_is_in()) {
  402218:	4b22      	ldr	r3, [pc, #136]	; (4022a4 <udi_msc_setup+0x8c>)
  40221a:	781b      	ldrb	r3, [r3, #0]
  40221c:	f013 0f80 	tst.w	r3, #128	; 0x80
  402220:	d105      	bne.n	40222e <udi_msc_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  402222:	f003 0360 	and.w	r3, r3, #96	; 0x60
  402226:	2b20      	cmp	r3, #32
  402228:	d01a      	beq.n	402260 <udi_msc_setup+0x48>
	return false;	// Not supported request
  40222a:	2000      	movs	r0, #0
  40222c:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  40222e:	f003 0360 	and.w	r3, r3, #96	; 0x60
  402232:	2b20      	cmp	r3, #32
  402234:	d001      	beq.n	40223a <udi_msc_setup+0x22>
	return false;	// Not supported request
  402236:	2000      	movs	r0, #0
  402238:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  40223a:	4b1a      	ldr	r3, [pc, #104]	; (4022a4 <udi_msc_setup+0x8c>)
  40223c:	785b      	ldrb	r3, [r3, #1]
  40223e:	2bfe      	cmp	r3, #254	; 0xfe
  402240:	d128      	bne.n	402294 <udi_msc_setup+0x7c>
				if (1 != udd_g_ctrlreq.req.wLength)
  402242:	4b18      	ldr	r3, [pc, #96]	; (4022a4 <udi_msc_setup+0x8c>)
  402244:	88db      	ldrh	r3, [r3, #6]
  402246:	2b01      	cmp	r3, #1
  402248:	d001      	beq.n	40224e <udi_msc_setup+0x36>
					return false;	// Error for USB host
  40224a:	2000      	movs	r0, #0
  40224c:	4770      	bx	lr
				if (0 != udd_g_ctrlreq.req.wValue)
  40224e:	4b15      	ldr	r3, [pc, #84]	; (4022a4 <udi_msc_setup+0x8c>)
  402250:	885b      	ldrh	r3, [r3, #2]
  402252:	bb0b      	cbnz	r3, 402298 <udi_msc_setup+0x80>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
  402254:	4b13      	ldr	r3, [pc, #76]	; (4022a4 <udi_msc_setup+0x8c>)
  402256:	4a14      	ldr	r2, [pc, #80]	; (4022a8 <udi_msc_setup+0x90>)
  402258:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
  40225a:	2001      	movs	r0, #1
  40225c:	8198      	strh	r0, [r3, #12]
				return true;
  40225e:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  402260:	4b10      	ldr	r3, [pc, #64]	; (4022a4 <udi_msc_setup+0x8c>)
  402262:	785b      	ldrb	r3, [r3, #1]
  402264:	2bff      	cmp	r3, #255	; 0xff
  402266:	d119      	bne.n	40229c <udi_msc_setup+0x84>
				if (0 != udd_g_ctrlreq.req.wLength)
  402268:	4b0e      	ldr	r3, [pc, #56]	; (4022a4 <udi_msc_setup+0x8c>)
  40226a:	88db      	ldrh	r3, [r3, #6]
  40226c:	b9c3      	cbnz	r3, 4022a0 <udi_msc_setup+0x88>
				if (0 != udd_g_ctrlreq.req.wValue)
  40226e:	4b0d      	ldr	r3, [pc, #52]	; (4022a4 <udi_msc_setup+0x8c>)
  402270:	885b      	ldrh	r3, [r3, #2]
  402272:	b10b      	cbz	r3, 402278 <udi_msc_setup+0x60>
					return false;
  402274:	2000      	movs	r0, #0
  402276:	4770      	bx	lr
{
  402278:	b510      	push	{r4, lr}
				udi_msc_b_cbw_invalid = false;
  40227a:	4a0c      	ldr	r2, [pc, #48]	; (4022ac <udi_msc_setup+0x94>)
  40227c:	7013      	strb	r3, [r2, #0]
				udi_msc_b_trans_req = false;
  40227e:	4a0c      	ldr	r2, [pc, #48]	; (4022b0 <udi_msc_setup+0x98>)
  402280:	7013      	strb	r3, [r2, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
  402282:	2002      	movs	r0, #2
  402284:	4c0b      	ldr	r4, [pc, #44]	; (4022b4 <udi_msc_setup+0x9c>)
  402286:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
  402288:	2081      	movs	r0, #129	; 0x81
  40228a:	47a0      	blx	r4
				udi_msc_cbw_wait();
  40228c:	4b0a      	ldr	r3, [pc, #40]	; (4022b8 <udi_msc_setup+0xa0>)
  40228e:	4798      	blx	r3
				return true;
  402290:	2001      	movs	r0, #1
  402292:	bd10      	pop	{r4, pc}
	return false;	// Not supported request
  402294:	2000      	movs	r0, #0
  402296:	4770      	bx	lr
					return false;
  402298:	2000      	movs	r0, #0
  40229a:	4770      	bx	lr
	return false;	// Not supported request
  40229c:	2000      	movs	r0, #0
  40229e:	4770      	bx	lr
					return false;
  4022a0:	2000      	movs	r0, #0
  4022a2:	4770      	bx	lr
  4022a4:	20401068 	.word	0x20401068
  4022a8:	20400b20 	.word	0x20400b20
  4022ac:	20400af0 	.word	0x20400af0
  4022b0:	20400af2 	.word	0x20400af2
  4022b4:	004045f9 	.word	0x004045f9
  4022b8:	00401a99 	.word	0x00401a99

004022bc <udi_mass_storage_process_trans>:
{
  4022bc:	b510      	push	{r4, lr}
	if (!udi_msc_b_trans_req)
  4022be:	4b1d      	ldr	r3, [pc, #116]	; (402334 <udi_mass_storage_process_trans+0x78>)
  4022c0:	781c      	ldrb	r4, [r3, #0]
  4022c2:	2c00      	cmp	r4, #0
  4022c4:	d02e      	beq.n	402324 <udi_mass_storage_process_trans+0x68>
	udi_msc_b_trans_req = false;
  4022c6:	2300      	movs	r3, #0
  4022c8:	4a1a      	ldr	r2, [pc, #104]	; (402334 <udi_mass_storage_process_trans+0x78>)
  4022ca:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = false;
  4022cc:	4a1a      	ldr	r2, [pc, #104]	; (402338 <udi_mass_storage_process_trans+0x7c>)
  4022ce:	7013      	strb	r3, [r2, #0]
	if (udi_msc_b_read) {
  4022d0:	4b1a      	ldr	r3, [pc, #104]	; (40233c <udi_mass_storage_process_trans+0x80>)
  4022d2:	781b      	ldrb	r3, [r3, #0]
  4022d4:	b1a3      	cbz	r3, 402300 <udi_mass_storage_process_trans+0x44>
			status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
  4022d6:	4b1a      	ldr	r3, [pc, #104]	; (402340 <udi_mass_storage_process_trans+0x84>)
  4022d8:	881a      	ldrh	r2, [r3, #0]
  4022da:	4b1a      	ldr	r3, [pc, #104]	; (402344 <udi_mass_storage_process_trans+0x88>)
  4022dc:	6819      	ldr	r1, [r3, #0]
  4022de:	4b1a      	ldr	r3, [pc, #104]	; (402348 <udi_mass_storage_process_trans+0x8c>)
  4022e0:	7b58      	ldrb	r0, [r3, #13]
  4022e2:	4b1a      	ldr	r3, [pc, #104]	; (40234c <udi_mass_storage_process_trans+0x90>)
  4022e4:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
  4022e6:	4b14      	ldr	r3, [pc, #80]	; (402338 <udi_mass_storage_process_trans+0x7c>)
  4022e8:	781b      	ldrb	r3, [r3, #0]
  4022ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  4022ee:	b983      	cbnz	r3, 402312 <udi_mass_storage_process_trans+0x56>
	switch (status) {
  4022f0:	2802      	cmp	r0, #2
  4022f2:	d01c      	beq.n	40232e <udi_mass_storage_process_trans+0x72>
  4022f4:	2803      	cmp	r0, #3
  4022f6:	d017      	beq.n	402328 <udi_mass_storage_process_trans+0x6c>
  4022f8:	b180      	cbz	r0, 40231c <udi_mass_storage_process_trans+0x60>
		udi_msc_sense_fail_hardware();
  4022fa:	4b15      	ldr	r3, [pc, #84]	; (402350 <udi_mass_storage_process_trans+0x94>)
  4022fc:	4798      	blx	r3
		break;
  4022fe:	e00f      	b.n	402320 <udi_mass_storage_process_trans+0x64>
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
  402300:	4b0f      	ldr	r3, [pc, #60]	; (402340 <udi_mass_storage_process_trans+0x84>)
  402302:	881a      	ldrh	r2, [r3, #0]
  402304:	4b0f      	ldr	r3, [pc, #60]	; (402344 <udi_mass_storage_process_trans+0x88>)
  402306:	6819      	ldr	r1, [r3, #0]
  402308:	4b0f      	ldr	r3, [pc, #60]	; (402348 <udi_mass_storage_process_trans+0x8c>)
  40230a:	7b58      	ldrb	r0, [r3, #13]
  40230c:	4b11      	ldr	r3, [pc, #68]	; (402354 <udi_mass_storage_process_trans+0x98>)
  40230e:	4798      	blx	r3
  402310:	e7e9      	b.n	4022e6 <udi_mass_storage_process_trans+0x2a>
		udi_msc_b_reset_trans = false;
  402312:	2100      	movs	r1, #0
  402314:	4b08      	ldr	r3, [pc, #32]	; (402338 <udi_mass_storage_process_trans+0x7c>)
  402316:	7019      	strb	r1, [r3, #0]
		return true;
  402318:	4614      	mov	r4, r2
  40231a:	e003      	b.n	402324 <udi_mass_storage_process_trans+0x68>
		udi_msc_sense_pass();
  40231c:	4b0e      	ldr	r3, [pc, #56]	; (402358 <udi_mass_storage_process_trans+0x9c>)
  40231e:	4798      	blx	r3
	udi_msc_csw_process();
  402320:	4b0e      	ldr	r3, [pc, #56]	; (40235c <udi_mass_storage_process_trans+0xa0>)
  402322:	4798      	blx	r3
}
  402324:	4620      	mov	r0, r4
  402326:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_busy_or_change();
  402328:	4b0d      	ldr	r3, [pc, #52]	; (402360 <udi_mass_storage_process_trans+0xa4>)
  40232a:	4798      	blx	r3
		break;
  40232c:	e7f8      	b.n	402320 <udi_mass_storage_process_trans+0x64>
		udi_msc_sense_fail_not_present();
  40232e:	4b0d      	ldr	r3, [pc, #52]	; (402364 <udi_mass_storage_process_trans+0xa8>)
  402330:	4798      	blx	r3
		break;
  402332:	e7f5      	b.n	402320 <udi_mass_storage_process_trans+0x64>
  402334:	20400af2 	.word	0x20400af2
  402338:	20400015 	.word	0x20400015
  40233c:	20400af1 	.word	0x20400af1
  402340:	20400b1c 	.word	0x20400b1c
  402344:	20400aec 	.word	0x20400aec
  402348:	20400afc 	.word	0x20400afc
  40234c:	00401a19 	.word	0x00401a19
  402350:	00401cc1 	.word	0x00401cc1
  402354:	00401a49 	.word	0x00401a49
  402358:	00401d31 	.word	0x00401d31
  40235c:	00401be9 	.word	0x00401be9
  402360:	00401d09 	.word	0x00401d09
  402364:	00401d1d 	.word	0x00401d1d

00402368 <udi_msc_trans_block>:

//if (!udi_msc_trans_block(false,((nb_step % 2) == 0) ? sector_buf_1 : sector_buf_0, SD_MMC_BLOCK_SIZE,NULL))
//...................CIT..............
bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
  402368:	b530      	push	{r4, r5, lr}
  40236a:	b083      	sub	sp, #12
	//for(int i=0; i<5;i++)
	//printf("Read: %d block[%d]\t%c\t%d\t%x\t%d\r\n",b_read,i,block[i],block[i],block[i],block_size);
	
	if (!udi_msc_b_ack_trans)
  40236c:	4c1d      	ldr	r4, [pc, #116]	; (4023e4 <udi_msc_trans_block+0x7c>)
  40236e:	7824      	ldrb	r4, [r4, #0]
  402370:	f004 05ff 	and.w	r5, r4, #255	; 0xff
  402374:	b1a4      	cbz	r4, 4023a0 <udi_msc_trans_block+0x38>
  402376:	4614      	mov	r4, r2
  402378:	460a      	mov	r2, r1
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
  40237a:	2500      	movs	r5, #0
  40237c:	4919      	ldr	r1, [pc, #100]	; (4023e4 <udi_msc_trans_block+0x7c>)
  40237e:	700d      	strb	r5, [r1, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
  402380:	42a8      	cmp	r0, r5
  402382:	bf14      	ite	ne
  402384:	2081      	movne	r0, #129	; 0x81
  402386:	2002      	moveq	r0, #2
  402388:	b16b      	cbz	r3, 4023a6 <udi_msc_trans_block+0x3e>
  40238a:	9300      	str	r3, [sp, #0]
  40238c:	4623      	mov	r3, r4
  40238e:	2100      	movs	r1, #0
  402390:	4d15      	ldr	r5, [pc, #84]	; (4023e8 <udi_msc_trans_block+0x80>)
  402392:	47a8      	blx	r5
  402394:	4605      	mov	r5, r0
  402396:	b1e8      	cbz	r0, 4023d4 <udi_msc_trans_block+0x6c>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
  402398:	4b14      	ldr	r3, [pc, #80]	; (4023ec <udi_msc_trans_block+0x84>)
  40239a:	689a      	ldr	r2, [r3, #8]
  40239c:	1b12      	subs	r2, r2, r4
  40239e:	609a      	str	r2, [r3, #8]

    
	return true;
}
  4023a0:	4628      	mov	r0, r5
  4023a2:	b003      	add	sp, #12
  4023a4:	bd30      	pop	{r4, r5, pc}
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
  4023a6:	4b12      	ldr	r3, [pc, #72]	; (4023f0 <udi_msc_trans_block+0x88>)
  4023a8:	9300      	str	r3, [sp, #0]
  4023aa:	4623      	mov	r3, r4
  4023ac:	4629      	mov	r1, r5
  4023ae:	4d0e      	ldr	r5, [pc, #56]	; (4023e8 <udi_msc_trans_block+0x80>)
  4023b0:	47a8      	blx	r5
  4023b2:	b178      	cbz	r0, 4023d4 <udi_msc_trans_block+0x6c>
		while (!udi_msc_b_ack_trans);
  4023b4:	4a0b      	ldr	r2, [pc, #44]	; (4023e4 <udi_msc_trans_block+0x7c>)
  4023b6:	7813      	ldrb	r3, [r2, #0]
  4023b8:	2b00      	cmp	r3, #0
  4023ba:	d0fc      	beq.n	4023b6 <udi_msc_trans_block+0x4e>
		if (udi_msc_b_abort_trans) {
  4023bc:	4b0d      	ldr	r3, [pc, #52]	; (4023f4 <udi_msc_trans_block+0x8c>)
  4023be:	781b      	ldrb	r3, [r3, #0]
  4023c0:	b96b      	cbnz	r3, 4023de <udi_msc_trans_block+0x76>
		udi_msc_csw.dCSWDataResidue -= block_size;
  4023c2:	4b0a      	ldr	r3, [pc, #40]	; (4023ec <udi_msc_trans_block+0x84>)
  4023c4:	689a      	ldr	r2, [r3, #8]
  4023c6:	1b12      	subs	r2, r2, r4
  4023c8:	609a      	str	r2, [r3, #8]
		return (!udi_msc_b_abort_trans);
  4023ca:	4b0a      	ldr	r3, [pc, #40]	; (4023f4 <udi_msc_trans_block+0x8c>)
  4023cc:	781d      	ldrb	r5, [r3, #0]
  4023ce:	f085 0501 	eor.w	r5, r5, #1
  4023d2:	e7e5      	b.n	4023a0 <udi_msc_trans_block+0x38>
		udi_msc_b_ack_trans = true;
  4023d4:	2201      	movs	r2, #1
  4023d6:	4b03      	ldr	r3, [pc, #12]	; (4023e4 <udi_msc_trans_block+0x7c>)
  4023d8:	701a      	strb	r2, [r3, #0]
		return false;
  4023da:	2500      	movs	r5, #0
  4023dc:	e7e0      	b.n	4023a0 <udi_msc_trans_block+0x38>
			return false;
  4023de:	2500      	movs	r5, #0
  4023e0:	e7de      	b.n	4023a0 <udi_msc_trans_block+0x38>
  4023e2:	bf00      	nop
  4023e4:	20400014 	.word	0x20400014
  4023e8:	004042ed 	.word	0x004042ed
  4023ec:	20400018 	.word	0x20400018
  4023f0:	00401a7d 	.word	0x00401a7d
  4023f4:	20401066 	.word	0x20401066

004023f8 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  4023f8:	4b10      	ldr	r3, [pc, #64]	; (40243c <udc_next_desc_in_iface+0x44>)
  4023fa:	681b      	ldr	r3, [r3, #0]
  4023fc:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  4023fe:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  402400:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  402402:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  402404:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  402406:	4290      	cmp	r0, r2
  402408:	d211      	bcs.n	40242e <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40240a:	7843      	ldrb	r3, [r0, #1]
  40240c:	2b04      	cmp	r3, #4
  40240e:	d010      	beq.n	402432 <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  402410:	428b      	cmp	r3, r1
  402412:	d009      	beq.n	402428 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  402414:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  402416:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  402418:	4290      	cmp	r0, r2
  40241a:	d206      	bcs.n	40242a <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40241c:	7843      	ldrb	r3, [r0, #1]
  40241e:	2b04      	cmp	r3, #4
  402420:	d009      	beq.n	402436 <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  402422:	428b      	cmp	r3, r1
  402424:	d1f6      	bne.n	402414 <udc_next_desc_in_iface+0x1c>
  402426:	e007      	b.n	402438 <udc_next_desc_in_iface+0x40>
  402428:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  40242a:	2000      	movs	r0, #0
  40242c:	4770      	bx	lr
  40242e:	2000      	movs	r0, #0
  402430:	4770      	bx	lr
  402432:	2000      	movs	r0, #0
  402434:	4770      	bx	lr
  402436:	2000      	movs	r0, #0
}
  402438:	4770      	bx	lr
  40243a:	bf00      	nop
  40243c:	20400b44 	.word	0x20400b44

00402440 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  402440:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  402442:	4b03      	ldr	r3, [pc, #12]	; (402450 <udc_valid_address+0x10>)
  402444:	7898      	ldrb	r0, [r3, #2]
  402446:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40244a:	4b02      	ldr	r3, [pc, #8]	; (402454 <udc_valid_address+0x14>)
  40244c:	4798      	blx	r3
  40244e:	bd08      	pop	{r3, pc}
  402450:	20401068 	.word	0x20401068
  402454:	00404049 	.word	0x00404049

00402458 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  402458:	4b19      	ldr	r3, [pc, #100]	; (4024c0 <udc_update_iface_desc+0x68>)
  40245a:	781b      	ldrb	r3, [r3, #0]
  40245c:	b34b      	cbz	r3, 4024b2 <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40245e:	4b19      	ldr	r3, [pc, #100]	; (4024c4 <udc_update_iface_desc+0x6c>)
  402460:	681b      	ldr	r3, [r3, #0]
  402462:	681b      	ldr	r3, [r3, #0]
  402464:	791a      	ldrb	r2, [r3, #4]
  402466:	4282      	cmp	r2, r0
  402468:	d925      	bls.n	4024b6 <udc_update_iface_desc+0x5e>
{
  40246a:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  40246c:	4a16      	ldr	r2, [pc, #88]	; (4024c8 <udc_update_iface_desc+0x70>)
  40246e:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  402470:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  402472:	441c      	add	r4, r3
	while (ptr_end_desc >
  402474:	42a3      	cmp	r3, r4
  402476:	d220      	bcs.n	4024ba <udc_update_iface_desc+0x62>
  402478:	2500      	movs	r5, #0
  40247a:	2601      	movs	r6, #1
  40247c:	e007      	b.n	40248e <udc_update_iface_desc+0x36>
  40247e:	4a12      	ldr	r2, [pc, #72]	; (4024c8 <udc_update_iface_desc+0x70>)
  402480:	6013      	str	r3, [r2, #0]
  402482:	e00f      	b.n	4024a4 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  402484:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  402486:	4413      	add	r3, r2
  402488:	4635      	mov	r5, r6
	while (ptr_end_desc >
  40248a:	42a3      	cmp	r3, r4
  40248c:	d20c      	bcs.n	4024a8 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  40248e:	785a      	ldrb	r2, [r3, #1]
  402490:	2a04      	cmp	r2, #4
  402492:	d1f7      	bne.n	402484 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  402494:	789a      	ldrb	r2, [r3, #2]
  402496:	4282      	cmp	r2, r0
  402498:	d1f4      	bne.n	402484 <udc_update_iface_desc+0x2c>
  40249a:	78da      	ldrb	r2, [r3, #3]
  40249c:	428a      	cmp	r2, r1
  40249e:	d1f1      	bne.n	402484 <udc_update_iface_desc+0x2c>
  4024a0:	2d00      	cmp	r5, #0
  4024a2:	d1ec      	bne.n	40247e <udc_update_iface_desc+0x26>
				return true; // Interface found
  4024a4:	2001      	movs	r0, #1
  4024a6:	e002      	b.n	4024ae <udc_update_iface_desc+0x56>
  4024a8:	4a07      	ldr	r2, [pc, #28]	; (4024c8 <udc_update_iface_desc+0x70>)
  4024aa:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  4024ac:	2000      	movs	r0, #0
}
  4024ae:	bc70      	pop	{r4, r5, r6}
  4024b0:	4770      	bx	lr
		return false;
  4024b2:	2000      	movs	r0, #0
  4024b4:	4770      	bx	lr
		return false;
  4024b6:	2000      	movs	r0, #0
  4024b8:	4770      	bx	lr
	return false; // Interface not found
  4024ba:	2000      	movs	r0, #0
  4024bc:	e7f7      	b.n	4024ae <udc_update_iface_desc+0x56>
  4024be:	bf00      	nop
  4024c0:	20400b40 	.word	0x20400b40
  4024c4:	20400b44 	.word	0x20400b44
  4024c8:	20400b48 	.word	0x20400b48

004024cc <udc_iface_disable>:
{
  4024cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4024d0:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  4024d2:	2100      	movs	r1, #0
  4024d4:	4b13      	ldr	r3, [pc, #76]	; (402524 <udc_iface_disable+0x58>)
  4024d6:	4798      	blx	r3
  4024d8:	4680      	mov	r8, r0
  4024da:	b910      	cbnz	r0, 4024e2 <udc_iface_disable+0x16>
}
  4024dc:	4640      	mov	r0, r8
  4024de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4024e2:	4b11      	ldr	r3, [pc, #68]	; (402528 <udc_iface_disable+0x5c>)
  4024e4:	681b      	ldr	r3, [r3, #0]
  4024e6:	685b      	ldr	r3, [r3, #4]
  4024e8:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4024ec:	f8d9 300c 	ldr.w	r3, [r9, #12]
  4024f0:	4798      	blx	r3
  4024f2:	4601      	mov	r1, r0
  4024f4:	4620      	mov	r0, r4
  4024f6:	4b0b      	ldr	r3, [pc, #44]	; (402524 <udc_iface_disable+0x58>)
  4024f8:	4798      	blx	r3
  4024fa:	4680      	mov	r8, r0
  4024fc:	2800      	cmp	r0, #0
  4024fe:	d0ed      	beq.n	4024dc <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  402500:	4b0a      	ldr	r3, [pc, #40]	; (40252c <udc_iface_disable+0x60>)
  402502:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402504:	2605      	movs	r6, #5
  402506:	4d0a      	ldr	r5, [pc, #40]	; (402530 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  402508:	4f0a      	ldr	r7, [pc, #40]	; (402534 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40250a:	4631      	mov	r1, r6
  40250c:	4620      	mov	r0, r4
  40250e:	47a8      	blx	r5
			if (NULL == ep_desc) {
  402510:	4604      	mov	r4, r0
  402512:	b110      	cbz	r0, 40251a <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  402514:	7880      	ldrb	r0, [r0, #2]
  402516:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402518:	e7f7      	b.n	40250a <udc_iface_disable+0x3e>
	udi_api->disable();
  40251a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40251e:	4798      	blx	r3
	return true;
  402520:	e7dc      	b.n	4024dc <udc_iface_disable+0x10>
  402522:	bf00      	nop
  402524:	00402459 	.word	0x00402459
  402528:	20400b44 	.word	0x20400b44
  40252c:	20400b48 	.word	0x20400b48
  402530:	004023f9 	.word	0x004023f9
  402534:	0040409d 	.word	0x0040409d

00402538 <udc_iface_enable>:
{
  402538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40253c:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  40253e:	4b10      	ldr	r3, [pc, #64]	; (402580 <udc_iface_enable+0x48>)
  402540:	4798      	blx	r3
  402542:	4603      	mov	r3, r0
  402544:	b1c8      	cbz	r0, 40257a <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  402546:	4b0f      	ldr	r3, [pc, #60]	; (402584 <udc_iface_enable+0x4c>)
  402548:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40254a:	2605      	movs	r6, #5
  40254c:	4d0e      	ldr	r5, [pc, #56]	; (402588 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40254e:	4f0f      	ldr	r7, [pc, #60]	; (40258c <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402550:	4631      	mov	r1, r6
  402552:	4620      	mov	r0, r4
  402554:	47a8      	blx	r5
		if (NULL == ep_desc)
  402556:	4604      	mov	r4, r0
  402558:	b138      	cbz	r0, 40256a <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40255a:	8882      	ldrh	r2, [r0, #4]
  40255c:	78c1      	ldrb	r1, [r0, #3]
  40255e:	7880      	ldrb	r0, [r0, #2]
  402560:	47b8      	blx	r7
  402562:	4603      	mov	r3, r0
  402564:	2800      	cmp	r0, #0
  402566:	d1f3      	bne.n	402550 <udc_iface_enable+0x18>
  402568:	e007      	b.n	40257a <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  40256a:	4b09      	ldr	r3, [pc, #36]	; (402590 <udc_iface_enable+0x58>)
  40256c:	681b      	ldr	r3, [r3, #0]
  40256e:	685b      	ldr	r3, [r3, #4]
  402570:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  402574:	681b      	ldr	r3, [r3, #0]
  402576:	4798      	blx	r3
  402578:	4603      	mov	r3, r0
}
  40257a:	4618      	mov	r0, r3
  40257c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402580:	00402459 	.word	0x00402459
  402584:	20400b48 	.word	0x20400b48
  402588:	004023f9 	.word	0x004023f9
  40258c:	004043ed 	.word	0x004043ed
  402590:	20400b44 	.word	0x20400b44

00402594 <udc_start>:
{
  402594:	b508      	push	{r3, lr}
	udd_enable();
  402596:	4b01      	ldr	r3, [pc, #4]	; (40259c <udc_start+0x8>)
  402598:	4798      	blx	r3
  40259a:	bd08      	pop	{r3, pc}
  40259c:	00403f09 	.word	0x00403f09

004025a0 <udc_reset>:
{
  4025a0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  4025a2:	4b0d      	ldr	r3, [pc, #52]	; (4025d8 <udc_reset+0x38>)
  4025a4:	781b      	ldrb	r3, [r3, #0]
  4025a6:	b183      	cbz	r3, 4025ca <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4025a8:	4b0c      	ldr	r3, [pc, #48]	; (4025dc <udc_reset+0x3c>)
  4025aa:	681b      	ldr	r3, [r3, #0]
  4025ac:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4025ae:	791b      	ldrb	r3, [r3, #4]
  4025b0:	b15b      	cbz	r3, 4025ca <udc_reset+0x2a>
  4025b2:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  4025b4:	4e0a      	ldr	r6, [pc, #40]	; (4025e0 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4025b6:	4d09      	ldr	r5, [pc, #36]	; (4025dc <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  4025b8:	4620      	mov	r0, r4
  4025ba:	47b0      	blx	r6
				iface_num++) {
  4025bc:	3401      	adds	r4, #1
  4025be:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4025c0:	682b      	ldr	r3, [r5, #0]
  4025c2:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4025c4:	791b      	ldrb	r3, [r3, #4]
  4025c6:	42a3      	cmp	r3, r4
  4025c8:	d8f6      	bhi.n	4025b8 <udc_reset+0x18>
	udc_num_configuration = 0;
  4025ca:	2200      	movs	r2, #0
  4025cc:	4b02      	ldr	r3, [pc, #8]	; (4025d8 <udc_reset+0x38>)
  4025ce:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  4025d0:	2201      	movs	r2, #1
  4025d2:	4b04      	ldr	r3, [pc, #16]	; (4025e4 <udc_reset+0x44>)
  4025d4:	801a      	strh	r2, [r3, #0]
  4025d6:	bd70      	pop	{r4, r5, r6, pc}
  4025d8:	20400b40 	.word	0x20400b40
  4025dc:	20400b44 	.word	0x20400b44
  4025e0:	004024cd 	.word	0x004024cd
  4025e4:	20400b36 	.word	0x20400b36

004025e8 <udc_sof_notify>:
{
  4025e8:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  4025ea:	4b0d      	ldr	r3, [pc, #52]	; (402620 <udc_sof_notify+0x38>)
  4025ec:	781b      	ldrb	r3, [r3, #0]
  4025ee:	b1b3      	cbz	r3, 40261e <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4025f0:	4b0c      	ldr	r3, [pc, #48]	; (402624 <udc_sof_notify+0x3c>)
  4025f2:	681b      	ldr	r3, [r3, #0]
  4025f4:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  4025f6:	7912      	ldrb	r2, [r2, #4]
  4025f8:	b18a      	cbz	r2, 40261e <udc_sof_notify+0x36>
  4025fa:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4025fc:	4d09      	ldr	r5, [pc, #36]	; (402624 <udc_sof_notify+0x3c>)
  4025fe:	e006      	b.n	40260e <udc_sof_notify+0x26>
				iface_num++) {
  402600:	3401      	adds	r4, #1
  402602:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402604:	682b      	ldr	r3, [r5, #0]
  402606:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  402608:	7912      	ldrb	r2, [r2, #4]
  40260a:	42a2      	cmp	r2, r4
  40260c:	d907      	bls.n	40261e <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  40260e:	685b      	ldr	r3, [r3, #4]
  402610:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  402614:	691b      	ldr	r3, [r3, #16]
  402616:	2b00      	cmp	r3, #0
  402618:	d0f2      	beq.n	402600 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  40261a:	4798      	blx	r3
  40261c:	e7f0      	b.n	402600 <udc_sof_notify+0x18>
  40261e:	bd38      	pop	{r3, r4, r5, pc}
  402620:	20400b40 	.word	0x20400b40
  402624:	20400b44 	.word	0x20400b44

00402628 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  402628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  40262a:	4b8a      	ldr	r3, [pc, #552]	; (402854 <udc_process_setup+0x22c>)
  40262c:	2200      	movs	r2, #0
  40262e:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  402630:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  402632:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  402634:	781b      	ldrb	r3, [r3, #0]
  402636:	f013 0f80 	tst.w	r3, #128	; 0x80
  40263a:	d114      	bne.n	402666 <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  40263c:	f013 0f60 	tst.w	r3, #96	; 0x60
  402640:	f000 80d9 	beq.w	4027f6 <udc_process_setup+0x1ce>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  402644:	4b83      	ldr	r3, [pc, #524]	; (402854 <udc_process_setup+0x22c>)
  402646:	781b      	ldrb	r3, [r3, #0]
  402648:	f003 031f 	and.w	r3, r3, #31
  40264c:	2b01      	cmp	r3, #1
  40264e:	f000 8170 	beq.w	402932 <udc_process_setup+0x30a>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  402652:	4b80      	ldr	r3, [pc, #512]	; (402854 <udc_process_setup+0x22c>)
  402654:	781b      	ldrb	r3, [r3, #0]
  402656:	f003 031f 	and.w	r3, r3, #31
  40265a:	2b02      	cmp	r3, #2
  40265c:	f000 81cb 	beq.w	4029f6 <udc_process_setup+0x3ce>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  402660:	2300      	movs	r3, #0
#endif
}
  402662:	4618      	mov	r0, r3
  402664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  402666:	4a7b      	ldr	r2, [pc, #492]	; (402854 <udc_process_setup+0x22c>)
  402668:	88d2      	ldrh	r2, [r2, #6]
  40266a:	2a00      	cmp	r2, #0
  40266c:	f000 81ec 	beq.w	402a48 <udc_process_setup+0x420>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  402670:	f013 0f60 	tst.w	r3, #96	; 0x60
  402674:	d1e6      	bne.n	402644 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  402676:	f013 031f 	ands.w	r3, r3, #31
  40267a:	d106      	bne.n	40268a <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  40267c:	4975      	ldr	r1, [pc, #468]	; (402854 <udc_process_setup+0x22c>)
  40267e:	7849      	ldrb	r1, [r1, #1]
  402680:	2906      	cmp	r1, #6
  402682:	d014      	beq.n	4026ae <udc_process_setup+0x86>
  402684:	2908      	cmp	r1, #8
  402686:	d077      	beq.n	402778 <udc_process_setup+0x150>
  402688:	b151      	cbz	r1, 4026a0 <udc_process_setup+0x78>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  40268a:	2b01      	cmp	r3, #1
  40268c:	d07c      	beq.n	402788 <udc_process_setup+0x160>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  40268e:	2b02      	cmp	r3, #2
  402690:	d1d8      	bne.n	402644 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  402692:	4b70      	ldr	r3, [pc, #448]	; (402854 <udc_process_setup+0x22c>)
  402694:	785b      	ldrb	r3, [r3, #1]
  402696:	2b00      	cmp	r3, #0
  402698:	f000 809f 	beq.w	4027da <udc_process_setup+0x1b2>
	return false;
  40269c:	2300      	movs	r3, #0
  40269e:	e18c      	b.n	4029ba <udc_process_setup+0x392>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  4026a0:	2a02      	cmp	r2, #2
  4026a2:	d1d6      	bne.n	402652 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  4026a4:	2102      	movs	r1, #2
  4026a6:	486c      	ldr	r0, [pc, #432]	; (402858 <udc_process_setup+0x230>)
  4026a8:	4b6c      	ldr	r3, [pc, #432]	; (40285c <udc_process_setup+0x234>)
  4026aa:	4798      	blx	r3
  4026ac:	e0bf      	b.n	40282e <udc_process_setup+0x206>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4026ae:	4b69      	ldr	r3, [pc, #420]	; (402854 <udc_process_setup+0x22c>)
  4026b0:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  4026b2:	0a13      	lsrs	r3, r2, #8
  4026b4:	3b01      	subs	r3, #1
  4026b6:	2b0e      	cmp	r3, #14
  4026b8:	f200 817c 	bhi.w	4029b4 <udc_process_setup+0x38c>
  4026bc:	e8df f013 	tbh	[pc, r3, lsl #1]
  4026c0:	001d000f 	.word	0x001d000f
  4026c4:	017a0037 	.word	0x017a0037
  4026c8:	017a017a 	.word	0x017a017a
  4026cc:	017a017a 	.word	0x017a017a
  4026d0:	017a017a 	.word	0x017a017a
  4026d4:	017a017a 	.word	0x017a017a
  4026d8:	017a017a 	.word	0x017a017a
  4026dc:	002f      	.short	0x002f
				(uint8_t *) udc_config.confdev_lsfs,
  4026de:	4b60      	ldr	r3, [pc, #384]	; (402860 <udc_process_setup+0x238>)
  4026e0:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  4026e2:	7801      	ldrb	r1, [r0, #0]
  4026e4:	4b5d      	ldr	r3, [pc, #372]	; (40285c <udc_process_setup+0x234>)
  4026e6:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  4026e8:	4b5a      	ldr	r3, [pc, #360]	; (402854 <udc_process_setup+0x22c>)
  4026ea:	88da      	ldrh	r2, [r3, #6]
  4026ec:	899b      	ldrh	r3, [r3, #12]
  4026ee:	4293      	cmp	r3, r2
  4026f0:	f240 809d 	bls.w	40282e <udc_process_setup+0x206>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  4026f4:	4b57      	ldr	r3, [pc, #348]	; (402854 <udc_process_setup+0x22c>)
  4026f6:	819a      	strh	r2, [r3, #12]
  4026f8:	e099      	b.n	40282e <udc_process_setup+0x206>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4026fa:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  4026fc:	4b58      	ldr	r3, [pc, #352]	; (402860 <udc_process_setup+0x238>)
  4026fe:	681b      	ldr	r3, [r3, #0]
  402700:	7c5b      	ldrb	r3, [r3, #17]
  402702:	4293      	cmp	r3, r2
  402704:	d9a5      	bls.n	402652 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  402706:	4b56      	ldr	r3, [pc, #344]	; (402860 <udc_process_setup+0x238>)
  402708:	685b      	ldr	r3, [r3, #4]
  40270a:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  40270e:	8841      	ldrh	r1, [r0, #2]
  402710:	4b52      	ldr	r3, [pc, #328]	; (40285c <udc_process_setup+0x234>)
  402712:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  402714:	4b4f      	ldr	r3, [pc, #316]	; (402854 <udc_process_setup+0x22c>)
  402716:	689b      	ldr	r3, [r3, #8]
  402718:	2202      	movs	r2, #2
  40271a:	705a      	strb	r2, [r3, #1]
  40271c:	e7e4      	b.n	4026e8 <udc_process_setup+0xc0>
		if (udc_config.conf_bos == NULL) {
  40271e:	4b50      	ldr	r3, [pc, #320]	; (402860 <udc_process_setup+0x238>)
  402720:	6898      	ldr	r0, [r3, #8]
  402722:	2800      	cmp	r0, #0
  402724:	d095      	beq.n	402652 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  402726:	8841      	ldrh	r1, [r0, #2]
  402728:	4b4c      	ldr	r3, [pc, #304]	; (40285c <udc_process_setup+0x234>)
  40272a:	4798      	blx	r3
  40272c:	e7dc      	b.n	4026e8 <udc_process_setup+0xc0>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  40272e:	b2d2      	uxtb	r2, r2
  402730:	2a03      	cmp	r2, #3
  402732:	d887      	bhi.n	402644 <udc_process_setup+0x1c>
  402734:	e8df f012 	tbh	[pc, r2, lsl #1]
  402738:	000c0007 	.word	0x000c0007
  40273c:	0004018c 	.word	0x0004018c
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
  402740:	210c      	movs	r1, #12
		str = udc_get_string_serial_name();
  402742:	4a48      	ldr	r2, [pc, #288]	; (402864 <udc_process_setup+0x23c>)
  402744:	e006      	b.n	402754 <udc_process_setup+0x12c>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  402746:	2104      	movs	r1, #4
  402748:	4847      	ldr	r0, [pc, #284]	; (402868 <udc_process_setup+0x240>)
  40274a:	4b44      	ldr	r3, [pc, #272]	; (40285c <udc_process_setup+0x234>)
  40274c:	4798      	blx	r3
  40274e:	e7cb      	b.n	4026e8 <udc_process_setup+0xc0>
		str = udc_string_manufacturer_name;
  402750:	4a46      	ldr	r2, [pc, #280]	; (40286c <udc_process_setup+0x244>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  402752:	2109      	movs	r1, #9
  402754:	3a01      	subs	r2, #1
  402756:	4846      	ldr	r0, [pc, #280]	; (402870 <udc_process_setup+0x248>)
  402758:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  40275a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
  40275e:	f820 4f02 	strh.w	r4, [r0, #2]!
		for(i = 0; i < str_length; i++) {
  402762:	3301      	adds	r3, #1
  402764:	b2db      	uxtb	r3, r3
  402766:	4299      	cmp	r1, r3
  402768:	d8f7      	bhi.n	40275a <udc_process_setup+0x132>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  40276a:	0049      	lsls	r1, r1, #1
  40276c:	3102      	adds	r1, #2
  40276e:	4840      	ldr	r0, [pc, #256]	; (402870 <udc_process_setup+0x248>)
  402770:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
  402772:	4b3a      	ldr	r3, [pc, #232]	; (40285c <udc_process_setup+0x234>)
  402774:	4798      	blx	r3
  402776:	e7b7      	b.n	4026e8 <udc_process_setup+0xc0>
	if (udd_g_ctrlreq.req.wLength != 1) {
  402778:	2a01      	cmp	r2, #1
  40277a:	f47f af6a 	bne.w	402652 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
  40277e:	2101      	movs	r1, #1
  402780:	483c      	ldr	r0, [pc, #240]	; (402874 <udc_process_setup+0x24c>)
  402782:	4b36      	ldr	r3, [pc, #216]	; (40285c <udc_process_setup+0x234>)
  402784:	4798      	blx	r3
  402786:	e052      	b.n	40282e <udc_process_setup+0x206>
			switch (udd_g_ctrlreq.req.bRequest) {
  402788:	4932      	ldr	r1, [pc, #200]	; (402854 <udc_process_setup+0x22c>)
  40278a:	7849      	ldrb	r1, [r1, #1]
  40278c:	290a      	cmp	r1, #10
  40278e:	f47f af7e 	bne.w	40268e <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  402792:	2a01      	cmp	r2, #1
  402794:	f040 80cd 	bne.w	402932 <udc_process_setup+0x30a>
	if (!udc_num_configuration) {
  402798:	4b36      	ldr	r3, [pc, #216]	; (402874 <udc_process_setup+0x24c>)
  40279a:	781b      	ldrb	r3, [r3, #0]
  40279c:	2b00      	cmp	r3, #0
  40279e:	f000 80c8 	beq.w	402932 <udc_process_setup+0x30a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4027a2:	4b2c      	ldr	r3, [pc, #176]	; (402854 <udc_process_setup+0x22c>)
  4027a4:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4027a6:	4b34      	ldr	r3, [pc, #208]	; (402878 <udc_process_setup+0x250>)
  4027a8:	681d      	ldr	r5, [r3, #0]
  4027aa:	682b      	ldr	r3, [r5, #0]
  4027ac:	791b      	ldrb	r3, [r3, #4]
  4027ae:	42a3      	cmp	r3, r4
  4027b0:	f240 80bf 	bls.w	402932 <udc_process_setup+0x30a>
	if (!udc_update_iface_desc(iface_num, 0)) {
  4027b4:	2100      	movs	r1, #0
  4027b6:	4620      	mov	r0, r4
  4027b8:	4b30      	ldr	r3, [pc, #192]	; (40287c <udc_process_setup+0x254>)
  4027ba:	4798      	blx	r3
  4027bc:	2800      	cmp	r0, #0
  4027be:	f43f af41 	beq.w	402644 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4027c2:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  4027c4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  4027c8:	68db      	ldr	r3, [r3, #12]
  4027ca:	4798      	blx	r3
  4027cc:	4b2c      	ldr	r3, [pc, #176]	; (402880 <udc_process_setup+0x258>)
  4027ce:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  4027d0:	2101      	movs	r1, #1
  4027d2:	4618      	mov	r0, r3
  4027d4:	4b21      	ldr	r3, [pc, #132]	; (40285c <udc_process_setup+0x234>)
  4027d6:	4798      	blx	r3
  4027d8:	e029      	b.n	40282e <udc_process_setup+0x206>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  4027da:	2a02      	cmp	r2, #2
  4027dc:	f47f af39 	bne.w	402652 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  4027e0:	4b1c      	ldr	r3, [pc, #112]	; (402854 <udc_process_setup+0x22c>)
  4027e2:	7918      	ldrb	r0, [r3, #4]
  4027e4:	4b27      	ldr	r3, [pc, #156]	; (402884 <udc_process_setup+0x25c>)
  4027e6:	4798      	blx	r3
  4027e8:	4b27      	ldr	r3, [pc, #156]	; (402888 <udc_process_setup+0x260>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  4027ea:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  4027ec:	2102      	movs	r1, #2
  4027ee:	4618      	mov	r0, r3
  4027f0:	4b1a      	ldr	r3, [pc, #104]	; (40285c <udc_process_setup+0x234>)
  4027f2:	4798      	blx	r3
  4027f4:	e01b      	b.n	40282e <udc_process_setup+0x206>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4027f6:	f013 031f 	ands.w	r3, r3, #31
  4027fa:	f040 8083 	bne.w	402904 <udc_process_setup+0x2dc>
			switch (udd_g_ctrlreq.req.bRequest) {
  4027fe:	4a15      	ldr	r2, [pc, #84]	; (402854 <udc_process_setup+0x22c>)
  402800:	7852      	ldrb	r2, [r2, #1]
  402802:	3a01      	subs	r2, #1
  402804:	2a08      	cmp	r2, #8
  402806:	d87d      	bhi.n	402904 <udc_process_setup+0x2dc>
  402808:	e8df f012 	tbh	[pc, r2, lsl #1]
  40280c:	007c0013 	.word	0x007c0013
  402810:	007c00d6 	.word	0x007c00d6
  402814:	007c0009 	.word	0x007c0009
  402818:	007c007c 	.word	0x007c007c
  40281c:	0042      	.short	0x0042
	if (udd_g_ctrlreq.req.wLength) {
  40281e:	4b0d      	ldr	r3, [pc, #52]	; (402854 <udc_process_setup+0x22c>)
  402820:	88db      	ldrh	r3, [r3, #6]
  402822:	2b00      	cmp	r3, #0
  402824:	f47f af15 	bne.w	402652 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
  402828:	4a18      	ldr	r2, [pc, #96]	; (40288c <udc_process_setup+0x264>)
  40282a:	4b0a      	ldr	r3, [pc, #40]	; (402854 <udc_process_setup+0x22c>)
  40282c:	611a      	str	r2, [r3, #16]
			return true;
  40282e:	2301      	movs	r3, #1
  402830:	e717      	b.n	402662 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  402832:	4b08      	ldr	r3, [pc, #32]	; (402854 <udc_process_setup+0x22c>)
  402834:	88db      	ldrh	r3, [r3, #6]
  402836:	2b00      	cmp	r3, #0
  402838:	f47f af0b 	bne.w	402652 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  40283c:	4b05      	ldr	r3, [pc, #20]	; (402854 <udc_process_setup+0x22c>)
  40283e:	885b      	ldrh	r3, [r3, #2]
  402840:	2b01      	cmp	r3, #1
  402842:	f47f af06 	bne.w	402652 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  402846:	4a04      	ldr	r2, [pc, #16]	; (402858 <udc_process_setup+0x230>)
  402848:	8813      	ldrh	r3, [r2, #0]
  40284a:	f023 0302 	bic.w	r3, r3, #2
  40284e:	8013      	strh	r3, [r2, #0]
  402850:	e7ed      	b.n	40282e <udc_process_setup+0x206>
  402852:	bf00      	nop
  402854:	20401068 	.word	0x20401068
  402858:	20400b36 	.word	0x20400b36
  40285c:	00404091 	.word	0x00404091
  402860:	2040004c 	.word	0x2040004c
  402864:	004081ec 	.word	0x004081ec
  402868:	204000b4 	.word	0x204000b4
  40286c:	204000b8 	.word	0x204000b8
  402870:	20400098 	.word	0x20400098
  402874:	20400b40 	.word	0x20400b40
  402878:	20400b44 	.word	0x20400b44
  40287c:	00402459 	.word	0x00402459
  402880:	20400b3c 	.word	0x20400b3c
  402884:	004040f9 	.word	0x004040f9
  402888:	20400b38 	.word	0x20400b38
  40288c:	00402441 	.word	0x00402441
	if (udd_g_ctrlreq.req.wLength) {
  402890:	4b71      	ldr	r3, [pc, #452]	; (402a58 <udc_process_setup+0x430>)
  402892:	88db      	ldrh	r3, [r3, #6]
  402894:	2b00      	cmp	r3, #0
  402896:	f47f aedc 	bne.w	402652 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
  40289a:	4b70      	ldr	r3, [pc, #448]	; (402a5c <udc_process_setup+0x434>)
  40289c:	4798      	blx	r3
  40289e:	2800      	cmp	r0, #0
  4028a0:	f43f aed0 	beq.w	402644 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  4028a4:	4b6c      	ldr	r3, [pc, #432]	; (402a58 <udc_process_setup+0x430>)
  4028a6:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  4028a8:	4b6d      	ldr	r3, [pc, #436]	; (402a60 <udc_process_setup+0x438>)
  4028aa:	681b      	ldr	r3, [r3, #0]
  4028ac:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  4028ae:	429a      	cmp	r2, r3
  4028b0:	f73f aec8 	bgt.w	402644 <udc_process_setup+0x1c>
	udc_reset();
  4028b4:	4b6b      	ldr	r3, [pc, #428]	; (402a64 <udc_process_setup+0x43c>)
  4028b6:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  4028b8:	4b67      	ldr	r3, [pc, #412]	; (402a58 <udc_process_setup+0x430>)
  4028ba:	789a      	ldrb	r2, [r3, #2]
  4028bc:	4b6a      	ldr	r3, [pc, #424]	; (402a68 <udc_process_setup+0x440>)
  4028be:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
  4028c0:	2a00      	cmp	r2, #0
  4028c2:	d0b4      	beq.n	40282e <udc_process_setup+0x206>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  4028c4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  4028c8:	4413      	add	r3, r2
  4028ca:	4a65      	ldr	r2, [pc, #404]	; (402a60 <udc_process_setup+0x438>)
  4028cc:	6852      	ldr	r2, [r2, #4]
  4028ce:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  4028d2:	4966      	ldr	r1, [pc, #408]	; (402a6c <udc_process_setup+0x444>)
  4028d4:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4028d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4028da:	791b      	ldrb	r3, [r3, #4]
  4028dc:	2b00      	cmp	r3, #0
  4028de:	d0a6      	beq.n	40282e <udc_process_setup+0x206>
  4028e0:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  4028e2:	4626      	mov	r6, r4
  4028e4:	4d62      	ldr	r5, [pc, #392]	; (402a70 <udc_process_setup+0x448>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4028e6:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  4028e8:	4631      	mov	r1, r6
  4028ea:	4620      	mov	r0, r4
  4028ec:	47a8      	blx	r5
  4028ee:	2800      	cmp	r0, #0
  4028f0:	f43f aea8 	beq.w	402644 <udc_process_setup+0x1c>
			iface_num++) {
  4028f4:	3401      	adds	r4, #1
  4028f6:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4028f8:	683b      	ldr	r3, [r7, #0]
  4028fa:	681b      	ldr	r3, [r3, #0]
  4028fc:	791b      	ldrb	r3, [r3, #4]
  4028fe:	42a3      	cmp	r3, r4
  402900:	d8f2      	bhi.n	4028e8 <udc_process_setup+0x2c0>
  402902:	e794      	b.n	40282e <udc_process_setup+0x206>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  402904:	2b01      	cmp	r3, #1
  402906:	d00a      	beq.n	40291e <udc_process_setup+0x2f6>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  402908:	2b02      	cmp	r3, #2
  40290a:	f47f ae9b 	bne.w	402644 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  40290e:	4b52      	ldr	r3, [pc, #328]	; (402a58 <udc_process_setup+0x430>)
  402910:	785b      	ldrb	r3, [r3, #1]
  402912:	2b01      	cmp	r3, #1
  402914:	d02b      	beq.n	40296e <udc_process_setup+0x346>
  402916:	2b03      	cmp	r3, #3
  402918:	d039      	beq.n	40298e <udc_process_setup+0x366>
	return false;
  40291a:	2300      	movs	r3, #0
  40291c:	e04d      	b.n	4029ba <udc_process_setup+0x392>
			switch (udd_g_ctrlreq.req.bRequest) {
  40291e:	4a4e      	ldr	r2, [pc, #312]	; (402a58 <udc_process_setup+0x430>)
  402920:	7852      	ldrb	r2, [r2, #1]
  402922:	2a0b      	cmp	r2, #11
  402924:	d1f0      	bne.n	402908 <udc_process_setup+0x2e0>
	if (udd_g_ctrlreq.req.wLength) {
  402926:	4b4c      	ldr	r3, [pc, #304]	; (402a58 <udc_process_setup+0x430>)
  402928:	88db      	ldrh	r3, [r3, #6]
  40292a:	b913      	cbnz	r3, 402932 <udc_process_setup+0x30a>
	if (!udc_num_configuration) {
  40292c:	4b4e      	ldr	r3, [pc, #312]	; (402a68 <udc_process_setup+0x440>)
  40292e:	781b      	ldrb	r3, [r3, #0]
  402930:	b973      	cbnz	r3, 402950 <udc_process_setup+0x328>
	if (0 == udc_num_configuration) {
  402932:	4b4d      	ldr	r3, [pc, #308]	; (402a68 <udc_process_setup+0x440>)
  402934:	781b      	ldrb	r3, [r3, #0]
  402936:	2b00      	cmp	r3, #0
  402938:	f000 8088 	beq.w	402a4c <udc_process_setup+0x424>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40293c:	4b46      	ldr	r3, [pc, #280]	; (402a58 <udc_process_setup+0x430>)
  40293e:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  402940:	4b4a      	ldr	r3, [pc, #296]	; (402a6c <udc_process_setup+0x444>)
  402942:	681d      	ldr	r5, [r3, #0]
  402944:	682b      	ldr	r3, [r5, #0]
  402946:	791b      	ldrb	r3, [r3, #4]
  402948:	42a3      	cmp	r3, r4
  40294a:	d83a      	bhi.n	4029c2 <udc_process_setup+0x39a>
	return false;
  40294c:	2300      	movs	r3, #0
  40294e:	e688      	b.n	402662 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  402950:	4b41      	ldr	r3, [pc, #260]	; (402a58 <udc_process_setup+0x430>)
  402952:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  402954:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  402956:	4620      	mov	r0, r4
  402958:	4b46      	ldr	r3, [pc, #280]	; (402a74 <udc_process_setup+0x44c>)
  40295a:	4798      	blx	r3
  40295c:	2800      	cmp	r0, #0
  40295e:	f43f ae71 	beq.w	402644 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  402962:	b2e9      	uxtb	r1, r5
  402964:	4620      	mov	r0, r4
  402966:	4b42      	ldr	r3, [pc, #264]	; (402a70 <udc_process_setup+0x448>)
  402968:	4798      	blx	r3
  40296a:	4603      	mov	r3, r0
  40296c:	e025      	b.n	4029ba <udc_process_setup+0x392>
	if (udd_g_ctrlreq.req.wLength) {
  40296e:	4b3a      	ldr	r3, [pc, #232]	; (402a58 <udc_process_setup+0x430>)
  402970:	88db      	ldrh	r3, [r3, #6]
  402972:	2b00      	cmp	r3, #0
  402974:	f47f ae6d 	bne.w	402652 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  402978:	4b37      	ldr	r3, [pc, #220]	; (402a58 <udc_process_setup+0x430>)
  40297a:	885b      	ldrh	r3, [r3, #2]
  40297c:	2b00      	cmp	r3, #0
  40297e:	f47f ae68 	bne.w	402652 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  402982:	4b35      	ldr	r3, [pc, #212]	; (402a58 <udc_process_setup+0x430>)
  402984:	7918      	ldrb	r0, [r3, #4]
  402986:	4b3c      	ldr	r3, [pc, #240]	; (402a78 <udc_process_setup+0x450>)
  402988:	4798      	blx	r3
  40298a:	4603      	mov	r3, r0
  40298c:	e015      	b.n	4029ba <udc_process_setup+0x392>
	if (udd_g_ctrlreq.req.wLength) {
  40298e:	4b32      	ldr	r3, [pc, #200]	; (402a58 <udc_process_setup+0x430>)
  402990:	88db      	ldrh	r3, [r3, #6]
  402992:	2b00      	cmp	r3, #0
  402994:	f47f ae5d 	bne.w	402652 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  402998:	4b2f      	ldr	r3, [pc, #188]	; (402a58 <udc_process_setup+0x430>)
  40299a:	885b      	ldrh	r3, [r3, #2]
  40299c:	2b00      	cmp	r3, #0
  40299e:	f47f ae58 	bne.w	402652 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  4029a2:	4c2d      	ldr	r4, [pc, #180]	; (402a58 <udc_process_setup+0x430>)
  4029a4:	7920      	ldrb	r0, [r4, #4]
  4029a6:	4b35      	ldr	r3, [pc, #212]	; (402a7c <udc_process_setup+0x454>)
  4029a8:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4029aa:	7920      	ldrb	r0, [r4, #4]
  4029ac:	4b34      	ldr	r3, [pc, #208]	; (402a80 <udc_process_setup+0x458>)
  4029ae:	4798      	blx	r3
  4029b0:	4603      	mov	r3, r0
  4029b2:	e002      	b.n	4029ba <udc_process_setup+0x392>
		return false;
  4029b4:	2300      	movs	r3, #0
  4029b6:	e000      	b.n	4029ba <udc_process_setup+0x392>
				return udc_req_std_dev_set_feature();
  4029b8:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  4029ba:	2b00      	cmp	r3, #0
  4029bc:	f47f ae51 	bne.w	402662 <udc_process_setup+0x3a>
  4029c0:	e640      	b.n	402644 <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  4029c2:	2100      	movs	r1, #0
  4029c4:	4620      	mov	r0, r4
  4029c6:	4b2f      	ldr	r3, [pc, #188]	; (402a84 <udc_process_setup+0x45c>)
  4029c8:	4798      	blx	r3
  4029ca:	2800      	cmp	r0, #0
  4029cc:	f43f ae41 	beq.w	402652 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4029d0:	686b      	ldr	r3, [r5, #4]
  4029d2:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4029d6:	68eb      	ldr	r3, [r5, #12]
  4029d8:	4798      	blx	r3
  4029da:	4601      	mov	r1, r0
  4029dc:	4620      	mov	r0, r4
  4029de:	4b29      	ldr	r3, [pc, #164]	; (402a84 <udc_process_setup+0x45c>)
  4029e0:	4798      	blx	r3
  4029e2:	2800      	cmp	r0, #0
  4029e4:	f43f ae35 	beq.w	402652 <udc_process_setup+0x2a>
	return udi_api->setup();
  4029e8:	68ab      	ldr	r3, [r5, #8]
  4029ea:	4798      	blx	r3
		if (udc_req_iface()) {
  4029ec:	4603      	mov	r3, r0
  4029ee:	2800      	cmp	r0, #0
  4029f0:	f47f ae37 	bne.w	402662 <udc_process_setup+0x3a>
  4029f4:	e62d      	b.n	402652 <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  4029f6:	4b1c      	ldr	r3, [pc, #112]	; (402a68 <udc_process_setup+0x440>)
  4029f8:	781b      	ldrb	r3, [r3, #0]
  4029fa:	b30b      	cbz	r3, 402a40 <udc_process_setup+0x418>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4029fc:	4b1b      	ldr	r3, [pc, #108]	; (402a6c <udc_process_setup+0x444>)
  4029fe:	681a      	ldr	r2, [r3, #0]
  402a00:	6813      	ldr	r3, [r2, #0]
  402a02:	791b      	ldrb	r3, [r3, #4]
  402a04:	b1f3      	cbz	r3, 402a44 <udc_process_setup+0x41c>
  402a06:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  402a08:	4e1e      	ldr	r6, [pc, #120]	; (402a84 <udc_process_setup+0x45c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402a0a:	4f18      	ldr	r7, [pc, #96]	; (402a6c <udc_process_setup+0x444>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  402a0c:	6853      	ldr	r3, [r2, #4]
  402a0e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  402a12:	68eb      	ldr	r3, [r5, #12]
  402a14:	4798      	blx	r3
  402a16:	4601      	mov	r1, r0
  402a18:	4620      	mov	r0, r4
  402a1a:	47b0      	blx	r6
  402a1c:	4603      	mov	r3, r0
  402a1e:	2800      	cmp	r0, #0
  402a20:	f43f ae1f 	beq.w	402662 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  402a24:	68ab      	ldr	r3, [r5, #8]
  402a26:	4798      	blx	r3
  402a28:	4603      	mov	r3, r0
  402a2a:	2800      	cmp	r0, #0
  402a2c:	f47f ae19 	bne.w	402662 <udc_process_setup+0x3a>
			iface_num++) {
  402a30:	3401      	adds	r4, #1
  402a32:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402a34:	683a      	ldr	r2, [r7, #0]
  402a36:	6811      	ldr	r1, [r2, #0]
  402a38:	7909      	ldrb	r1, [r1, #4]
  402a3a:	42a1      	cmp	r1, r4
  402a3c:	d8e6      	bhi.n	402a0c <udc_process_setup+0x3e4>
  402a3e:	e610      	b.n	402662 <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  402a40:	2300      	movs	r3, #0
  402a42:	e60e      	b.n	402662 <udc_process_setup+0x3a>
	return false;
  402a44:	2300      	movs	r3, #0
  402a46:	e60c      	b.n	402662 <udc_process_setup+0x3a>
			return false; // Error from USB host
  402a48:	2300      	movs	r3, #0
  402a4a:	e60a      	b.n	402662 <udc_process_setup+0x3a>
	return false;
  402a4c:	2300      	movs	r3, #0
  402a4e:	e608      	b.n	402662 <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  402a50:	2103      	movs	r1, #3
		str = udc_string_product_name;
  402a52:	4a0d      	ldr	r2, [pc, #52]	; (402a88 <udc_process_setup+0x460>)
  402a54:	e67e      	b.n	402754 <udc_process_setup+0x12c>
  402a56:	bf00      	nop
  402a58:	20401068 	.word	0x20401068
  402a5c:	00404071 	.word	0x00404071
  402a60:	2040004c 	.word	0x2040004c
  402a64:	004025a1 	.word	0x004025a1
  402a68:	20400b40 	.word	0x20400b40
  402a6c:	20400b44 	.word	0x20400b44
  402a70:	00402539 	.word	0x00402539
  402a74:	004024cd 	.word	0x004024cd
  402a78:	00404211 	.word	0x00404211
  402a7c:	004045f9 	.word	0x004045f9
  402a80:	0040410d 	.word	0x0040410d
  402a84:	00402459 	.word	0x00402459
  402a88:	204000c4 	.word	0x204000c4

00402a8c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  402a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402a8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402a92:	4b98      	ldr	r3, [pc, #608]	; (402cf4 <board_init+0x268>)
  402a94:	605a      	str	r2, [r3, #4]
  402a96:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  402a9a:	4f97      	ldr	r7, [pc, #604]	; (402cf8 <board_init+0x26c>)
  402a9c:	4638      	mov	r0, r7
  402a9e:	4d97      	ldr	r5, [pc, #604]	; (402cfc <board_init+0x270>)
  402aa0:	47a8      	blx	r5
	dw_region_attr =
  402aa2:	4e97      	ldr	r6, [pc, #604]	; (402d00 <board_init+0x274>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402aa4:	ea40 0106 	orr.w	r1, r0, r6
  402aa8:	2011      	movs	r0, #17
  402aaa:	4c96      	ldr	r4, [pc, #600]	; (402d04 <board_init+0x278>)
  402aac:	47a0      	blx	r4
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  402aae:	4896      	ldr	r0, [pc, #600]	; (402d08 <board_init+0x27c>)
  402ab0:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402ab2:	4996      	ldr	r1, [pc, #600]	; (402d0c <board_init+0x280>)
  402ab4:	4301      	orrs	r1, r0
  402ab6:	4896      	ldr	r0, [pc, #600]	; (402d10 <board_init+0x284>)
  402ab8:	47a0      	blx	r4
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  402aba:	4638      	mov	r0, r7
  402abc:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402abe:	ea40 0106 	orr.w	r1, r0, r6
  402ac2:	4894      	ldr	r0, [pc, #592]	; (402d14 <board_init+0x288>)
  402ac4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  402ac6:	4894      	ldr	r0, [pc, #592]	; (402d18 <board_init+0x28c>)
  402ac8:	47a8      	blx	r5
	dw_region_attr =
  402aca:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  402ace:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402ad2:	ea40 0106 	orr.w	r1, r0, r6
  402ad6:	4891      	ldr	r0, [pc, #580]	; (402d1c <board_init+0x290>)
  402ad8:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  402ada:	4891      	ldr	r0, [pc, #580]	; (402d20 <board_init+0x294>)
  402adc:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402ade:	ea40 0106 	orr.w	r1, r0, r6
  402ae2:	4890      	ldr	r0, [pc, #576]	; (402d24 <board_init+0x298>)
  402ae4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  402ae6:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  402aea:	47a8      	blx	r5
	dw_region_attr = MPU_AP_FULL_ACCESS |
  402aec:	4e8e      	ldr	r6, [pc, #568]	; (402d28 <board_init+0x29c>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402aee:	ea40 0106 	orr.w	r1, r0, r6
  402af2:	488e      	ldr	r0, [pc, #568]	; (402d2c <board_init+0x2a0>)
  402af4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  402af6:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  402afa:	47a8      	blx	r5
	dw_region_attr =
  402afc:	4f8c      	ldr	r7, [pc, #560]	; (402d30 <board_init+0x2a4>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402afe:	ea40 0107 	orr.w	r1, r0, r7
  402b02:	488c      	ldr	r0, [pc, #560]	; (402d34 <board_init+0x2a8>)
  402b04:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  402b06:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  402b0a:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402b0c:	498a      	ldr	r1, [pc, #552]	; (402d38 <board_init+0x2ac>)
  402b0e:	4301      	orrs	r1, r0
  402b10:	488a      	ldr	r0, [pc, #552]	; (402d3c <board_init+0x2b0>)
  402b12:	47a0      	blx	r4
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  402b14:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  402b18:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402b1a:	ea40 0107 	orr.w	r1, r0, r7
  402b1e:	4888      	ldr	r0, [pc, #544]	; (402d40 <board_init+0x2b4>)
  402b20:	47a0      	blx	r4
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  402b22:	4888      	ldr	r0, [pc, #544]	; (402d44 <board_init+0x2b8>)
  402b24:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  402b26:	ea40 0106 	orr.w	r1, r0, r6
  402b2a:	4887      	ldr	r0, [pc, #540]	; (402d48 <board_init+0x2bc>)
  402b2c:	47a0      	blx	r4
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  402b2e:	4c87      	ldr	r4, [pc, #540]	; (402d4c <board_init+0x2c0>)
  402b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402b32:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  402b36:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  402b38:	2005      	movs	r0, #5
  402b3a:	4b85      	ldr	r3, [pc, #532]	; (402d50 <board_init+0x2c4>)
  402b3c:	4798      	blx	r3
  __ASM volatile ("dsb");
  402b3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402b42:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402b46:	4b83      	ldr	r3, [pc, #524]	; (402d54 <board_init+0x2c8>)
  402b48:	4a83      	ldr	r2, [pc, #524]	; (402d58 <board_init+0x2cc>)
  402b4a:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402b4c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  402b50:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  402b52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402b56:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  402b5a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  402b5e:	f023 0301 	bic.w	r3, r3, #1
  402b62:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  402b66:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  402b6a:	f023 0301 	bic.w	r3, r3, #1
  402b6e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  402b72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402b76:	f3bf 8f6f 	isb	sy
	pmc_enable_periph_clk(ul_id);
  402b7a:	200a      	movs	r0, #10
  402b7c:	4c77      	ldr	r4, [pc, #476]	; (402d5c <board_init+0x2d0>)
  402b7e:	47a0      	blx	r4
  402b80:	200b      	movs	r0, #11
  402b82:	47a0      	blx	r4
  402b84:	200c      	movs	r0, #12
  402b86:	47a0      	blx	r4
  402b88:	2010      	movs	r0, #16
  402b8a:	47a0      	blx	r4
  402b8c:	2011      	movs	r0, #17
  402b8e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402b90:	4b73      	ldr	r3, [pc, #460]	; (402d60 <board_init+0x2d4>)
  402b92:	f44f 7280 	mov.w	r2, #256	; 0x100
  402b96:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402b98:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402b9c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402b9e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  402ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402ba6:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402ba8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  402bac:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402bae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402bb2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402bb4:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  402bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402bba:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402bbc:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  402bc0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402bc2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402bc4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  402bc8:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  402bca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402bce:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402bd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  402bd6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402bda:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402bdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402be0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402be2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402be8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402bea:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  402bee:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402bf0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402bf2:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  402bf6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402bf8:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  402bfa:	495a      	ldr	r1, [pc, #360]	; (402d64 <board_init+0x2d8>)
  402bfc:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
  402c00:	f042 0210 	orr.w	r2, r2, #16
  402c04:	f8c1 2114 	str.w	r2, [r1, #276]	; 0x114
		base->PIO_PUDR = mask;
  402c08:	4a57      	ldr	r2, [pc, #348]	; (402d68 <board_init+0x2dc>)
  402c0a:	2110      	movs	r1, #16
  402c0c:	6611      	str	r1, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402c0e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  402c12:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  402c14:	6251      	str	r1, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402c16:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  402c1a:	6f10      	ldr	r0, [r2, #112]	; 0x70
  402c1c:	4308      	orrs	r0, r1
  402c1e:	6710      	str	r0, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  402c20:	6f50      	ldr	r0, [r2, #116]	; 0x74
  402c22:	4308      	orrs	r0, r1
  402c24:	6750      	str	r0, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402c26:	6051      	str	r1, [r2, #4]
		base->PIO_PUDR = mask;
  402c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402c2c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402c2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402c32:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402c34:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402c36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402c3a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402c3c:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
  402c40:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  402c42:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402c44:	4311      	orrs	r1, r2
  402c46:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402c48:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  402c4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402c4e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402c50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402c54:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402c56:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  402c5c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402c5e:	4311      	orrs	r1, r2
  402c60:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  402c62:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402c64:	4311      	orrs	r1, r2
  402c66:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402c68:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  402c6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402c6e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402c70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402c74:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402c76:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402c7c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402c7e:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  402c82:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  402c84:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402c86:	4311      	orrs	r1, r2
  402c88:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402c8a:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  402c8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  402c90:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402c92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402c96:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402c98:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402c9e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402ca0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402ca4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  402ca6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402ca8:	4311      	orrs	r1, r2
  402caa:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402cac:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  402cae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402cb2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402cb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402cb8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402cba:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402cc0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402cc2:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
  402cc6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  402cc8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402cca:	4311      	orrs	r1, r2
  402ccc:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402cce:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  402cd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  402cd4:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402cd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402cda:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402cdc:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402ce2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402ce4:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  402ce8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  402cea:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402cec:	4311      	orrs	r1, r2
  402cee:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402cf0:	605a      	str	r2, [r3, #4]
  402cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402cf4:	400e1850 	.word	0x400e1850
  402cf8:	003fffff 	.word	0x003fffff
  402cfc:	00402d85 	.word	0x00402d85
  402d00:	01000001 	.word	0x01000001
  402d04:	00402d79 	.word	0x00402d79
  402d08:	001fffff 	.word	0x001fffff
  402d0c:	06230001 	.word	0x06230001
  402d10:	00400012 	.word	0x00400012
  402d14:	20000013 	.word	0x20000013
  402d18:	0003ffff 	.word	0x0003ffff
  402d1c:	20400014 	.word	0x20400014
  402d20:	0001ffff 	.word	0x0001ffff
  402d24:	20440015 	.word	0x20440015
  402d28:	13010001 	.word	0x13010001
  402d2c:	40000016 	.word	0x40000016
  402d30:	03000001 	.word	0x03000001
  402d34:	60000017 	.word	0x60000017
  402d38:	03250001 	.word	0x03250001
  402d3c:	70000018 	.word	0x70000018
  402d40:	80000019 	.word	0x80000019
  402d44:	000fffff 	.word	0x000fffff
  402d48:	a010001a 	.word	0xa010001a
  402d4c:	e000ed00 	.word	0xe000ed00
  402d50:	00402d6d 	.word	0x00402d6d
  402d54:	400e0c00 	.word	0x400e0c00
  402d58:	5a00080c 	.word	0x5a00080c
  402d5c:	00402f95 	.word	0x00402f95
  402d60:	400e1200 	.word	0x400e1200
  402d64:	40088000 	.word	0x40088000
  402d68:	400e1000 	.word	0x400e1000

00402d6c <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  402d6c:	4b01      	ldr	r3, [pc, #4]	; (402d74 <mpu_enable+0x8>)
  402d6e:	6058      	str	r0, [r3, #4]
  402d70:	4770      	bx	lr
  402d72:	bf00      	nop
  402d74:	e000ed90 	.word	0xe000ed90

00402d78 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  402d78:	4b01      	ldr	r3, [pc, #4]	; (402d80 <mpu_set_region+0x8>)
  402d7a:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  402d7c:	6119      	str	r1, [r3, #16]
  402d7e:	4770      	bx	lr
  402d80:	e000ed90 	.word	0xe000ed90

00402d84 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  402d84:	2820      	cmp	r0, #32
  402d86:	d909      	bls.n	402d9c <mpu_cal_mpu_region_size+0x18>
  402d88:	2304      	movs	r3, #4
  402d8a:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  402d8c:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  402d8e:	0052      	lsls	r2, r2, #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  402d90:	4290      	cmp	r0, r2
  402d92:	d901      	bls.n	402d98 <mpu_cal_mpu_region_size+0x14>
  402d94:	2b1e      	cmp	r3, #30
  402d96:	d9f9      	bls.n	402d8c <mpu_cal_mpu_region_size+0x8>
	}

	return ( dwReturnValue << 1 );
}
  402d98:	0058      	lsls	r0, r3, #1
  402d9a:	4770      	bx	lr
	uint32_t dwReturnValue = 4;
  402d9c:	2304      	movs	r3, #4
  402d9e:	e7fb      	b.n	402d98 <mpu_cal_mpu_region_size+0x14>

00402da0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402da0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402da2:	4770      	bx	lr

00402da4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402da4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402da6:	4770      	bx	lr

00402da8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  402da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402dac:	4604      	mov	r4, r0
  402dae:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  402db0:	4b0e      	ldr	r3, [pc, #56]	; (402dec <pio_handler_process+0x44>)
  402db2:	4798      	blx	r3
  402db4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402db6:	4620      	mov	r0, r4
  402db8:	4b0d      	ldr	r3, [pc, #52]	; (402df0 <pio_handler_process+0x48>)
  402dba:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  402dbc:	4005      	ands	r5, r0
  402dbe:	d013      	beq.n	402de8 <pio_handler_process+0x40>
  402dc0:	4c0c      	ldr	r4, [pc, #48]	; (402df4 <pio_handler_process+0x4c>)
  402dc2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  402dc6:	e003      	b.n	402dd0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  402dc8:	42b4      	cmp	r4, r6
  402dca:	d00d      	beq.n	402de8 <pio_handler_process+0x40>
  402dcc:	3410      	adds	r4, #16
		while (status != 0) {
  402dce:	b15d      	cbz	r5, 402de8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  402dd0:	6820      	ldr	r0, [r4, #0]
  402dd2:	4540      	cmp	r0, r8
  402dd4:	d1f8      	bne.n	402dc8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402dd6:	6861      	ldr	r1, [r4, #4]
  402dd8:	4229      	tst	r1, r5
  402dda:	d0f5      	beq.n	402dc8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402ddc:	68e3      	ldr	r3, [r4, #12]
  402dde:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  402de0:	6863      	ldr	r3, [r4, #4]
  402de2:	ea25 0503 	bic.w	r5, r5, r3
  402de6:	e7ef      	b.n	402dc8 <pio_handler_process+0x20>
  402de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402dec:	00402da1 	.word	0x00402da1
  402df0:	00402da5 	.word	0x00402da5
  402df4:	20400b4c 	.word	0x20400b4c

00402df8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402df8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  402dfa:	210a      	movs	r1, #10
  402dfc:	4801      	ldr	r0, [pc, #4]	; (402e04 <PIOA_Handler+0xc>)
  402dfe:	4b02      	ldr	r3, [pc, #8]	; (402e08 <PIOA_Handler+0x10>)
  402e00:	4798      	blx	r3
  402e02:	bd08      	pop	{r3, pc}
  402e04:	400e0e00 	.word	0x400e0e00
  402e08:	00402da9 	.word	0x00402da9

00402e0c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402e0c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  402e0e:	210b      	movs	r1, #11
  402e10:	4801      	ldr	r0, [pc, #4]	; (402e18 <PIOB_Handler+0xc>)
  402e12:	4b02      	ldr	r3, [pc, #8]	; (402e1c <PIOB_Handler+0x10>)
  402e14:	4798      	blx	r3
  402e16:	bd08      	pop	{r3, pc}
  402e18:	400e1000 	.word	0x400e1000
  402e1c:	00402da9 	.word	0x00402da9

00402e20 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402e20:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  402e22:	210c      	movs	r1, #12
  402e24:	4801      	ldr	r0, [pc, #4]	; (402e2c <PIOC_Handler+0xc>)
  402e26:	4b02      	ldr	r3, [pc, #8]	; (402e30 <PIOC_Handler+0x10>)
  402e28:	4798      	blx	r3
  402e2a:	bd08      	pop	{r3, pc}
  402e2c:	400e1200 	.word	0x400e1200
  402e30:	00402da9 	.word	0x00402da9

00402e34 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402e34:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  402e36:	2110      	movs	r1, #16
  402e38:	4801      	ldr	r0, [pc, #4]	; (402e40 <PIOD_Handler+0xc>)
  402e3a:	4b02      	ldr	r3, [pc, #8]	; (402e44 <PIOD_Handler+0x10>)
  402e3c:	4798      	blx	r3
  402e3e:	bd08      	pop	{r3, pc}
  402e40:	400e1400 	.word	0x400e1400
  402e44:	00402da9 	.word	0x00402da9

00402e48 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  402e48:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  402e4a:	2111      	movs	r1, #17
  402e4c:	4801      	ldr	r0, [pc, #4]	; (402e54 <PIOE_Handler+0xc>)
  402e4e:	4b02      	ldr	r3, [pc, #8]	; (402e58 <PIOE_Handler+0x10>)
  402e50:	4798      	blx	r3
  402e52:	bd08      	pop	{r3, pc}
  402e54:	400e1600 	.word	0x400e1600
  402e58:	00402da9 	.word	0x00402da9

00402e5c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  402e5c:	2803      	cmp	r0, #3
  402e5e:	d011      	beq.n	402e84 <pmc_mck_set_division+0x28>
  402e60:	2804      	cmp	r0, #4
  402e62:	d012      	beq.n	402e8a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402e64:	2802      	cmp	r0, #2
  402e66:	bf0c      	ite	eq
  402e68:	f44f 7180 	moveq.w	r1, #256	; 0x100
  402e6c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402e6e:	4a08      	ldr	r2, [pc, #32]	; (402e90 <pmc_mck_set_division+0x34>)
  402e70:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  402e76:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  402e78:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402e7a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402e7c:	f013 0f08 	tst.w	r3, #8
  402e80:	d0fb      	beq.n	402e7a <pmc_mck_set_division+0x1e>
}
  402e82:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402e84:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  402e88:	e7f1      	b.n	402e6e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  402e8a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  402e8e:	e7ee      	b.n	402e6e <pmc_mck_set_division+0x12>
  402e90:	400e0600 	.word	0x400e0600

00402e94 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402e94:	4a17      	ldr	r2, [pc, #92]	; (402ef4 <pmc_switch_mck_to_pllack+0x60>)
  402e96:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402e9c:	4318      	orrs	r0, r3
  402e9e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402ea0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402ea2:	f013 0f08 	tst.w	r3, #8
  402ea6:	d10a      	bne.n	402ebe <pmc_switch_mck_to_pllack+0x2a>
  402ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402eac:	4911      	ldr	r1, [pc, #68]	; (402ef4 <pmc_switch_mck_to_pllack+0x60>)
  402eae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402eb0:	f012 0f08 	tst.w	r2, #8
  402eb4:	d103      	bne.n	402ebe <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402eb6:	3b01      	subs	r3, #1
  402eb8:	d1f9      	bne.n	402eae <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  402eba:	2001      	movs	r0, #1
  402ebc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402ebe:	4a0d      	ldr	r2, [pc, #52]	; (402ef4 <pmc_switch_mck_to_pllack+0x60>)
  402ec0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402ec2:	f023 0303 	bic.w	r3, r3, #3
  402ec6:	f043 0302 	orr.w	r3, r3, #2
  402eca:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402ecc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402ece:	f013 0f08 	tst.w	r3, #8
  402ed2:	d10a      	bne.n	402eea <pmc_switch_mck_to_pllack+0x56>
  402ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402ed8:	4906      	ldr	r1, [pc, #24]	; (402ef4 <pmc_switch_mck_to_pllack+0x60>)
  402eda:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402edc:	f012 0f08 	tst.w	r2, #8
  402ee0:	d105      	bne.n	402eee <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402ee2:	3b01      	subs	r3, #1
  402ee4:	d1f9      	bne.n	402eda <pmc_switch_mck_to_pllack+0x46>
			return 1;
  402ee6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402ee8:	4770      	bx	lr
	return 0;
  402eea:	2000      	movs	r0, #0
  402eec:	4770      	bx	lr
  402eee:	2000      	movs	r0, #0
  402ef0:	4770      	bx	lr
  402ef2:	bf00      	nop
  402ef4:	400e0600 	.word	0x400e0600

00402ef8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402ef8:	b9a0      	cbnz	r0, 402f24 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402efa:	480e      	ldr	r0, [pc, #56]	; (402f34 <pmc_switch_mainck_to_xtal+0x3c>)
  402efc:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402efe:	0209      	lsls	r1, r1, #8
  402f00:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402f02:	4a0d      	ldr	r2, [pc, #52]	; (402f38 <pmc_switch_mainck_to_xtal+0x40>)
  402f04:	401a      	ands	r2, r3
  402f06:	4b0d      	ldr	r3, [pc, #52]	; (402f3c <pmc_switch_mainck_to_xtal+0x44>)
  402f08:	4313      	orrs	r3, r2
  402f0a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402f0c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402f0e:	4602      	mov	r2, r0
  402f10:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402f12:	f013 0f01 	tst.w	r3, #1
  402f16:	d0fb      	beq.n	402f10 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402f18:	4a06      	ldr	r2, [pc, #24]	; (402f34 <pmc_switch_mainck_to_xtal+0x3c>)
  402f1a:	6a11      	ldr	r1, [r2, #32]
  402f1c:	4b08      	ldr	r3, [pc, #32]	; (402f40 <pmc_switch_mainck_to_xtal+0x48>)
  402f1e:	430b      	orrs	r3, r1
  402f20:	6213      	str	r3, [r2, #32]
  402f22:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402f24:	4903      	ldr	r1, [pc, #12]	; (402f34 <pmc_switch_mainck_to_xtal+0x3c>)
  402f26:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402f28:	4a06      	ldr	r2, [pc, #24]	; (402f44 <pmc_switch_mainck_to_xtal+0x4c>)
  402f2a:	401a      	ands	r2, r3
  402f2c:	4b06      	ldr	r3, [pc, #24]	; (402f48 <pmc_switch_mainck_to_xtal+0x50>)
  402f2e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402f30:	620b      	str	r3, [r1, #32]
  402f32:	4770      	bx	lr
  402f34:	400e0600 	.word	0x400e0600
  402f38:	ffc8fffc 	.word	0xffc8fffc
  402f3c:	00370001 	.word	0x00370001
  402f40:	01370000 	.word	0x01370000
  402f44:	fec8fffc 	.word	0xfec8fffc
  402f48:	01370002 	.word	0x01370002

00402f4c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402f4c:	4b02      	ldr	r3, [pc, #8]	; (402f58 <pmc_osc_is_ready_mainck+0xc>)
  402f4e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402f50:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402f54:	4770      	bx	lr
  402f56:	bf00      	nop
  402f58:	400e0600 	.word	0x400e0600

00402f5c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402f5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402f60:	4b01      	ldr	r3, [pc, #4]	; (402f68 <pmc_disable_pllack+0xc>)
  402f62:	629a      	str	r2, [r3, #40]	; 0x28
  402f64:	4770      	bx	lr
  402f66:	bf00      	nop
  402f68:	400e0600 	.word	0x400e0600

00402f6c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402f6c:	4b02      	ldr	r3, [pc, #8]	; (402f78 <pmc_is_locked_pllack+0xc>)
  402f6e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402f70:	f000 0002 	and.w	r0, r0, #2
  402f74:	4770      	bx	lr
  402f76:	bf00      	nop
  402f78:	400e0600 	.word	0x400e0600

00402f7c <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
  402f7c:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
  402f80:	4b03      	ldr	r3, [pc, #12]	; (402f90 <pmc_enable_upll_clock+0x14>)
  402f82:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
  402f84:	461a      	mov	r2, r3
  402f86:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402f88:	f013 0f40 	tst.w	r3, #64	; 0x40
  402f8c:	d0fb      	beq.n	402f86 <pmc_enable_upll_clock+0xa>
}
  402f8e:	4770      	bx	lr
  402f90:	400e0600 	.word	0x400e0600

00402f94 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402f94:	283f      	cmp	r0, #63	; 0x3f
  402f96:	d81e      	bhi.n	402fd6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402f98:	281f      	cmp	r0, #31
  402f9a:	d80c      	bhi.n	402fb6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402f9c:	4b11      	ldr	r3, [pc, #68]	; (402fe4 <pmc_enable_periph_clk+0x50>)
  402f9e:	699a      	ldr	r2, [r3, #24]
  402fa0:	2301      	movs	r3, #1
  402fa2:	4083      	lsls	r3, r0
  402fa4:	4393      	bics	r3, r2
  402fa6:	d018      	beq.n	402fda <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402fa8:	2301      	movs	r3, #1
  402faa:	fa03 f000 	lsl.w	r0, r3, r0
  402fae:	4b0d      	ldr	r3, [pc, #52]	; (402fe4 <pmc_enable_periph_clk+0x50>)
  402fb0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402fb2:	2000      	movs	r0, #0
  402fb4:	4770      	bx	lr
		ul_id -= 32;
  402fb6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402fb8:	4b0a      	ldr	r3, [pc, #40]	; (402fe4 <pmc_enable_periph_clk+0x50>)
  402fba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402fbe:	2301      	movs	r3, #1
  402fc0:	4083      	lsls	r3, r0
  402fc2:	4393      	bics	r3, r2
  402fc4:	d00b      	beq.n	402fde <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402fc6:	2301      	movs	r3, #1
  402fc8:	fa03 f000 	lsl.w	r0, r3, r0
  402fcc:	4b05      	ldr	r3, [pc, #20]	; (402fe4 <pmc_enable_periph_clk+0x50>)
  402fce:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  402fd2:	2000      	movs	r0, #0
  402fd4:	4770      	bx	lr
		return 1;
  402fd6:	2001      	movs	r0, #1
  402fd8:	4770      	bx	lr
	return 0;
  402fda:	2000      	movs	r0, #0
  402fdc:	4770      	bx	lr
  402fde:	2000      	movs	r0, #0
}
  402fe0:	4770      	bx	lr
  402fe2:	bf00      	nop
  402fe4:	400e0600 	.word	0x400e0600

00402fe8 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402fe8:	283f      	cmp	r0, #63	; 0x3f
  402fea:	d822      	bhi.n	403032 <pmc_disable_periph_clk+0x4a>
		return 1;
	}

	if (ul_id < 32) {
  402fec:	281f      	cmp	r0, #31
  402fee:	d80e      	bhi.n	40300e <pmc_disable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  402ff0:	4b11      	ldr	r3, [pc, #68]	; (403038 <pmc_disable_periph_clk+0x50>)
  402ff2:	699a      	ldr	r2, [r3, #24]
  402ff4:	2301      	movs	r3, #1
  402ff6:	4083      	lsls	r3, r0
  402ff8:	4393      	bics	r3, r2
  402ffa:	d001      	beq.n	403000 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  402ffc:	2000      	movs	r0, #0
  402ffe:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  403000:	2301      	movs	r3, #1
  403002:	fa03 f000 	lsl.w	r0, r3, r0
  403006:	4b0c      	ldr	r3, [pc, #48]	; (403038 <pmc_disable_periph_clk+0x50>)
  403008:	6158      	str	r0, [r3, #20]
	return 0;
  40300a:	2000      	movs	r0, #0
  40300c:	4770      	bx	lr
		ul_id -= 32;
  40300e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  403010:	4b09      	ldr	r3, [pc, #36]	; (403038 <pmc_disable_periph_clk+0x50>)
  403012:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  403016:	2301      	movs	r3, #1
  403018:	4083      	lsls	r3, r0
  40301a:	4393      	bics	r3, r2
  40301c:	d001      	beq.n	403022 <pmc_disable_periph_clk+0x3a>
	return 0;
  40301e:	2000      	movs	r0, #0
}
  403020:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  403022:	2301      	movs	r3, #1
  403024:	fa03 f000 	lsl.w	r0, r3, r0
  403028:	4b03      	ldr	r3, [pc, #12]	; (403038 <pmc_disable_periph_clk+0x50>)
  40302a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	return 0;
  40302e:	2000      	movs	r0, #0
  403030:	4770      	bx	lr
		return 1;
  403032:	2001      	movs	r0, #1
  403034:	4770      	bx	lr
  403036:	bf00      	nop
  403038:	400e0600 	.word	0x400e0600

0040303c <pmc_switch_udpck_to_upllck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
  40303c:	0200      	lsls	r0, r0, #8
  40303e:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  403042:	f040 0001 	orr.w	r0, r0, #1
  403046:	4b01      	ldr	r3, [pc, #4]	; (40304c <pmc_switch_udpck_to_upllck+0x10>)
  403048:	6398      	str	r0, [r3, #56]	; 0x38
  40304a:	4770      	bx	lr
  40304c:	400e0600 	.word	0x400e0600

00403050 <pmc_enable_udpck>:
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCER = PMC_SCER_USBCLK;
  403050:	2220      	movs	r2, #32
  403052:	4b01      	ldr	r3, [pc, #4]	; (403058 <pmc_enable_udpck+0x8>)
  403054:	601a      	str	r2, [r3, #0]
  403056:	4770      	bx	lr
  403058:	400e0600 	.word	0x400e0600

0040305c <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  40305c:	4b03      	ldr	r3, [pc, #12]	; (40306c <pmc_set_fast_startup_input+0x10>)
  40305e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  403060:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  403064:	4310      	orrs	r0, r2
  403066:	6718      	str	r0, [r3, #112]	; 0x70
  403068:	4770      	bx	lr
  40306a:	bf00      	nop
  40306c:	400e0600 	.word	0x400e0600

00403070 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  403070:	4770      	bx	lr
	...

00403074 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  403074:	4a10      	ldr	r2, [pc, #64]	; (4030b8 <pmc_enable_waitmode+0x44>)
  403076:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  403078:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  40307c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  403080:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  403082:	6a11      	ldr	r1, [r2, #32]
  403084:	4b0d      	ldr	r3, [pc, #52]	; (4030bc <pmc_enable_waitmode+0x48>)
  403086:	430b      	orrs	r3, r1
  403088:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40308a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40308c:	f013 0f08 	tst.w	r3, #8
  403090:	d0fb      	beq.n	40308a <pmc_enable_waitmode+0x16>
  403092:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  403096:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  403098:	3b01      	subs	r3, #1
  40309a:	d1fc      	bne.n	403096 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  40309c:	4a06      	ldr	r2, [pc, #24]	; (4030b8 <pmc_enable_waitmode+0x44>)
  40309e:	6a13      	ldr	r3, [r2, #32]
  4030a0:	f013 0f08 	tst.w	r3, #8
  4030a4:	d0fb      	beq.n	40309e <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4030a6:	4a04      	ldr	r2, [pc, #16]	; (4030b8 <pmc_enable_waitmode+0x44>)
  4030a8:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4030aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4030ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4030b2:	6713      	str	r3, [r2, #112]	; 0x70
  4030b4:	4770      	bx	lr
  4030b6:	bf00      	nop
  4030b8:	400e0600 	.word	0x400e0600
  4030bc:	00370004 	.word	0x00370004

004030c0 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4030c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  4030c4:	1e43      	subs	r3, r0, #1
  4030c6:	2b04      	cmp	r3, #4
  4030c8:	f200 8105 	bhi.w	4032d6 <pmc_sleep+0x216>
  4030cc:	e8df f013 	tbh	[pc, r3, lsl #1]
  4030d0:	00050005 	.word	0x00050005
  4030d4:	00130013 	.word	0x00130013
  4030d8:	00f4      	.short	0x00f4
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  4030da:	4a80      	ldr	r2, [pc, #512]	; (4032dc <pmc_sleep+0x21c>)
  4030dc:	6913      	ldr	r3, [r2, #16]
  4030de:	f023 0304 	bic.w	r3, r3, #4
  4030e2:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  4030e4:	2201      	movs	r2, #1
  4030e6:	4b7e      	ldr	r3, [pc, #504]	; (4032e0 <pmc_sleep+0x220>)
  4030e8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4030ea:	f3bf 8f5f 	dmb	sy
  4030ee:	b662      	cpsie	i
  __ASM volatile ("wfi");
  4030f0:	bf30      	wfi
  4030f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4030f6:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  4030f8:	2803      	cmp	r0, #3
  4030fa:	bf0c      	ite	eq
  4030fc:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  4030fe:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  403102:	4b78      	ldr	r3, [pc, #480]	; (4032e4 <pmc_sleep+0x224>)
  403104:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  403106:	b672      	cpsid	i
  __ASM volatile ("dmb");
  403108:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40310c:	2200      	movs	r2, #0
  40310e:	4b74      	ldr	r3, [pc, #464]	; (4032e0 <pmc_sleep+0x220>)
  403110:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  403112:	2201      	movs	r2, #1
  403114:	4b74      	ldr	r3, [pc, #464]	; (4032e8 <pmc_sleep+0x228>)
  403116:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  403118:	4b74      	ldr	r3, [pc, #464]	; (4032ec <pmc_sleep+0x22c>)
  40311a:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  40311c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40311e:	4a74      	ldr	r2, [pc, #464]	; (4032f0 <pmc_sleep+0x230>)
  403120:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  403124:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  403126:	4a73      	ldr	r2, [pc, #460]	; (4032f4 <pmc_sleep+0x234>)
  403128:	433a      	orrs	r2, r7
  40312a:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  40312c:	f005 0903 	and.w	r9, r5, #3
  403130:	f1b9 0f01 	cmp.w	r9, #1
  403134:	f240 8089 	bls.w	40324a <pmc_sleep+0x18a>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  403138:	f025 0103 	bic.w	r1, r5, #3
  40313c:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  403140:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403142:	461a      	mov	r2, r3
  403144:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403146:	f013 0f08 	tst.w	r3, #8
  40314a:	d0fb      	beq.n	403144 <pmc_sleep+0x84>
	if (mckr & PMC_MCKR_PRES_Msk) {
  40314c:	f011 0f70 	tst.w	r1, #112	; 0x70
  403150:	d008      	beq.n	403164 <pmc_sleep+0xa4>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  403152:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  403156:	4b65      	ldr	r3, [pc, #404]	; (4032ec <pmc_sleep+0x22c>)
  403158:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40315a:	461a      	mov	r2, r3
  40315c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40315e:	f013 0f08 	tst.w	r3, #8
  403162:	d0fb      	beq.n	40315c <pmc_sleep+0x9c>
	pmc_disable_pllack();
  403164:	4b64      	ldr	r3, [pc, #400]	; (4032f8 <pmc_sleep+0x238>)
  403166:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  403168:	4a60      	ldr	r2, [pc, #384]	; (4032ec <pmc_sleep+0x22c>)
  40316a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40316c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  403170:	d0fb      	beq.n	40316a <pmc_sleep+0xaa>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  403172:	4a5e      	ldr	r2, [pc, #376]	; (4032ec <pmc_sleep+0x22c>)
  403174:	6a11      	ldr	r1, [r2, #32]
  403176:	4b61      	ldr	r3, [pc, #388]	; (4032fc <pmc_sleep+0x23c>)
  403178:	400b      	ands	r3, r1
  40317a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40317e:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  403180:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403182:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  403186:	d0fb      	beq.n	403180 <pmc_sleep+0xc0>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  403188:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  40318c:	4a58      	ldr	r2, [pc, #352]	; (4032f0 <pmc_sleep+0x230>)
  40318e:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  403190:	2c04      	cmp	r4, #4
  403192:	d05c      	beq.n	40324e <pmc_sleep+0x18e>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  403194:	4c52      	ldr	r4, [pc, #328]	; (4032e0 <pmc_sleep+0x220>)
  403196:	2301      	movs	r3, #1
  403198:	7023      	strb	r3, [r4, #0]
  40319a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40319e:	b662      	cpsie	i

		pmc_enable_waitmode();
  4031a0:	4b57      	ldr	r3, [pc, #348]	; (403300 <pmc_sleep+0x240>)
  4031a2:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4031a4:	b672      	cpsid	i
  4031a6:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4031aa:	2300      	movs	r3, #0
  4031ac:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4031ae:	f017 0f02 	tst.w	r7, #2
  4031b2:	d055      	beq.n	403260 <pmc_sleep+0x1a0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4031b4:	4a4d      	ldr	r2, [pc, #308]	; (4032ec <pmc_sleep+0x22c>)
  4031b6:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4031b8:	4952      	ldr	r1, [pc, #328]	; (403304 <pmc_sleep+0x244>)
  4031ba:	4019      	ands	r1, r3
  4031bc:	4b52      	ldr	r3, [pc, #328]	; (403308 <pmc_sleep+0x248>)
  4031be:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4031c0:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4031c2:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  4031c4:	4b51      	ldr	r3, [pc, #324]	; (40330c <pmc_sleep+0x24c>)
  4031c6:	400b      	ands	r3, r1
  4031c8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4031cc:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  4031ce:	4b50      	ldr	r3, [pc, #320]	; (403310 <pmc_sleep+0x250>)
  4031d0:	4033      	ands	r3, r6
  4031d2:	2b00      	cmp	r3, #0
  4031d4:	d06e      	beq.n	4032b4 <pmc_sleep+0x1f4>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  4031d6:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4031da:	4b44      	ldr	r3, [pc, #272]	; (4032ec <pmc_sleep+0x22c>)
  4031dc:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  4031de:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  4031e0:	f1b9 0f02 	cmp.w	r9, #2
  4031e4:	d104      	bne.n	4031f0 <pmc_sleep+0x130>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  4031e6:	4a41      	ldr	r2, [pc, #260]	; (4032ec <pmc_sleep+0x22c>)
  4031e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4031ea:	f013 0f02 	tst.w	r3, #2
  4031ee:	d0fb      	beq.n	4031e8 <pmc_sleep+0x128>
	mckr = PMC->PMC_MCKR;
  4031f0:	4a3e      	ldr	r2, [pc, #248]	; (4032ec <pmc_sleep+0x22c>)
  4031f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4031f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  4031f8:	f005 0070 	and.w	r0, r5, #112	; 0x70
  4031fc:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4031fe:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403200:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403202:	f013 0f08 	tst.w	r3, #8
  403206:	d0fb      	beq.n	403200 <pmc_sleep+0x140>
	EFC0->EEFC_FMR = fmr_setting;
  403208:	4b39      	ldr	r3, [pc, #228]	; (4032f0 <pmc_sleep+0x230>)
  40320a:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  40320e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  403212:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403214:	461a      	mov	r2, r3
  403216:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403218:	f013 0f08 	tst.w	r3, #8
  40321c:	d0fb      	beq.n	403216 <pmc_sleep+0x156>
	while (!(PMC->PMC_SR & pll_sr));
  40321e:	4a33      	ldr	r2, [pc, #204]	; (4032ec <pmc_sleep+0x22c>)
  403220:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403222:	420b      	tst	r3, r1
  403224:	d0fc      	beq.n	403220 <pmc_sleep+0x160>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  403226:	2200      	movs	r2, #0
  403228:	4b2f      	ldr	r3, [pc, #188]	; (4032e8 <pmc_sleep+0x228>)
  40322a:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  40322c:	4b39      	ldr	r3, [pc, #228]	; (403314 <pmc_sleep+0x254>)
  40322e:	681b      	ldr	r3, [r3, #0]
  403230:	b11b      	cbz	r3, 40323a <pmc_sleep+0x17a>
			callback_clocks_restored();
  403232:	4798      	blx	r3
			callback_clocks_restored = NULL;
  403234:	2200      	movs	r2, #0
  403236:	4b37      	ldr	r3, [pc, #220]	; (403314 <pmc_sleep+0x254>)
  403238:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40323a:	2201      	movs	r2, #1
  40323c:	4b28      	ldr	r3, [pc, #160]	; (4032e0 <pmc_sleep+0x220>)
  40323e:	701a      	strb	r2, [r3, #0]
  403240:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403244:	b662      	cpsie	i
  403246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  40324a:	4629      	mov	r1, r5
  40324c:	e77e      	b.n	40314c <pmc_sleep+0x8c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40324e:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  403252:	6a11      	ldr	r1, [r2, #32]
  403254:	4b30      	ldr	r3, [pc, #192]	; (403318 <pmc_sleep+0x258>)
  403256:	400b      	ands	r3, r1
  403258:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40325c:	6213      	str	r3, [r2, #32]
  40325e:	e799      	b.n	403194 <pmc_sleep+0xd4>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  403260:	f017 0f01 	tst.w	r7, #1
  403264:	d0b3      	beq.n	4031ce <pmc_sleep+0x10e>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  403266:	4b21      	ldr	r3, [pc, #132]	; (4032ec <pmc_sleep+0x22c>)
  403268:	6a1b      	ldr	r3, [r3, #32]
  40326a:	f013 0f01 	tst.w	r3, #1
  40326e:	d10b      	bne.n	403288 <pmc_sleep+0x1c8>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403270:	491e      	ldr	r1, [pc, #120]	; (4032ec <pmc_sleep+0x22c>)
  403272:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  403274:	4a29      	ldr	r2, [pc, #164]	; (40331c <pmc_sleep+0x25c>)
  403276:	401a      	ands	r2, r3
  403278:	4b29      	ldr	r3, [pc, #164]	; (403320 <pmc_sleep+0x260>)
  40327a:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40327c:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40327e:	460a      	mov	r2, r1
  403280:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403282:	f013 0f01 	tst.w	r3, #1
  403286:	d0fb      	beq.n	403280 <pmc_sleep+0x1c0>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  403288:	4b18      	ldr	r3, [pc, #96]	; (4032ec <pmc_sleep+0x22c>)
  40328a:	6a1b      	ldr	r3, [r3, #32]
  40328c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403290:	d108      	bne.n	4032a4 <pmc_sleep+0x1e4>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  403292:	4a16      	ldr	r2, [pc, #88]	; (4032ec <pmc_sleep+0x22c>)
  403294:	6a11      	ldr	r1, [r2, #32]
  403296:	4b23      	ldr	r3, [pc, #140]	; (403324 <pmc_sleep+0x264>)
  403298:	430b      	orrs	r3, r1
  40329a:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40329c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40329e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4032a2:	d0fb      	beq.n	40329c <pmc_sleep+0x1dc>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4032a4:	4a11      	ldr	r2, [pc, #68]	; (4032ec <pmc_sleep+0x22c>)
  4032a6:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  4032a8:	4b18      	ldr	r3, [pc, #96]	; (40330c <pmc_sleep+0x24c>)
  4032aa:	400b      	ands	r3, r1
  4032ac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4032b0:	6213      	str	r3, [r2, #32]
  4032b2:	e78c      	b.n	4031ce <pmc_sleep+0x10e>
	uint32_t pll_sr = 0;
  4032b4:	2100      	movs	r1, #0
  4032b6:	e793      	b.n	4031e0 <pmc_sleep+0x120>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  4032b8:	4a08      	ldr	r2, [pc, #32]	; (4032dc <pmc_sleep+0x21c>)
  4032ba:	6913      	ldr	r3, [r2, #16]
  4032bc:	f043 0304 	orr.w	r3, r3, #4
  4032c0:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  4032c2:	4a19      	ldr	r2, [pc, #100]	; (403328 <pmc_sleep+0x268>)
  4032c4:	4b19      	ldr	r3, [pc, #100]	; (40332c <pmc_sleep+0x26c>)
  4032c6:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  4032c8:	2201      	movs	r2, #1
  4032ca:	4b05      	ldr	r3, [pc, #20]	; (4032e0 <pmc_sleep+0x220>)
  4032cc:	701a      	strb	r2, [r3, #0]
  4032ce:	f3bf 8f5f 	dmb	sy
  4032d2:	b662      	cpsie	i
  __ASM volatile ("wfi");
  4032d4:	bf30      	wfi
  4032d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4032da:	bf00      	nop
  4032dc:	e000ed00 	.word	0xe000ed00
  4032e0:	204000c8 	.word	0x204000c8
  4032e4:	00403071 	.word	0x00403071
  4032e8:	20400bbc 	.word	0x20400bbc
  4032ec:	400e0600 	.word	0x400e0600
  4032f0:	400e0c00 	.word	0x400e0c00
  4032f4:	00370008 	.word	0x00370008
  4032f8:	00402f5d 	.word	0x00402f5d
  4032fc:	fec8ffff 	.word	0xfec8ffff
  403300:	00403075 	.word	0x00403075
  403304:	fec8fffc 	.word	0xfec8fffc
  403308:	01370002 	.word	0x01370002
  40330c:	ffc8ff87 	.word	0xffc8ff87
  403310:	07ff0000 	.word	0x07ff0000
  403314:	20400bc0 	.word	0x20400bc0
  403318:	ffc8fffe 	.word	0xffc8fffe
  40331c:	ffc8fffc 	.word	0xffc8fffc
  403320:	00370001 	.word	0x00370001
  403324:	01370000 	.word	0x01370000
  403328:	a5000004 	.word	0xa5000004
  40332c:	400e1810 	.word	0x400e1810

00403330 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  403330:	4b02      	ldr	r3, [pc, #8]	; (40333c <pmc_is_wakeup_clocks_restored+0xc>)
  403332:	7818      	ldrb	r0, [r3, #0]
}
  403334:	f080 0001 	eor.w	r0, r0, #1
  403338:	4770      	bx	lr
  40333a:	bf00      	nop
  40333c:	20400bbc 	.word	0x20400bbc

00403340 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_idle true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  403340:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  403342:	4601      	mov	r1, r0
  403344:	bb28      	cbnz	r0, 403392 <udd_sleep_mode+0x52>
  403346:	4b24      	ldr	r3, [pc, #144]	; (4033d8 <udd_sleep_mode+0x98>)
  403348:	781b      	ldrb	r3, [r3, #0]
  40334a:	b91b      	cbnz	r3, 403354 <udd_sleep_mode+0x14>
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(USBHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  40334c:	4b22      	ldr	r3, [pc, #136]	; (4033d8 <udd_sleep_mode+0x98>)
  40334e:	7019      	strb	r1, [r3, #0]
}
  403350:	b002      	add	sp, #8
  403352:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  403354:	4b21      	ldr	r3, [pc, #132]	; (4033dc <udd_sleep_mode+0x9c>)
  403356:	789b      	ldrb	r3, [r3, #2]
  403358:	b903      	cbnz	r3, 40335c <udd_sleep_mode+0x1c>
  40335a:	e7fe      	b.n	40335a <udd_sleep_mode+0x1a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40335c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403360:	fab3 f383 	clz	r3, r3
  403364:	095b      	lsrs	r3, r3, #5
  403366:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  403368:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40336a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40336e:	2200      	movs	r2, #0
  403370:	4b1b      	ldr	r3, [pc, #108]	; (4033e0 <udd_sleep_mode+0xa0>)
  403372:	701a      	strb	r2, [r3, #0]
	return flags;
  403374:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  403376:	4a19      	ldr	r2, [pc, #100]	; (4033dc <udd_sleep_mode+0x9c>)
  403378:	7893      	ldrb	r3, [r2, #2]
  40337a:	3b01      	subs	r3, #1
  40337c:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40337e:	2800      	cmp	r0, #0
  403380:	d0e4      	beq.n	40334c <udd_sleep_mode+0xc>
		cpu_irq_enable();
  403382:	2201      	movs	r2, #1
  403384:	4b16      	ldr	r3, [pc, #88]	; (4033e0 <udd_sleep_mode+0xa0>)
  403386:	701a      	strb	r2, [r3, #0]
  403388:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40338c:	b662      	cpsie	i
  40338e:	e7dd      	b.n	40334c <udd_sleep_mode+0xc>
  403390:	e7fe      	b.n	403390 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  403392:	4b11      	ldr	r3, [pc, #68]	; (4033d8 <udd_sleep_mode+0x98>)
  403394:	781b      	ldrb	r3, [r3, #0]
  403396:	2b00      	cmp	r3, #0
  403398:	d1d8      	bne.n	40334c <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  40339a:	4b10      	ldr	r3, [pc, #64]	; (4033dc <udd_sleep_mode+0x9c>)
  40339c:	789b      	ldrb	r3, [r3, #2]
  40339e:	2bff      	cmp	r3, #255	; 0xff
  4033a0:	d0f6      	beq.n	403390 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4033a2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4033a6:	fab3 f383 	clz	r3, r3
  4033aa:	095b      	lsrs	r3, r3, #5
  4033ac:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4033ae:	b672      	cpsid	i
  4033b0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4033b4:	2200      	movs	r2, #0
  4033b6:	4b0a      	ldr	r3, [pc, #40]	; (4033e0 <udd_sleep_mode+0xa0>)
  4033b8:	701a      	strb	r2, [r3, #0]
	return flags;
  4033ba:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  4033bc:	4a07      	ldr	r2, [pc, #28]	; (4033dc <udd_sleep_mode+0x9c>)
  4033be:	7893      	ldrb	r3, [r2, #2]
  4033c0:	3301      	adds	r3, #1
  4033c2:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  4033c4:	2800      	cmp	r0, #0
  4033c6:	d0c1      	beq.n	40334c <udd_sleep_mode+0xc>
		cpu_irq_enable();
  4033c8:	2201      	movs	r2, #1
  4033ca:	4b05      	ldr	r3, [pc, #20]	; (4033e0 <udd_sleep_mode+0xa0>)
  4033cc:	701a      	strb	r2, [r3, #0]
  4033ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4033d2:	b662      	cpsie	i
  4033d4:	e7ba      	b.n	40334c <udd_sleep_mode+0xc>
  4033d6:	bf00      	nop
  4033d8:	20400bc5 	.word	0x20400bc5
  4033dc:	20401060 	.word	0x20401060
  4033e0:	204000c8 	.word	0x204000c8

004033e4 <udd_ctrl_init>:
	udd_enable_endpoint_interrupt(0);
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
  4033e4:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4033e6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4033ea:	fab3 f383 	clz	r3, r3
  4033ee:	095b      	lsrs	r3, r3, #5
  4033f0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4033f2:	b672      	cpsid	i
  4033f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4033f8:	2200      	movs	r2, #0
  4033fa:	4b0c      	ldr	r3, [pc, #48]	; (40342c <udd_ctrl_init+0x48>)
  4033fc:	701a      	strb	r2, [r3, #0]
	return flags;
  4033fe:	9b01      	ldr	r3, [sp, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
  403400:	2101      	movs	r1, #1
  403402:	4a0b      	ldr	r2, [pc, #44]	; (403430 <udd_ctrl_init+0x4c>)
  403404:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403406:	b123      	cbz	r3, 403412 <udd_ctrl_init+0x2e>
		cpu_irq_enable();
  403408:	4b08      	ldr	r3, [pc, #32]	; (40342c <udd_ctrl_init+0x48>)
  40340a:	7019      	strb	r1, [r3, #0]
  40340c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403410:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
  403412:	2202      	movs	r2, #2
  403414:	4b07      	ldr	r3, [pc, #28]	; (403434 <udd_ctrl_init+0x50>)
  403416:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
  403418:	4a07      	ldr	r2, [pc, #28]	; (403438 <udd_ctrl_init+0x54>)
  40341a:	2300      	movs	r3, #0
  40341c:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  40341e:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  403420:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  403422:	4a06      	ldr	r2, [pc, #24]	; (40343c <udd_ctrl_init+0x58>)
  403424:	7013      	strb	r3, [r2, #0]
}
  403426:	b002      	add	sp, #8
  403428:	4770      	bx	lr
  40342a:	bf00      	nop
  40342c:	204000c8 	.word	0x204000c8
  403430:	40038220 	.word	0x40038220
  403434:	40038160 	.word	0x40038160
  403438:	20401068 	.word	0x20401068
  40343c:	20400bcc 	.word	0x20400bcc

00403440 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  403440:	2205      	movs	r2, #5
  403442:	4b03      	ldr	r3, [pc, #12]	; (403450 <udd_ctrl_stall_data+0x10>)
  403444:	701a      	strb	r2, [r3, #0]
	//printf("%x\n",UDD_EPCTRL_STALL_REQ);
	udd_enable_stall_handshake(0);
  403446:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40344a:	4b02      	ldr	r3, [pc, #8]	; (403454 <udd_ctrl_stall_data+0x14>)
  40344c:	601a      	str	r2, [r3, #0]
  40344e:	4770      	bx	lr
  403450:	20400bcc 	.word	0x20400bcc
  403454:	400381f0 	.word	0x400381f0

00403458 <udd_ctrl_send_zlp_in>:
}


static void udd_ctrl_send_zlp_in(void)
{
  403458:	b082      	sub	sp, #8
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  40345a:	2203      	movs	r2, #3
  40345c:	4b0f      	ldr	r3, [pc, #60]	; (40349c <udd_ctrl_send_zlp_in+0x44>)
  40345e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403460:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403464:	fab3 f383 	clz	r3, r3
  403468:	095b      	lsrs	r3, r3, #5
  40346a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40346c:	b672      	cpsid	i
  40346e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403472:	2200      	movs	r2, #0
  403474:	4b0a      	ldr	r3, [pc, #40]	; (4034a0 <udd_ctrl_send_zlp_in+0x48>)
  403476:	701a      	strb	r2, [r3, #0]
	return flags;
  403478:	9801      	ldr	r0, [sp, #4]
	//printf("%x\n",UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP);
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
  40347a:	490a      	ldr	r1, [pc, #40]	; (4034a4 <udd_ctrl_send_zlp_in+0x4c>)
  40347c:	2201      	movs	r2, #1
  40347e:	600a      	str	r2, [r1, #0]
	udd_enable_in_send_interrupt(0);
  403480:	4b09      	ldr	r3, [pc, #36]	; (4034a8 <udd_ctrl_send_zlp_in+0x50>)
  403482:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
  403484:	2208      	movs	r2, #8
  403486:	600a      	str	r2, [r1, #0]
	udd_enable_nak_out_interrupt(0);
  403488:	601a      	str	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
  40348a:	b128      	cbz	r0, 403498 <udd_ctrl_send_zlp_in+0x40>
		cpu_irq_enable();
  40348c:	2201      	movs	r2, #1
  40348e:	4b04      	ldr	r3, [pc, #16]	; (4034a0 <udd_ctrl_send_zlp_in+0x48>)
  403490:	701a      	strb	r2, [r3, #0]
  403492:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403496:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
  403498:	b002      	add	sp, #8
  40349a:	4770      	bx	lr
  40349c:	20400bcc 	.word	0x20400bcc
  4034a0:	204000c8 	.word	0x204000c8
  4034a4:	40038160 	.word	0x40038160
  4034a8:	400381f0 	.word	0x400381f0

004034ac <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
  4034ac:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  4034ae:	4b02      	ldr	r3, [pc, #8]	; (4034b8 <udd_ctrl_endofrequest+0xc>)
  4034b0:	691b      	ldr	r3, [r3, #16]
  4034b2:	b103      	cbz	r3, 4034b6 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  4034b4:	4798      	blx	r3
  4034b6:	bd08      	pop	{r3, pc}
  4034b8:	20401068 	.word	0x20401068

004034bc <udd_ctrl_in_sent>:
{
  4034bc:	b530      	push	{r4, r5, lr}
  4034be:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4034c0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4034c4:	fab3 f383 	clz	r3, r3
  4034c8:	095b      	lsrs	r3, r3, #5
  4034ca:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4034cc:	b672      	cpsid	i
  4034ce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4034d2:	2200      	movs	r2, #0
  4034d4:	4b4c      	ldr	r3, [pc, #304]	; (403608 <udd_ctrl_in_sent+0x14c>)
  4034d6:	701a      	strb	r2, [r3, #0]
	return flags;
  4034d8:	9b01      	ldr	r3, [sp, #4]
	udd_disable_in_send_interrupt(0);
  4034da:	2101      	movs	r1, #1
  4034dc:	4a4b      	ldr	r2, [pc, #300]	; (40360c <udd_ctrl_in_sent+0x150>)
  4034de:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  4034e0:	b123      	cbz	r3, 4034ec <udd_ctrl_in_sent+0x30>
		cpu_irq_enable();
  4034e2:	4b49      	ldr	r3, [pc, #292]	; (403608 <udd_ctrl_in_sent+0x14c>)
  4034e4:	7019      	strb	r1, [r3, #0]
  4034e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4034ea:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  4034ec:	4b48      	ldr	r3, [pc, #288]	; (403610 <udd_ctrl_in_sent+0x154>)
  4034ee:	781b      	ldrb	r3, [r3, #0]
  4034f0:	2b03      	cmp	r3, #3
  4034f2:	d057      	beq.n	4035a4 <udd_ctrl_in_sent+0xe8>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
  4034f4:	4b47      	ldr	r3, [pc, #284]	; (403614 <udd_ctrl_in_sent+0x158>)
  4034f6:	881b      	ldrh	r3, [r3, #0]
  4034f8:	4a47      	ldr	r2, [pc, #284]	; (403618 <udd_ctrl_in_sent+0x15c>)
  4034fa:	8994      	ldrh	r4, [r2, #12]
  4034fc:	1ae4      	subs	r4, r4, r3
  4034fe:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  403500:	b9c4      	cbnz	r4, 403534 <udd_ctrl_in_sent+0x78>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
  403502:	4a46      	ldr	r2, [pc, #280]	; (40361c <udd_ctrl_in_sent+0x160>)
  403504:	8811      	ldrh	r1, [r2, #0]
  403506:	440b      	add	r3, r1
  403508:	b29b      	uxth	r3, r3
  40350a:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
  40350c:	4a42      	ldr	r2, [pc, #264]	; (403618 <udd_ctrl_in_sent+0x15c>)
  40350e:	88d2      	ldrh	r2, [r2, #6]
  403510:	429a      	cmp	r2, r3
  403512:	d04c      	beq.n	4035ae <udd_ctrl_in_sent+0xf2>
					|| b_shortpacket) {
  403514:	4b42      	ldr	r3, [pc, #264]	; (403620 <udd_ctrl_in_sent+0x164>)
  403516:	781b      	ldrb	r3, [r3, #0]
  403518:	2b00      	cmp	r3, #0
  40351a:	d148      	bne.n	4035ae <udd_ctrl_in_sent+0xf2>
		if ((!udd_g_ctrlreq.over_under_run)
  40351c:	4b3e      	ldr	r3, [pc, #248]	; (403618 <udd_ctrl_in_sent+0x15c>)
  40351e:	695b      	ldr	r3, [r3, #20]
  403520:	2b00      	cmp	r3, #0
  403522:	d061      	beq.n	4035e8 <udd_ctrl_in_sent+0x12c>
				|| (!udd_g_ctrlreq.over_under_run())) {
  403524:	4798      	blx	r3
  403526:	2800      	cmp	r0, #0
  403528:	d05e      	beq.n	4035e8 <udd_ctrl_in_sent+0x12c>
			udd_ctrl_payload_buf_cnt = 0;
  40352a:	2200      	movs	r2, #0
  40352c:	4b39      	ldr	r3, [pc, #228]	; (403614 <udd_ctrl_in_sent+0x158>)
  40352e:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  403530:	4b39      	ldr	r3, [pc, #228]	; (403618 <udd_ctrl_in_sent+0x15c>)
  403532:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  403534:	2c3f      	cmp	r4, #63	; 0x3f
  403536:	d957      	bls.n	4035e8 <udd_ctrl_in_sent+0x12c>
		b_shortpacket = false;
  403538:	2200      	movs	r2, #0
  40353a:	4b39      	ldr	r3, [pc, #228]	; (403620 <udd_ctrl_in_sent+0x164>)
  40353c:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  40353e:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  403540:	4b35      	ldr	r3, [pc, #212]	; (403618 <udd_ctrl_in_sent+0x15c>)
  403542:	689a      	ldr	r2, [r3, #8]
  403544:	4b33      	ldr	r3, [pc, #204]	; (403614 <udd_ctrl_in_sent+0x158>)
  403546:	881d      	ldrh	r5, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403548:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40354c:	fab3 f383 	clz	r3, r3
  403550:	095b      	lsrs	r3, r3, #5
  403552:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  403554:	b672      	cpsid	i
  403556:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40355a:	2100      	movs	r1, #0
  40355c:	4b2a      	ldr	r3, [pc, #168]	; (403608 <udd_ctrl_in_sent+0x14c>)
  40355e:	7019      	strb	r1, [r3, #0]
	return flags;
  403560:	9802      	ldr	r0, [sp, #8]
	if (Is_udd_out_received(0)) {
  403562:	4b30      	ldr	r3, [pc, #192]	; (403624 <udd_ctrl_in_sent+0x168>)
  403564:	681b      	ldr	r3, [r3, #0]
  403566:	f013 0f02 	tst.w	r3, #2
  40356a:	d141      	bne.n	4035f0 <udd_ctrl_in_sent+0x134>
	for (i = 0; i < nb_remain; i++) {
  40356c:	b144      	cbz	r4, 403580 <udd_ctrl_in_sent+0xc4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  40356e:	442a      	add	r2, r5
  403570:	4b2d      	ldr	r3, [pc, #180]	; (403628 <udd_ctrl_in_sent+0x16c>)
		*ptr_dest++ = *ptr_src++;
  403572:	f812 1b01 	ldrb.w	r1, [r2], #1
  403576:	f803 1b01 	strb.w	r1, [r3], #1
	for (i = 0; i < nb_remain; i++) {
  40357a:	b2d9      	uxtb	r1, r3
  40357c:	42a1      	cmp	r1, r4
  40357e:	d3f8      	bcc.n	403572 <udd_ctrl_in_sent+0xb6>
	udd_ctrl_payload_buf_cnt += nb_remain;
  403580:	4b24      	ldr	r3, [pc, #144]	; (403614 <udd_ctrl_in_sent+0x158>)
  403582:	881a      	ldrh	r2, [r3, #0]
  403584:	4414      	add	r4, r2
  403586:	801c      	strh	r4, [r3, #0]
	udd_ack_in_send(0);
  403588:	2301      	movs	r3, #1
  40358a:	4a28      	ldr	r2, [pc, #160]	; (40362c <udd_ctrl_in_sent+0x170>)
  40358c:	6013      	str	r3, [r2, #0]
	udd_enable_in_send_interrupt(0);
  40358e:	3290      	adds	r2, #144	; 0x90
  403590:	6013      	str	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403592:	2800      	cmp	r0, #0
  403594:	d036      	beq.n	403604 <udd_ctrl_in_sent+0x148>
		cpu_irq_enable();
  403596:	461a      	mov	r2, r3
  403598:	4b1b      	ldr	r3, [pc, #108]	; (403608 <udd_ctrl_in_sent+0x14c>)
  40359a:	701a      	strb	r2, [r3, #0]
  40359c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4035a0:	b662      	cpsie	i
  4035a2:	e02f      	b.n	403604 <udd_ctrl_in_sent+0x148>
		udd_ctrl_endofrequest();
  4035a4:	4b22      	ldr	r3, [pc, #136]	; (403630 <udd_ctrl_in_sent+0x174>)
  4035a6:	4798      	blx	r3
		udd_ctrl_init();
  4035a8:	4b22      	ldr	r3, [pc, #136]	; (403634 <udd_ctrl_in_sent+0x178>)
  4035aa:	4798      	blx	r3
		return;
  4035ac:	e02a      	b.n	403604 <udd_ctrl_in_sent+0x148>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4035ae:	2204      	movs	r2, #4
  4035b0:	4b17      	ldr	r3, [pc, #92]	; (403610 <udd_ctrl_in_sent+0x154>)
  4035b2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4035b4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4035b8:	fab3 f383 	clz	r3, r3
  4035bc:	095b      	lsrs	r3, r3, #5
  4035be:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  4035c0:	b672      	cpsid	i
  4035c2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4035c6:	2200      	movs	r2, #0
  4035c8:	4b0f      	ldr	r3, [pc, #60]	; (403608 <udd_ctrl_in_sent+0x14c>)
  4035ca:	701a      	strb	r2, [r3, #0]
	return flags;
  4035cc:	9a03      	ldr	r2, [sp, #12]
	udd_ack_nak_in(0);
  4035ce:	2310      	movs	r3, #16
  4035d0:	4916      	ldr	r1, [pc, #88]	; (40362c <udd_ctrl_in_sent+0x170>)
  4035d2:	600b      	str	r3, [r1, #0]
	udd_enable_nak_in_interrupt(0);
  4035d4:	3190      	adds	r1, #144	; 0x90
  4035d6:	600b      	str	r3, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
  4035d8:	b1a2      	cbz	r2, 403604 <udd_ctrl_in_sent+0x148>
		cpu_irq_enable();
  4035da:	2201      	movs	r2, #1
  4035dc:	4b0a      	ldr	r3, [pc, #40]	; (403608 <udd_ctrl_in_sent+0x14c>)
  4035de:	701a      	strb	r2, [r3, #0]
  4035e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4035e4:	b662      	cpsie	i
  4035e6:	e00d      	b.n	403604 <udd_ctrl_in_sent+0x148>
		b_shortpacket = true;
  4035e8:	2201      	movs	r2, #1
  4035ea:	4b0d      	ldr	r3, [pc, #52]	; (403620 <udd_ctrl_in_sent+0x164>)
  4035ec:	701a      	strb	r2, [r3, #0]
  4035ee:	e7a7      	b.n	403540 <udd_ctrl_in_sent+0x84>
	if (cpu_irq_is_enabled_flags(flags))
  4035f0:	b128      	cbz	r0, 4035fe <udd_ctrl_in_sent+0x142>
		cpu_irq_enable();
  4035f2:	2201      	movs	r2, #1
  4035f4:	4b04      	ldr	r3, [pc, #16]	; (403608 <udd_ctrl_in_sent+0x14c>)
  4035f6:	701a      	strb	r2, [r3, #0]
  4035f8:	f3bf 8f5f 	dmb	sy
  4035fc:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4035fe:	2204      	movs	r2, #4
  403600:	4b03      	ldr	r3, [pc, #12]	; (403610 <udd_ctrl_in_sent+0x154>)
  403602:	701a      	strb	r2, [r3, #0]
}
  403604:	b005      	add	sp, #20
  403606:	bd30      	pop	{r4, r5, pc}
  403608:	204000c8 	.word	0x204000c8
  40360c:	40038220 	.word	0x40038220
  403610:	20400bcc 	.word	0x20400bcc
  403614:	20400bc8 	.word	0x20400bc8
  403618:	20401068 	.word	0x20401068
  40361c:	20400bca 	.word	0x20400bca
  403620:	20400bc4 	.word	0x20400bc4
  403624:	40038130 	.word	0x40038130
  403628:	a0100000 	.word	0xa0100000
  40362c:	40038160 	.word	0x40038160
  403630:	004034ad 	.word	0x004034ad
  403634:	004033e5 	.word	0x004033e5

00403638 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
  403638:	7d03      	ldrb	r3, [r0, #20]
  40363a:	f013 0f01 	tst.w	r3, #1
  40363e:	d013      	beq.n	403668 <udd_ep_finish_job+0x30>
{
  403640:	b510      	push	{r4, lr}
  403642:	460c      	mov	r4, r1
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
  403644:	7d03      	ldrb	r3, [r0, #20]
  403646:	f36f 0300 	bfc	r3, #0, #1
  40364a:	7503      	strb	r3, [r0, #20]
	if (NULL == ptr_job->call_trans) {
  40364c:	6803      	ldr	r3, [r0, #0]
  40364e:	b153      	cbz	r3, 403666 <udd_ep_finish_job+0x2e>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
  403650:	4906      	ldr	r1, [pc, #24]	; (40366c <udd_ep_finish_job+0x34>)
  403652:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  403656:	f411 7f80 	tst.w	r1, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
  40365a:	bf18      	it	ne
  40365c:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
  403660:	6881      	ldr	r1, [r0, #8]
  403662:	4620      	mov	r0, r4
  403664:	4798      	blx	r3
  403666:	bd10      	pop	{r4, pc}
  403668:	4770      	bx	lr
  40366a:	bf00      	nop
  40366c:	40038100 	.word	0x40038100

00403670 <udd_ep_trans_done>:
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
  403670:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
  403672:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  403676:	4a5f      	ldr	r2, [pc, #380]	; (4037f4 <udd_ep_trans_done+0x184>)
  403678:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  40367c:	7d12      	ldrb	r2, [r2, #20]
  40367e:	f012 0f01 	tst.w	r2, #1
  403682:	f000 80b6 	beq.w	4037f2 <udd_ep_trans_done+0x182>
{
  403686:	b5f0      	push	{r4, r5, r6, r7, lr}
  403688:	b083      	sub	sp, #12
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
  40368a:	460a      	mov	r2, r1
  40368c:	4959      	ldr	r1, [pc, #356]	; (4037f4 <udd_ep_trans_done+0x184>)
  40368e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  403692:	68d1      	ldr	r1, [r2, #12]
  403694:	6892      	ldr	r2, [r2, #8]
  403696:	4291      	cmp	r1, r2
  403698:	d078      	beq.n	40378c <udd_ep_trans_done+0x11c>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
  40369a:	1a52      	subs	r2, r2, r1

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
  40369c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  4036a0:	d81b      	bhi.n	4036da <udd_ep_trans_done+0x6a>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
  4036a2:	0417      	lsls	r7, r2, #16
		}
		if (Is_udd_endpoint_in(ep)) {
  4036a4:	4c54      	ldr	r4, [pc, #336]	; (4037f8 <udd_ep_trans_done+0x188>)
  4036a6:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  4036aa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4036ae:	d018      	beq.n	4036e2 <udd_ep_trans_done+0x72>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
  4036b0:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  4036b4:	f3c5 1502 	ubfx	r5, r5, #4, #3
  4036b8:	2408      	movs	r4, #8
  4036ba:	40ac      	lsls	r4, r5
  4036bc:	3c01      	subs	r4, #1
  4036be:	4214      	tst	r4, r2
  4036c0:	d017      	beq.n	4036f2 <udd_ep_trans_done+0x82>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_B_EN;
  4036c2:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
  4036c6:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  4036ca:	4d4a      	ldr	r5, [pc, #296]	; (4037f4 <udd_ep_trans_done+0x184>)
  4036cc:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
  4036d0:	7d25      	ldrb	r5, [r4, #20]
  4036d2:	f36f 0541 	bfc	r5, #1, #1
  4036d6:	7525      	strb	r5, [r4, #20]
  4036d8:	e00b      	b.n	4036f2 <udd_ep_trans_done+0x82>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
  4036da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			udd_dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
  4036de:	2700      	movs	r7, #0
  4036e0:	e7e0      	b.n	4036a4 <udd_ep_trans_done+0x34>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
  4036e2:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  4036e6:	f3c5 25c1 	ubfx	r5, r5, #11, #2
  4036ea:	2d01      	cmp	r5, #1
  4036ec:	d037      	beq.n	40375e <udd_ep_trans_done+0xee>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_TR_IT
  4036ee:	f047 0714 	orr.w	r7, r7, #20
						| USBHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
  4036f2:	4c42      	ldr	r4, [pc, #264]	; (4037fc <udd_ep_trans_done+0x18c>)
  4036f4:	eb04 1400 	add.w	r4, r4, r0, lsl #4
  4036f8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
  4036fc:	4e3d      	ldr	r6, [pc, #244]	; (4037f4 <udd_ep_trans_done+0x184>)
  4036fe:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  403702:	686d      	ldr	r5, [r5, #4]
  403704:	4429      	add	r1, r5
  403706:	6061      	str	r1, [r4, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403708:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40370c:	fab1 f181 	clz	r1, r1
  403710:	0949      	lsrs	r1, r1, #5
  403712:	9101      	str	r1, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403714:	b672      	cpsid	i
  403716:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40371a:	2500      	movs	r5, #0
  40371c:	4938      	ldr	r1, [pc, #224]	; (403800 <udd_ep_trans_done+0x190>)
  40371e:	700d      	strb	r5, [r1, #0]
	return flags;
  403720:	9d01      	ldr	r5, [sp, #4]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
  403722:	68e1      	ldr	r1, [r4, #12]
  403724:	f011 0f10 	tst.w	r1, #16
  403728:	d122      	bne.n	403770 <udd_ep_trans_done+0x100>
		udd_dma_ctrl |= USBHS_DEVDMACONTROL_END_BUFFIT |
  40372a:	f047 0721 	orr.w	r7, r7, #33	; 0x21
				& USBHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
  40372e:	60a7      	str	r7, [r4, #8]
			ptr_job->buf_cnt += next_trans;
  403730:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  403734:	eb06 01c0 	add.w	r1, r6, r0, lsl #3
  403738:	68c8      	ldr	r0, [r1, #12]
  40373a:	4410      	add	r0, r2
  40373c:	60c8      	str	r0, [r1, #12]
			ptr_job->buf_load = next_trans;
  40373e:	610a      	str	r2, [r1, #16]
			udd_enable_endpoint_dma_interrupt(ep);
  403740:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  403744:	fa00 f303 	lsl.w	r3, r0, r3
  403748:	4a2e      	ldr	r2, [pc, #184]	; (403804 <udd_ep_trans_done+0x194>)
  40374a:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
  40374c:	2d00      	cmp	r5, #0
  40374e:	d04e      	beq.n	4037ee <udd_ep_trans_done+0x17e>
		cpu_irq_enable();
  403750:	2201      	movs	r2, #1
  403752:	4b2b      	ldr	r3, [pc, #172]	; (403800 <udd_ep_trans_done+0x190>)
  403754:	701a      	strb	r2, [r3, #0]
  403756:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40375a:	b662      	cpsie	i
  40375c:	e047      	b.n	4037ee <udd_ep_trans_done+0x17e>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
  40375e:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  403762:	f3c5 1502 	ubfx	r5, r5, #4, #3
  403766:	2408      	movs	r4, #8
  403768:	40ac      	lsls	r4, r5
  40376a:	42a2      	cmp	r2, r4
  40376c:	d8c1      	bhi.n	4036f2 <udd_ep_trans_done+0x82>
  40376e:	e7be      	b.n	4036ee <udd_ep_trans_done+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
  403770:	b12d      	cbz	r5, 40377e <udd_ep_trans_done+0x10e>
		cpu_irq_enable();
  403772:	2101      	movs	r1, #1
  403774:	4a22      	ldr	r2, [pc, #136]	; (403800 <udd_ep_trans_done+0x190>)
  403776:	7011      	strb	r1, [r2, #0]
  403778:	f3bf 8f5f 	dmb	sy
  40377c:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
  40377e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  403782:	491c      	ldr	r1, [pc, #112]	; (4037f4 <udd_ep_trans_done+0x184>)
  403784:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  403788:	68d1      	ldr	r1, [r2, #12]
  40378a:	6091      	str	r1, [r2, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
  40378c:	4a1a      	ldr	r2, [pc, #104]	; (4037f8 <udd_ep_trans_done+0x188>)
  40378e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  403792:	f412 7f80 	tst.w	r2, #256	; 0x100
  403796:	d021      	beq.n	4037dc <udd_ep_trans_done+0x16c>
		if (ptr_job->b_shortpacket) {
  403798:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  40379c:	4915      	ldr	r1, [pc, #84]	; (4037f4 <udd_ep_trans_done+0x184>)
  40379e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4037a2:	7d12      	ldrb	r2, [r2, #20]
  4037a4:	f012 0f02 	tst.w	r2, #2
  4037a8:	d018      	beq.n	4037dc <udd_ep_trans_done+0x16c>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
  4037aa:	2201      	movs	r2, #1
  4037ac:	4b16      	ldr	r3, [pc, #88]	; (403808 <udd_ep_trans_done+0x198>)
  4037ae:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			if (Is_udd_write_enabled(ep)) {
  4037b2:	3b30      	subs	r3, #48	; 0x30
  4037b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  4037b8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4037bc:	d002      	beq.n	4037c4 <udd_ep_trans_done+0x154>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
  4037be:	4b13      	ldr	r3, [pc, #76]	; (40380c <udd_ep_trans_done+0x19c>)
  4037c0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
  4037c4:	2201      	movs	r2, #1
  4037c6:	4b12      	ldr	r3, [pc, #72]	; (403810 <udd_ep_trans_done+0x1a0>)
  4037c8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			udd_enable_endpoint_interrupt(ep);
  4037cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4037d0:	fa02 f000 	lsl.w	r0, r2, r0
  4037d4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
  4037d8:	6198      	str	r0, [r3, #24]
			return;
  4037da:	e008      	b.n	4037ee <udd_ep_trans_done+0x17e>
  4037dc:	4602      	mov	r2, r0
	ptr_job = &udd_ep_job[ep - 1];
  4037de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
  4037e2:	2100      	movs	r1, #0
  4037e4:	4803      	ldr	r0, [pc, #12]	; (4037f4 <udd_ep_trans_done+0x184>)
  4037e6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
  4037ea:	4b0a      	ldr	r3, [pc, #40]	; (403814 <udd_ep_trans_done+0x1a4>)
  4037ec:	4798      	blx	r3
}
  4037ee:	b003      	add	sp, #12
  4037f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4037f2:	4770      	bx	lr
  4037f4:	20400bd0 	.word	0x20400bd0
  4037f8:	40038100 	.word	0x40038100
  4037fc:	40038300 	.word	0x40038300
  403800:	204000c8 	.word	0x204000c8
  403804:	40038000 	.word	0x40038000
  403808:	40038160 	.word	0x40038160
  40380c:	40038190 	.word	0x40038190
  403810:	400381f0 	.word	0x400381f0
  403814:	00403639 	.word	0x00403639

00403818 <USBHS_Handler>:
{
  403818:	b570      	push	{r4, r5, r6, lr}
  40381a:	b084      	sub	sp, #16
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  40381c:	4ba4      	ldr	r3, [pc, #656]	; (403ab0 <USBHS_Handler+0x298>)
  40381e:	4798      	blx	r3
  403820:	b920      	cbnz	r0, 40382c <USBHS_Handler+0x14>
  403822:	4ba4      	ldr	r3, [pc, #656]	; (403ab4 <USBHS_Handler+0x29c>)
  403824:	685b      	ldr	r3, [r3, #4]
  403826:	f013 0f01 	tst.w	r3, #1
  40382a:	d010      	beq.n	40384e <USBHS_Handler+0x36>
	if (Is_udd_sof()) {
  40382c:	4ba1      	ldr	r3, [pc, #644]	; (403ab4 <USBHS_Handler+0x29c>)
  40382e:	685b      	ldr	r3, [r3, #4]
  403830:	f013 0f04 	tst.w	r3, #4
  403834:	d015      	beq.n	403862 <USBHS_Handler+0x4a>
		udd_ack_sof();
  403836:	4b9f      	ldr	r3, [pc, #636]	; (403ab4 <USBHS_Handler+0x29c>)
  403838:	2204      	movs	r2, #4
  40383a:	609a      	str	r2, [r3, #8]
		if (Is_udd_full_speed_mode()) {
  40383c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
  403840:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  403844:	d00a      	beq.n	40385c <USBHS_Handler+0x44>
		UDC_SOF_EVENT();
  403846:	4b9c      	ldr	r3, [pc, #624]	; (403ab8 <USBHS_Handler+0x2a0>)
  403848:	4798      	blx	r3
}
  40384a:	b004      	add	sp, #16
  40384c:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
  40384e:	b672      	cpsid	i
  403850:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  403854:	2200      	movs	r2, #0
  403856:	4b99      	ldr	r3, [pc, #612]	; (403abc <USBHS_Handler+0x2a4>)
  403858:	701a      	strb	r2, [r3, #0]
		return;
  40385a:	e7f6      	b.n	40384a <USBHS_Handler+0x32>
			udc_sof_notify();
  40385c:	4b98      	ldr	r3, [pc, #608]	; (403ac0 <USBHS_Handler+0x2a8>)
  40385e:	4798      	blx	r3
  403860:	e7f1      	b.n	403846 <USBHS_Handler+0x2e>
	if (Is_udd_msof()) {
  403862:	4b94      	ldr	r3, [pc, #592]	; (403ab4 <USBHS_Handler+0x29c>)
  403864:	685b      	ldr	r3, [r3, #4]
  403866:	f013 0f02 	tst.w	r3, #2
  40386a:	f040 80a7 	bne.w	4039bc <USBHS_Handler+0x1a4>
	if (!Is_udd_endpoint_interrupt(0)) {
  40386e:	4b91      	ldr	r3, [pc, #580]	; (403ab4 <USBHS_Handler+0x29c>)
  403870:	685b      	ldr	r3, [r3, #4]
  403872:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  403876:	d027      	beq.n	4038c8 <USBHS_Handler+0xb0>
	udd_disable_nak_in_interrupt(0);
  403878:	4b92      	ldr	r3, [pc, #584]	; (403ac4 <USBHS_Handler+0x2ac>)
  40387a:	2210      	movs	r2, #16
  40387c:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
  40387e:	2208      	movs	r2, #8
  403880:	601a      	str	r2, [r3, #0]
	if (Is_udd_setup_received(0)) {
  403882:	3bf0      	subs	r3, #240	; 0xf0
  403884:	681b      	ldr	r3, [r3, #0]
  403886:	f013 0f04 	tst.w	r3, #4
  40388a:	f040 809d 	bne.w	4039c8 <USBHS_Handler+0x1b0>
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
  40388e:	4b8e      	ldr	r3, [pc, #568]	; (403ac8 <USBHS_Handler+0x2b0>)
  403890:	681b      	ldr	r3, [r3, #0]
  403892:	f013 0f01 	tst.w	r3, #1
  403896:	d005      	beq.n	4038a4 <USBHS_Handler+0x8c>
  403898:	4b8c      	ldr	r3, [pc, #560]	; (403acc <USBHS_Handler+0x2b4>)
  40389a:	681b      	ldr	r3, [r3, #0]
  40389c:	f013 0f01 	tst.w	r3, #1
  4038a0:	f040 80f7 	bne.w	403a92 <USBHS_Handler+0x27a>
	if (Is_udd_out_received(0)) {
  4038a4:	4b88      	ldr	r3, [pc, #544]	; (403ac8 <USBHS_Handler+0x2b0>)
  4038a6:	681b      	ldr	r3, [r3, #0]
  4038a8:	f013 0f02 	tst.w	r3, #2
  4038ac:	f040 80f4 	bne.w	403a98 <USBHS_Handler+0x280>
	if (Is_udd_nak_out(0)) {
  4038b0:	4b85      	ldr	r3, [pc, #532]	; (403ac8 <USBHS_Handler+0x2b0>)
  4038b2:	681b      	ldr	r3, [r3, #0]
  4038b4:	f013 0f08 	tst.w	r3, #8
  4038b8:	f040 81af 	bne.w	403c1a <USBHS_Handler+0x402>
	if (Is_udd_nak_in(0)) {
  4038bc:	4b82      	ldr	r3, [pc, #520]	; (403ac8 <USBHS_Handler+0x2b0>)
  4038be:	681b      	ldr	r3, [r3, #0]
  4038c0:	f013 0f10 	tst.w	r3, #16
  4038c4:	f040 81bc 	bne.w	403c40 <USBHS_Handler+0x428>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
  4038c8:	4b7a      	ldr	r3, [pc, #488]	; (403ab4 <USBHS_Handler+0x29c>)
  4038ca:	691b      	ldr	r3, [r3, #16]
  4038cc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  4038d0:	d005      	beq.n	4038de <USBHS_Handler+0xc6>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
  4038d2:	4b78      	ldr	r3, [pc, #480]	; (403ab4 <USBHS_Handler+0x29c>)
  4038d4:	685b      	ldr	r3, [r3, #4]
  4038d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  4038da:	f040 81eb 	bne.w	403cb4 <USBHS_Handler+0x49c>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
  4038de:	4b75      	ldr	r3, [pc, #468]	; (403ab4 <USBHS_Handler+0x29c>)
  4038e0:	691b      	ldr	r3, [r3, #16]
  4038e2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4038e6:	d010      	beq.n	40390a <USBHS_Handler+0xf2>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
  4038e8:	4b79      	ldr	r3, [pc, #484]	; (403ad0 <USBHS_Handler+0x2b8>)
  4038ea:	681b      	ldr	r3, [r3, #0]
  4038ec:	f013 0f01 	tst.w	r3, #1
  4038f0:	f040 8299 	bne.w	403e26 <USBHS_Handler+0x60e>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
  4038f4:	4b76      	ldr	r3, [pc, #472]	; (403ad0 <USBHS_Handler+0x2b8>)
  4038f6:	681b      	ldr	r3, [r3, #0]
  4038f8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  4038fc:	d005      	beq.n	40390a <USBHS_Handler+0xf2>
					&& (0 == udd_nb_busy_bank(ep))) {
  4038fe:	4b75      	ldr	r3, [pc, #468]	; (403ad4 <USBHS_Handler+0x2bc>)
  403900:	681b      	ldr	r3, [r3, #0]
  403902:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  403906:	f000 81e3 	beq.w	403cd0 <USBHS_Handler+0x4b8>
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
  40390a:	4b6a      	ldr	r3, [pc, #424]	; (403ab4 <USBHS_Handler+0x29c>)
  40390c:	691b      	ldr	r3, [r3, #16]
  40390e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  403912:	f040 81ad 	bne.w	403c70 <USBHS_Handler+0x458>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
  403916:	4b67      	ldr	r3, [pc, #412]	; (403ab4 <USBHS_Handler+0x29c>)
  403918:	691b      	ldr	r3, [r3, #16]
  40391a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  40391e:	d015      	beq.n	40394c <USBHS_Handler+0x134>
			if (Is_udd_in_send_interrupt_enabled(ep)
  403920:	4b6d      	ldr	r3, [pc, #436]	; (403ad8 <USBHS_Handler+0x2c0>)
  403922:	681b      	ldr	r3, [r3, #0]
  403924:	f013 0f01 	tst.w	r3, #1
  403928:	d005      	beq.n	403936 <USBHS_Handler+0x11e>
					&& Is_udd_in_send(ep)) {
  40392a:	4b6c      	ldr	r3, [pc, #432]	; (403adc <USBHS_Handler+0x2c4>)
  40392c:	681b      	ldr	r3, [r3, #0]
  40392e:	f013 0f01 	tst.w	r3, #1
  403932:	f040 81c4 	bne.w	403cbe <USBHS_Handler+0x4a6>
			if (Is_udd_bank_interrupt_enabled(ep)
  403936:	4b68      	ldr	r3, [pc, #416]	; (403ad8 <USBHS_Handler+0x2c0>)
  403938:	681b      	ldr	r3, [r3, #0]
  40393a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  40393e:	d005      	beq.n	40394c <USBHS_Handler+0x134>
					&& (0 == udd_nb_busy_bank(ep))) {
  403940:	4b66      	ldr	r3, [pc, #408]	; (403adc <USBHS_Handler+0x2c4>)
  403942:	681b      	ldr	r3, [r3, #0]
  403944:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  403948:	f000 81bd 	beq.w	403cc6 <USBHS_Handler+0x4ae>
	if (Is_udd_reset()) {
  40394c:	4b59      	ldr	r3, [pc, #356]	; (403ab4 <USBHS_Handler+0x29c>)
  40394e:	685b      	ldr	r3, [r3, #4]
  403950:	f013 0f08 	tst.w	r3, #8
  403954:	f040 81dd 	bne.w	403d12 <USBHS_Handler+0x4fa>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  403958:	4b56      	ldr	r3, [pc, #344]	; (403ab4 <USBHS_Handler+0x29c>)
  40395a:	691b      	ldr	r3, [r3, #16]
  40395c:	f013 0f01 	tst.w	r3, #1
  403960:	d005      	beq.n	40396e <USBHS_Handler+0x156>
  403962:	4b54      	ldr	r3, [pc, #336]	; (403ab4 <USBHS_Handler+0x29c>)
  403964:	685b      	ldr	r3, [r3, #4]
  403966:	f013 0f01 	tst.w	r3, #1
  40396a:	f040 8245 	bne.w	403df8 <USBHS_Handler+0x5e0>
	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
  40396e:	4b51      	ldr	r3, [pc, #324]	; (403ab4 <USBHS_Handler+0x29c>)
  403970:	691b      	ldr	r3, [r3, #16]
  403972:	f013 0f10 	tst.w	r3, #16
  403976:	f43f af68 	beq.w	40384a <USBHS_Handler+0x32>
  40397a:	4b4e      	ldr	r3, [pc, #312]	; (403ab4 <USBHS_Handler+0x29c>)
  40397c:	685b      	ldr	r3, [r3, #4]
  40397e:	f013 0f10 	tst.w	r3, #16
  403982:	f43f af62 	beq.w	40384a <USBHS_Handler+0x32>
		otg_unfreeze_clock();
  403986:	4a4b      	ldr	r2, [pc, #300]	; (403ab4 <USBHS_Handler+0x29c>)
  403988:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  40398c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  403990:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		while (!Is_otg_clock_usable()) {
  403994:	4613      	mov	r3, r2
  403996:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
  40399a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
  40399e:	d103      	bne.n	4039a8 <USBHS_Handler+0x190>
			if (Is_udd_suspend()) {
  4039a0:	685a      	ldr	r2, [r3, #4]
  4039a2:	f012 0f01 	tst.w	r2, #1
  4039a6:	d0f6      	beq.n	403996 <USBHS_Handler+0x17e>
		udd_disable_wake_up_interrupt();
  4039a8:	4b42      	ldr	r3, [pc, #264]	; (403ab4 <USBHS_Handler+0x29c>)
  4039aa:	2210      	movs	r2, #16
  4039ac:	615a      	str	r2, [r3, #20]
		udd_enable_suspend_interrupt();
  4039ae:	2001      	movs	r0, #1
  4039b0:	6198      	str	r0, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
  4039b2:	4b4b      	ldr	r3, [pc, #300]	; (403ae0 <USBHS_Handler+0x2c8>)
  4039b4:	4798      	blx	r3
		UDC_RESUME_EVENT();
  4039b6:	4b4b      	ldr	r3, [pc, #300]	; (403ae4 <USBHS_Handler+0x2cc>)
  4039b8:	4798      	blx	r3
		goto udd_interrupt_end;
  4039ba:	e746      	b.n	40384a <USBHS_Handler+0x32>
		udd_ack_msof();
  4039bc:	2202      	movs	r2, #2
  4039be:	4b3d      	ldr	r3, [pc, #244]	; (403ab4 <USBHS_Handler+0x29c>)
  4039c0:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
  4039c2:	4b3f      	ldr	r3, [pc, #252]	; (403ac0 <USBHS_Handler+0x2a8>)
  4039c4:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  4039c6:	e740      	b.n	40384a <USBHS_Handler+0x32>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  4039c8:	4b47      	ldr	r3, [pc, #284]	; (403ae8 <USBHS_Handler+0x2d0>)
  4039ca:	781b      	ldrb	r3, [r3, #0]
  4039cc:	2b00      	cmp	r3, #0
  4039ce:	d141      	bne.n	403a54 <USBHS_Handler+0x23c>
	if (8 != udd_byte_count(0)) {
  4039d0:	4b3d      	ldr	r3, [pc, #244]	; (403ac8 <USBHS_Handler+0x2b0>)
  4039d2:	681b      	ldr	r3, [r3, #0]
  4039d4:	f3c3 530a 	ubfx	r3, r3, #20, #11
  4039d8:	2b08      	cmp	r3, #8
  4039da:	d140      	bne.n	403a5e <USBHS_Handler+0x246>
  4039dc:	4a43      	ldr	r2, [pc, #268]	; (403aec <USBHS_Handler+0x2d4>)
  4039de:	4b44      	ldr	r3, [pc, #272]	; (403af0 <USBHS_Handler+0x2d8>)
	for (i = 0; i < 8; i++) {
  4039e0:	4844      	ldr	r0, [pc, #272]	; (403af4 <USBHS_Handler+0x2dc>)
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
  4039e2:	f813 1b01 	ldrb.w	r1, [r3], #1
  4039e6:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
  4039ea:	4283      	cmp	r3, r0
  4039ec:	d1f9      	bne.n	4039e2 <USBHS_Handler+0x1ca>
	if (udc_process_setup() == false) {
  4039ee:	4b42      	ldr	r3, [pc, #264]	; (403af8 <USBHS_Handler+0x2e0>)
  4039f0:	4798      	blx	r3
  4039f2:	2800      	cmp	r0, #0
  4039f4:	d039      	beq.n	403a6a <USBHS_Handler+0x252>
	udd_ack_setup_received(0);
  4039f6:	2204      	movs	r2, #4
  4039f8:	4b40      	ldr	r3, [pc, #256]	; (403afc <USBHS_Handler+0x2e4>)
  4039fa:	601a      	str	r2, [r3, #0]
	if (Udd_setup_is_in()) {
  4039fc:	4b40      	ldr	r3, [pc, #256]	; (403b00 <USBHS_Handler+0x2e8>)
  4039fe:	f993 3000 	ldrsb.w	r3, [r3]
  403a02:	2b00      	cmp	r3, #0
  403a04:	db37      	blt.n	403a76 <USBHS_Handler+0x25e>
		if (0 == udd_g_ctrlreq.req.wLength) {
  403a06:	4b3e      	ldr	r3, [pc, #248]	; (403b00 <USBHS_Handler+0x2e8>)
  403a08:	88db      	ldrh	r3, [r3, #6]
  403a0a:	2b00      	cmp	r3, #0
  403a0c:	d03e      	beq.n	403a8c <USBHS_Handler+0x274>
		udd_ctrl_prev_payload_buf_cnt = 0;
  403a0e:	2200      	movs	r2, #0
  403a10:	4b3c      	ldr	r3, [pc, #240]	; (403b04 <USBHS_Handler+0x2ec>)
  403a12:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
  403a14:	4b3c      	ldr	r3, [pc, #240]	; (403b08 <USBHS_Handler+0x2f0>)
  403a16:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  403a18:	2101      	movs	r1, #1
  403a1a:	4b33      	ldr	r3, [pc, #204]	; (403ae8 <USBHS_Handler+0x2d0>)
  403a1c:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
  403a1e:	2110      	movs	r1, #16
  403a20:	4b36      	ldr	r3, [pc, #216]	; (403afc <USBHS_Handler+0x2e4>)
  403a22:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403a24:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403a28:	fab3 f383 	clz	r3, r3
  403a2c:	095b      	lsrs	r3, r3, #5
  403a2e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403a30:	b672      	cpsid	i
  403a32:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403a36:	4b21      	ldr	r3, [pc, #132]	; (403abc <USBHS_Handler+0x2a4>)
  403a38:	701a      	strb	r2, [r3, #0]
	return flags;
  403a3a:	9b01      	ldr	r3, [sp, #4]
		udd_enable_nak_in_interrupt(0);
  403a3c:	4a33      	ldr	r2, [pc, #204]	; (403b0c <USBHS_Handler+0x2f4>)
  403a3e:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403a40:	2b00      	cmp	r3, #0
  403a42:	f43f af02 	beq.w	40384a <USBHS_Handler+0x32>
		cpu_irq_enable();
  403a46:	2201      	movs	r2, #1
  403a48:	4b1c      	ldr	r3, [pc, #112]	; (403abc <USBHS_Handler+0x2a4>)
  403a4a:	701a      	strb	r2, [r3, #0]
  403a4c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403a50:	b662      	cpsie	i
  403a52:	e6fa      	b.n	40384a <USBHS_Handler+0x32>
		udd_ctrl_endofrequest();
  403a54:	4b2e      	ldr	r3, [pc, #184]	; (403b10 <USBHS_Handler+0x2f8>)
  403a56:	4798      	blx	r3
		udd_ctrl_init();
  403a58:	4b2e      	ldr	r3, [pc, #184]	; (403b14 <USBHS_Handler+0x2fc>)
  403a5a:	4798      	blx	r3
  403a5c:	e7b8      	b.n	4039d0 <USBHS_Handler+0x1b8>
		udd_ctrl_stall_data();
  403a5e:	4b2e      	ldr	r3, [pc, #184]	; (403b18 <USBHS_Handler+0x300>)
  403a60:	4798      	blx	r3
		udd_ack_setup_received(0);
  403a62:	2204      	movs	r2, #4
  403a64:	4b25      	ldr	r3, [pc, #148]	; (403afc <USBHS_Handler+0x2e4>)
  403a66:	601a      	str	r2, [r3, #0]
  403a68:	e6ef      	b.n	40384a <USBHS_Handler+0x32>
		udd_ctrl_stall_data();
  403a6a:	4b2b      	ldr	r3, [pc, #172]	; (403b18 <USBHS_Handler+0x300>)
  403a6c:	4798      	blx	r3
		udd_ack_setup_received(0);
  403a6e:	2204      	movs	r2, #4
  403a70:	4b22      	ldr	r3, [pc, #136]	; (403afc <USBHS_Handler+0x2e4>)
  403a72:	601a      	str	r2, [r3, #0]
  403a74:	e6e9      	b.n	40384a <USBHS_Handler+0x32>
		udd_ctrl_prev_payload_buf_cnt = 0;
  403a76:	2300      	movs	r3, #0
  403a78:	4a22      	ldr	r2, [pc, #136]	; (403b04 <USBHS_Handler+0x2ec>)
  403a7a:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
  403a7c:	4a22      	ldr	r2, [pc, #136]	; (403b08 <USBHS_Handler+0x2f0>)
  403a7e:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  403a80:	2202      	movs	r2, #2
  403a82:	4b19      	ldr	r3, [pc, #100]	; (403ae8 <USBHS_Handler+0x2d0>)
  403a84:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  403a86:	4b25      	ldr	r3, [pc, #148]	; (403b1c <USBHS_Handler+0x304>)
  403a88:	4798      	blx	r3
  403a8a:	e6de      	b.n	40384a <USBHS_Handler+0x32>
			udd_ctrl_send_zlp_in();
  403a8c:	4b24      	ldr	r3, [pc, #144]	; (403b20 <USBHS_Handler+0x308>)
  403a8e:	4798      	blx	r3
  403a90:	e6db      	b.n	40384a <USBHS_Handler+0x32>
		udd_ctrl_in_sent();
  403a92:	4b22      	ldr	r3, [pc, #136]	; (403b1c <USBHS_Handler+0x304>)
  403a94:	4798      	blx	r3
  403a96:	e6d8      	b.n	40384a <USBHS_Handler+0x32>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  403a98:	4b13      	ldr	r3, [pc, #76]	; (403ae8 <USBHS_Handler+0x2d0>)
  403a9a:	781b      	ldrb	r3, [r3, #0]
  403a9c:	2b01      	cmp	r3, #1
  403a9e:	d046      	beq.n	403b2e <USBHS_Handler+0x316>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  403aa0:	2b02      	cmp	r3, #2
  403aa2:	d03f      	beq.n	403b24 <USBHS_Handler+0x30c>
  403aa4:	2b04      	cmp	r3, #4
  403aa6:	d03d      	beq.n	403b24 <USBHS_Handler+0x30c>
			udd_ctrl_stall_data();
  403aa8:	4b1b      	ldr	r3, [pc, #108]	; (403b18 <USBHS_Handler+0x300>)
  403aaa:	4798      	blx	r3
  403aac:	e03c      	b.n	403b28 <USBHS_Handler+0x310>
  403aae:	bf00      	nop
  403ab0:	00403331 	.word	0x00403331
  403ab4:	40038000 	.word	0x40038000
  403ab8:	00404e99 	.word	0x00404e99
  403abc:	204000c8 	.word	0x204000c8
  403ac0:	004025e9 	.word	0x004025e9
  403ac4:	40038220 	.word	0x40038220
  403ac8:	40038130 	.word	0x40038130
  403acc:	400381c0 	.word	0x400381c0
  403ad0:	400381c4 	.word	0x400381c4
  403ad4:	40038134 	.word	0x40038134
  403ad8:	400381c8 	.word	0x400381c8
  403adc:	40038138 	.word	0x40038138
  403ae0:	00403341 	.word	0x00403341
  403ae4:	00404e8d 	.word	0x00404e8d
  403ae8:	20400bcc 	.word	0x20400bcc
  403aec:	20401067 	.word	0x20401067
  403af0:	a0100000 	.word	0xa0100000
  403af4:	a0100008 	.word	0xa0100008
  403af8:	00402629 	.word	0x00402629
  403afc:	40038160 	.word	0x40038160
  403b00:	20401068 	.word	0x20401068
  403b04:	20400bca 	.word	0x20400bca
  403b08:	20400bc8 	.word	0x20400bc8
  403b0c:	400381f0 	.word	0x400381f0
  403b10:	004034ad 	.word	0x004034ad
  403b14:	004033e5 	.word	0x004033e5
  403b18:	00403441 	.word	0x00403441
  403b1c:	004034bd 	.word	0x004034bd
  403b20:	00403459 	.word	0x00403459
			udd_ctrl_endofrequest();
  403b24:	4b9e      	ldr	r3, [pc, #632]	; (403da0 <USBHS_Handler+0x588>)
  403b26:	4798      	blx	r3
		udd_ctrl_init();
  403b28:	4b9e      	ldr	r3, [pc, #632]	; (403da4 <USBHS_Handler+0x58c>)
  403b2a:	4798      	blx	r3
  403b2c:	e68d      	b.n	40384a <USBHS_Handler+0x32>
	nb_data = udd_byte_count(0);
  403b2e:	4b9e      	ldr	r3, [pc, #632]	; (403da8 <USBHS_Handler+0x590>)
  403b30:	6818      	ldr	r0, [r3, #0]
  403b32:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
  403b36:	4b9d      	ldr	r3, [pc, #628]	; (403dac <USBHS_Handler+0x594>)
  403b38:	899b      	ldrh	r3, [r3, #12]
  403b3a:	4a9d      	ldr	r2, [pc, #628]	; (403db0 <USBHS_Handler+0x598>)
  403b3c:	8814      	ldrh	r4, [r2, #0]
  403b3e:	1822      	adds	r2, r4, r0
  403b40:	4293      	cmp	r3, r2
  403b42:	da01      	bge.n	403b48 <USBHS_Handler+0x330>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
  403b44:	1b1b      	subs	r3, r3, r4
  403b46:	b298      	uxth	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
  403b48:	4b98      	ldr	r3, [pc, #608]	; (403dac <USBHS_Handler+0x594>)
  403b4a:	689a      	ldr	r2, [r3, #8]
	for (i = 0; i < nb_data; i++) {
  403b4c:	b178      	cbz	r0, 403b6e <USBHS_Handler+0x356>
  403b4e:	1e63      	subs	r3, r4, #1
  403b50:	441a      	add	r2, r3
  403b52:	4b98      	ldr	r3, [pc, #608]	; (403db4 <USBHS_Handler+0x59c>)
		*ptr_dest++ = *ptr_src++;
  403b54:	f813 1b01 	ldrb.w	r1, [r3], #1
  403b58:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < nb_data; i++) {
  403b5c:	b2d9      	uxtb	r1, r3
  403b5e:	4281      	cmp	r1, r0
  403b60:	d3f8      	bcc.n	403b54 <USBHS_Handler+0x33c>
	udd_ctrl_payload_buf_cnt += nb_data;
  403b62:	4404      	add	r4, r0
  403b64:	b2a4      	uxth	r4, r4
  403b66:	4b92      	ldr	r3, [pc, #584]	; (403db0 <USBHS_Handler+0x598>)
  403b68:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  403b6a:	2840      	cmp	r0, #64	; 0x40
  403b6c:	d00c      	beq.n	403b88 <USBHS_Handler+0x370>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
  403b6e:	4b8f      	ldr	r3, [pc, #572]	; (403dac <USBHS_Handler+0x594>)
  403b70:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  403b72:	695b      	ldr	r3, [r3, #20]
  403b74:	b113      	cbz	r3, 403b7c <USBHS_Handler+0x364>
			if (!udd_g_ctrlreq.over_under_run()) {
  403b76:	4798      	blx	r3
  403b78:	2800      	cmp	r0, #0
  403b7a:	d02e      	beq.n	403bda <USBHS_Handler+0x3c2>
		udd_ack_out_received(0);
  403b7c:	2202      	movs	r2, #2
  403b7e:	4b8e      	ldr	r3, [pc, #568]	; (403db8 <USBHS_Handler+0x5a0>)
  403b80:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
  403b82:	4b8e      	ldr	r3, [pc, #568]	; (403dbc <USBHS_Handler+0x5a4>)
  403b84:	4798      	blx	r3
  403b86:	e660      	b.n	40384a <USBHS_Handler+0x32>
			|| (udd_g_ctrlreq.req.wLength <=
  403b88:	4b88      	ldr	r3, [pc, #544]	; (403dac <USBHS_Handler+0x594>)
  403b8a:	88da      	ldrh	r2, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
  403b8c:	4b8c      	ldr	r3, [pc, #560]	; (403dc0 <USBHS_Handler+0x5a8>)
  403b8e:	881b      	ldrh	r3, [r3, #0]
  403b90:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
  403b92:	429a      	cmp	r2, r3
  403b94:	ddeb      	ble.n	403b6e <USBHS_Handler+0x356>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
  403b96:	4b85      	ldr	r3, [pc, #532]	; (403dac <USBHS_Handler+0x594>)
  403b98:	899b      	ldrh	r3, [r3, #12]
  403b9a:	42a3      	cmp	r3, r4
  403b9c:	d023      	beq.n	403be6 <USBHS_Handler+0x3ce>
	udd_ack_out_received(0);
  403b9e:	4b86      	ldr	r3, [pc, #536]	; (403db8 <USBHS_Handler+0x5a0>)
  403ba0:	2202      	movs	r2, #2
  403ba2:	601a      	str	r2, [r3, #0]
	udd_ack_nak_in(0);
  403ba4:	2210      	movs	r2, #16
  403ba6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403ba8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403bac:	fab3 f383 	clz	r3, r3
  403bb0:	095b      	lsrs	r3, r3, #5
  403bb2:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  403bb4:	b672      	cpsid	i
  403bb6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403bba:	2100      	movs	r1, #0
  403bbc:	4b81      	ldr	r3, [pc, #516]	; (403dc4 <USBHS_Handler+0x5ac>)
  403bbe:	7019      	strb	r1, [r3, #0]
	return flags;
  403bc0:	9b02      	ldr	r3, [sp, #8]
	udd_enable_nak_in_interrupt(0);
  403bc2:	4981      	ldr	r1, [pc, #516]	; (403dc8 <USBHS_Handler+0x5b0>)
  403bc4:	600a      	str	r2, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
  403bc6:	2b00      	cmp	r3, #0
  403bc8:	f43f ae3f 	beq.w	40384a <USBHS_Handler+0x32>
		cpu_irq_enable();
  403bcc:	2201      	movs	r2, #1
  403bce:	4b7d      	ldr	r3, [pc, #500]	; (403dc4 <USBHS_Handler+0x5ac>)
  403bd0:	701a      	strb	r2, [r3, #0]
  403bd2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403bd6:	b662      	cpsie	i
  403bd8:	e637      	b.n	40384a <USBHS_Handler+0x32>
				udd_ctrl_stall_data();
  403bda:	4b7c      	ldr	r3, [pc, #496]	; (403dcc <USBHS_Handler+0x5b4>)
  403bdc:	4798      	blx	r3
				udd_ack_out_received(0);
  403bde:	2202      	movs	r2, #2
  403be0:	4b75      	ldr	r3, [pc, #468]	; (403db8 <USBHS_Handler+0x5a0>)
  403be2:	601a      	str	r2, [r3, #0]
  403be4:	e631      	b.n	40384a <USBHS_Handler+0x32>
		if (!udd_g_ctrlreq.over_under_run) {
  403be6:	4b71      	ldr	r3, [pc, #452]	; (403dac <USBHS_Handler+0x594>)
  403be8:	695b      	ldr	r3, [r3, #20]
  403bea:	b153      	cbz	r3, 403c02 <USBHS_Handler+0x3ea>
		if (!udd_g_ctrlreq.over_under_run()) {
  403bec:	4798      	blx	r3
  403bee:	b170      	cbz	r0, 403c0e <USBHS_Handler+0x3f6>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
  403bf0:	4973      	ldr	r1, [pc, #460]	; (403dc0 <USBHS_Handler+0x5a8>)
  403bf2:	4a6f      	ldr	r2, [pc, #444]	; (403db0 <USBHS_Handler+0x598>)
  403bf4:	880b      	ldrh	r3, [r1, #0]
  403bf6:	8810      	ldrh	r0, [r2, #0]
  403bf8:	4403      	add	r3, r0
  403bfa:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
  403bfc:	2300      	movs	r3, #0
  403bfe:	8013      	strh	r3, [r2, #0]
  403c00:	e7cd      	b.n	403b9e <USBHS_Handler+0x386>
			udd_ctrl_stall_data();
  403c02:	4b72      	ldr	r3, [pc, #456]	; (403dcc <USBHS_Handler+0x5b4>)
  403c04:	4798      	blx	r3
			udd_ack_out_received(0);
  403c06:	2202      	movs	r2, #2
  403c08:	4b6b      	ldr	r3, [pc, #428]	; (403db8 <USBHS_Handler+0x5a0>)
  403c0a:	601a      	str	r2, [r3, #0]
  403c0c:	e61d      	b.n	40384a <USBHS_Handler+0x32>
			udd_ctrl_stall_data();
  403c0e:	4b6f      	ldr	r3, [pc, #444]	; (403dcc <USBHS_Handler+0x5b4>)
  403c10:	4798      	blx	r3
			udd_ack_out_received(0);
  403c12:	2202      	movs	r2, #2
  403c14:	4b68      	ldr	r3, [pc, #416]	; (403db8 <USBHS_Handler+0x5a0>)
  403c16:	601a      	str	r2, [r3, #0]
  403c18:	e617      	b.n	40384a <USBHS_Handler+0x32>
		udd_ack_nak_out(0);
  403c1a:	2208      	movs	r2, #8
  403c1c:	4b66      	ldr	r3, [pc, #408]	; (403db8 <USBHS_Handler+0x5a0>)
  403c1e:	601a      	str	r2, [r3, #0]
	if (Is_udd_in_send(0))
  403c20:	3b30      	subs	r3, #48	; 0x30
  403c22:	681b      	ldr	r3, [r3, #0]
  403c24:	f013 0f01 	tst.w	r3, #1
  403c28:	f47f ae0f 	bne.w	40384a <USBHS_Handler+0x32>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  403c2c:	4b68      	ldr	r3, [pc, #416]	; (403dd0 <USBHS_Handler+0x5b8>)
  403c2e:	781b      	ldrb	r3, [r3, #0]
  403c30:	2b03      	cmp	r3, #3
  403c32:	f47f ae0a 	bne.w	40384a <USBHS_Handler+0x32>
		udd_enable_stall_handshake(0);
  403c36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403c3a:	4b63      	ldr	r3, [pc, #396]	; (403dc8 <USBHS_Handler+0x5b0>)
  403c3c:	601a      	str	r2, [r3, #0]
  403c3e:	e604      	b.n	40384a <USBHS_Handler+0x32>
		udd_ack_nak_in(0);
  403c40:	2210      	movs	r2, #16
  403c42:	4b5d      	ldr	r3, [pc, #372]	; (403db8 <USBHS_Handler+0x5a0>)
  403c44:	601a      	str	r2, [r3, #0]
	if (Is_udd_out_received(0))
  403c46:	3b30      	subs	r3, #48	; 0x30
  403c48:	681b      	ldr	r3, [r3, #0]
  403c4a:	f013 0f02 	tst.w	r3, #2
  403c4e:	f47f adfc 	bne.w	40384a <USBHS_Handler+0x32>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
  403c52:	4b5f      	ldr	r3, [pc, #380]	; (403dd0 <USBHS_Handler+0x5b8>)
  403c54:	781b      	ldrb	r3, [r3, #0]
  403c56:	2b01      	cmp	r3, #1
  403c58:	d007      	beq.n	403c6a <USBHS_Handler+0x452>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
  403c5a:	2b04      	cmp	r3, #4
  403c5c:	f47f adf5 	bne.w	40384a <USBHS_Handler+0x32>
		udd_enable_stall_handshake(0);
  403c60:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403c64:	4b58      	ldr	r3, [pc, #352]	; (403dc8 <USBHS_Handler+0x5b0>)
  403c66:	601a      	str	r2, [r3, #0]
  403c68:	e5ef      	b.n	40384a <USBHS_Handler+0x32>
		udd_ctrl_send_zlp_in();
  403c6a:	4b54      	ldr	r3, [pc, #336]	; (403dbc <USBHS_Handler+0x5a4>)
  403c6c:	4798      	blx	r3
  403c6e:	e5ec      	b.n	40384a <USBHS_Handler+0x32>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
  403c70:	4b58      	ldr	r3, [pc, #352]	; (403dd4 <USBHS_Handler+0x5bc>)
  403c72:	685b      	ldr	r3, [r3, #4]
  403c74:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  403c78:	f43f ae4d 	beq.w	403916 <USBHS_Handler+0xfe>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  403c7c:	2002      	movs	r0, #2
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
  403c7e:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
		ptr_job = &udd_ep_job[ep - 1];
  403c82:	2201      	movs	r2, #1
			if (udd_endpoint_dma_get_status(ep)
  403c84:	4b54      	ldr	r3, [pc, #336]	; (403dd8 <USBHS_Handler+0x5c0>)
  403c86:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403c8a:	68d9      	ldr	r1, [r3, #12]
  403c8c:	f011 0f01 	tst.w	r1, #1
  403c90:	f47f addb 	bne.w	40384a <USBHS_Handler+0x32>
			udd_disable_endpoint_dma_interrupt(ep);
  403c94:	494f      	ldr	r1, [pc, #316]	; (403dd4 <USBHS_Handler+0x5bc>)
  403c96:	614c      	str	r4, [r1, #20]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
  403c98:	68d9      	ldr	r1, [r3, #12]
			if (nb_remaining) {
  403c9a:	0c09      	lsrs	r1, r1, #16
  403c9c:	d007      	beq.n	403cae <USBHS_Handler+0x496>
				ptr_job->buf_cnt -= nb_remaining;
  403c9e:	2418      	movs	r4, #24
  403ca0:	4b4e      	ldr	r3, [pc, #312]	; (403ddc <USBHS_Handler+0x5c4>)
  403ca2:	fb04 3302 	mla	r3, r4, r2, r3
  403ca6:	68da      	ldr	r2, [r3, #12]
  403ca8:	1a52      	subs	r2, r2, r1
  403caa:	60da      	str	r2, [r3, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
  403cac:	609a      	str	r2, [r3, #8]
			udd_ep_trans_done(ep);
  403cae:	4b4c      	ldr	r3, [pc, #304]	; (403de0 <USBHS_Handler+0x5c8>)
  403cb0:	4798      	blx	r3
  403cb2:	e5ca      	b.n	40384a <USBHS_Handler+0x32>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
  403cb4:	2001      	movs	r0, #1
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
  403cb6:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
		ptr_job = &udd_ep_job[ep - 1];
  403cba:	2200      	movs	r2, #0
  403cbc:	e7e2      	b.n	403c84 <USBHS_Handler+0x46c>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  403cbe:	2202      	movs	r2, #2
			if (Is_udd_in_send_interrupt_enabled(ep)
  403cc0:	2308      	movs	r3, #8
		ptr_job = &udd_ep_job[ep - 1];
  403cc2:	2101      	movs	r1, #1
  403cc4:	e0b8      	b.n	403e38 <USBHS_Handler+0x620>
			if (Is_udd_in_send_interrupt_enabled(ep)
  403cc6:	2308      	movs	r3, #8
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
  403cc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
		ptr_job = &udd_ep_job[ep - 1];
  403ccc:	2101      	movs	r1, #1
  403cce:	e003      	b.n	403cd8 <USBHS_Handler+0x4c0>
			if (Is_udd_in_send_interrupt_enabled(ep)
  403cd0:	2304      	movs	r3, #4
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
  403cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		ptr_job = &udd_ep_job[ep - 1];
  403cd6:	2100      	movs	r1, #0
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
  403cd8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  403cdc:	4841      	ldr	r0, [pc, #260]	; (403de4 <USBHS_Handler+0x5cc>)
  403cde:	501c      	str	r4, [r3, r0]
				udd_disable_endpoint_interrupt(ep);
  403ce0:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
  403ce4:	6142      	str	r2, [r0, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
  403ce6:	004a      	lsls	r2, r1, #1
  403ce8:	4411      	add	r1, r2
  403cea:	4a3c      	ldr	r2, [pc, #240]	; (403ddc <USBHS_Handler+0x5c4>)
  403cec:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  403cf0:	7d11      	ldrb	r1, [r2, #20]
  403cf2:	f36f 0182 	bfc	r1, #2, #1
  403cf6:	7511      	strb	r1, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
  403cf8:	493b      	ldr	r1, [pc, #236]	; (403de8 <USBHS_Handler+0x5d0>)
  403cfa:	585a      	ldr	r2, [r3, r1]
  403cfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  403d00:	505a      	str	r2, [r3, r1]
				udd_enable_stall_handshake(ep);
  403d02:	4a31      	ldr	r2, [pc, #196]	; (403dc8 <USBHS_Handler+0x5b0>)
  403d04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  403d08:	5099      	str	r1, [r3, r2]
				udd_reset_data_toggle(ep);
  403d0a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  403d0e:	5099      	str	r1, [r3, r2]
  403d10:	e59b      	b.n	40384a <USBHS_Handler+0x32>
		udd_ack_reset();
  403d12:	4c30      	ldr	r4, [pc, #192]	; (403dd4 <USBHS_Handler+0x5bc>)
  403d14:	2308      	movs	r3, #8
  403d16:	60a3      	str	r3, [r4, #8]
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
  403d18:	4e30      	ldr	r6, [pc, #192]	; (403ddc <USBHS_Handler+0x5c4>)
  403d1a:	2201      	movs	r2, #1
  403d1c:	4611      	mov	r1, r2
  403d1e:	4630      	mov	r0, r6
  403d20:	4d32      	ldr	r5, [pc, #200]	; (403dec <USBHS_Handler+0x5d4>)
  403d22:	47a8      	blx	r5
  403d24:	2202      	movs	r2, #2
  403d26:	2101      	movs	r1, #1
  403d28:	f106 0018 	add.w	r0, r6, #24
  403d2c:	47a8      	blx	r5
		udc_reset();
  403d2e:	4b30      	ldr	r3, [pc, #192]	; (403df0 <USBHS_Handler+0x5d8>)
  403d30:	4798      	blx	r3
	udd_configure_address(0);
  403d32:	6823      	ldr	r3, [r4, #0]
  403d34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403d38:	6023      	str	r3, [r4, #0]
	udd_enable_address();
  403d3a:	6823      	ldr	r3, [r4, #0]
  403d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403d40:	6023      	str	r3, [r4, #0]
	udd_configure_endpoint(0,
  403d42:	4a29      	ldr	r2, [pc, #164]	; (403de8 <USBHS_Handler+0x5d0>)
  403d44:	6811      	ldr	r1, [r2, #0]
  403d46:	4b2b      	ldr	r3, [pc, #172]	; (403df4 <USBHS_Handler+0x5dc>)
  403d48:	400b      	ands	r3, r1
  403d4a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  403d4e:	6013      	str	r3, [r2, #0]
	udd_allocate_memory(0);
  403d50:	6813      	ldr	r3, [r2, #0]
  403d52:	f043 0302 	orr.w	r3, r3, #2
  403d56:	6013      	str	r3, [r2, #0]
	udd_enable_endpoint(0);
  403d58:	69e3      	ldr	r3, [r4, #28]
  403d5a:	f043 0301 	orr.w	r3, r3, #1
  403d5e:	61e3      	str	r3, [r4, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403d60:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403d64:	fab3 f383 	clz	r3, r3
  403d68:	095b      	lsrs	r3, r3, #5
  403d6a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  403d6c:	b672      	cpsid	i
  403d6e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403d72:	2200      	movs	r2, #0
  403d74:	4b13      	ldr	r3, [pc, #76]	; (403dc4 <USBHS_Handler+0x5ac>)
  403d76:	701a      	strb	r2, [r3, #0]
	return flags;
  403d78:	9a03      	ldr	r2, [sp, #12]
	udd_enable_setup_received_interrupt(0);
  403d7a:	4b13      	ldr	r3, [pc, #76]	; (403dc8 <USBHS_Handler+0x5b0>)
  403d7c:	2104      	movs	r1, #4
  403d7e:	6019      	str	r1, [r3, #0]
	udd_enable_out_received_interrupt(0);
  403d80:	2102      	movs	r1, #2
  403d82:	6019      	str	r1, [r3, #0]
	udd_enable_endpoint_interrupt(0);
  403d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  403d88:	61a3      	str	r3, [r4, #24]
	if (cpu_irq_is_enabled_flags(flags))
  403d8a:	b12a      	cbz	r2, 403d98 <USBHS_Handler+0x580>
		cpu_irq_enable();
  403d8c:	2201      	movs	r2, #1
  403d8e:	4b0d      	ldr	r3, [pc, #52]	; (403dc4 <USBHS_Handler+0x5ac>)
  403d90:	701a      	strb	r2, [r3, #0]
  403d92:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403d96:	b662      	cpsie	i
		udd_ctrl_init();
  403d98:	4b02      	ldr	r3, [pc, #8]	; (403da4 <USBHS_Handler+0x58c>)
  403d9a:	4798      	blx	r3
		goto udd_interrupt_end;
  403d9c:	e555      	b.n	40384a <USBHS_Handler+0x32>
  403d9e:	bf00      	nop
  403da0:	004034ad 	.word	0x004034ad
  403da4:	004033e5 	.word	0x004033e5
  403da8:	40038130 	.word	0x40038130
  403dac:	20401068 	.word	0x20401068
  403db0:	20400bc8 	.word	0x20400bc8
  403db4:	a0100000 	.word	0xa0100000
  403db8:	40038160 	.word	0x40038160
  403dbc:	00403459 	.word	0x00403459
  403dc0:	20400bca 	.word	0x20400bca
  403dc4:	204000c8 	.word	0x204000c8
  403dc8:	400381f0 	.word	0x400381f0
  403dcc:	00403441 	.word	0x00403441
  403dd0:	20400bcc 	.word	0x20400bcc
  403dd4:	40038000 	.word	0x40038000
  403dd8:	40038300 	.word	0x40038300
  403ddc:	20400bd0 	.word	0x20400bd0
  403de0:	00403671 	.word	0x00403671
  403de4:	40038220 	.word	0x40038220
  403de8:	40038100 	.word	0x40038100
  403dec:	00403639 	.word	0x00403639
  403df0:	004025a1 	.word	0x004025a1
  403df4:	ffffe683 	.word	0xffffe683
		otg_unfreeze_clock();
  403df8:	4b18      	ldr	r3, [pc, #96]	; (403e5c <USBHS_Handler+0x644>)
  403dfa:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  403dfe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  403e02:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_disable_suspend_interrupt();
  403e06:	2201      	movs	r2, #1
  403e08:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  403e0a:	2210      	movs	r2, #16
  403e0c:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
  403e0e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  403e12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  403e16:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
  403e1a:	2000      	movs	r0, #0
  403e1c:	4b10      	ldr	r3, [pc, #64]	; (403e60 <USBHS_Handler+0x648>)
  403e1e:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
  403e20:	4b10      	ldr	r3, [pc, #64]	; (403e64 <USBHS_Handler+0x64c>)
  403e22:	4798      	blx	r3
		goto udd_interrupt_end;
  403e24:	e511      	b.n	40384a <USBHS_Handler+0x32>
					&& Is_udd_in_send(ep)) {
  403e26:	4b10      	ldr	r3, [pc, #64]	; (403e68 <USBHS_Handler+0x650>)
  403e28:	681b      	ldr	r3, [r3, #0]
  403e2a:	f013 0f01 	tst.w	r3, #1
  403e2e:	f43f ad61 	beq.w	4038f4 <USBHS_Handler+0xdc>
  403e32:	2201      	movs	r2, #1
			if (Is_udd_in_send_interrupt_enabled(ep)
  403e34:	2304      	movs	r3, #4
		ptr_job = &udd_ep_job[ep - 1];
  403e36:	2100      	movs	r1, #0
				udd_disable_in_send_interrupt(ep);
  403e38:	480c      	ldr	r0, [pc, #48]	; (403e6c <USBHS_Handler+0x654>)
  403e3a:	2401      	movs	r4, #1
  403e3c:	501c      	str	r4, [r3, r0]
				udd_ack_in_send(ep);
  403e3e:	4d0c      	ldr	r5, [pc, #48]	; (403e70 <USBHS_Handler+0x658>)
  403e40:	515c      	str	r4, [r3, r5]
				udd_ack_fifocon(ep);
  403e42:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  403e46:	501c      	str	r4, [r3, r0]
		ptr_job = &udd_ep_job[ep - 1];
  403e48:	004b      	lsls	r3, r1, #1
  403e4a:	440b      	add	r3, r1
				udd_ep_finish_job(ptr_job, false, ep);
  403e4c:	2100      	movs	r1, #0
  403e4e:	4809      	ldr	r0, [pc, #36]	; (403e74 <USBHS_Handler+0x65c>)
  403e50:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
  403e54:	4b08      	ldr	r3, [pc, #32]	; (403e78 <USBHS_Handler+0x660>)
  403e56:	4798      	blx	r3
  403e58:	e4f7      	b.n	40384a <USBHS_Handler+0x32>
  403e5a:	bf00      	nop
  403e5c:	40038000 	.word	0x40038000
  403e60:	00403341 	.word	0x00403341
  403e64:	00404e81 	.word	0x00404e81
  403e68:	40038134 	.word	0x40038134
  403e6c:	40038220 	.word	0x40038220
  403e70:	40038160 	.word	0x40038160
  403e74:	20400bd0 	.word	0x20400bd0
  403e78:	00403639 	.word	0x00403639

00403e7c <udd_attach>:
{
  403e7c:	b570      	push	{r4, r5, r6, lr}
  403e7e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403e80:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403e84:	fab3 f383 	clz	r3, r3
  403e88:	095b      	lsrs	r3, r3, #5
  403e8a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403e8c:	b672      	cpsid	i
  403e8e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403e92:	2200      	movs	r2, #0
  403e94:	4b19      	ldr	r3, [pc, #100]	; (403efc <udd_attach+0x80>)
  403e96:	701a      	strb	r2, [r3, #0]
	return flags;
  403e98:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
  403e9a:	2001      	movs	r0, #1
  403e9c:	4b18      	ldr	r3, [pc, #96]	; (403f00 <udd_attach+0x84>)
  403e9e:	4798      	blx	r3
	otg_unfreeze_clock();
  403ea0:	4a18      	ldr	r2, [pc, #96]	; (403f04 <udd_attach+0x88>)
  403ea2:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  403ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  403eaa:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	while (!Is_otg_clock_usable());
  403eae:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
  403eb2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  403eb6:	d0fa      	beq.n	403eae <udd_attach+0x32>
	udd_attach_device();
  403eb8:	4b12      	ldr	r3, [pc, #72]	; (403f04 <udd_attach+0x88>)
  403eba:	681a      	ldr	r2, [r3, #0]
  403ebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  403ec0:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
  403ec2:	2608      	movs	r6, #8
  403ec4:	619e      	str	r6, [r3, #24]
	udd_enable_suspend_interrupt();
  403ec6:	2101      	movs	r1, #1
  403ec8:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
  403eca:	2210      	movs	r2, #16
  403ecc:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
  403ece:	2504      	movs	r5, #4
  403ed0:	619d      	str	r5, [r3, #24]
	udd_enable_msof_interrupt();
  403ed2:	2002      	movs	r0, #2
  403ed4:	6198      	str	r0, [r3, #24]
	udd_ack_reset();
  403ed6:	609e      	str	r6, [r3, #8]
	udd_ack_sof();
  403ed8:	609d      	str	r5, [r3, #8]
	udd_ack_msof();
  403eda:	6098      	str	r0, [r3, #8]
	udd_raise_suspend();
  403edc:	60d9      	str	r1, [r3, #12]
	udd_ack_wake_up();
  403ede:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
  403ee0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  403ee4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  403ee8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (cpu_irq_is_enabled_flags(flags))
  403eec:	b124      	cbz	r4, 403ef8 <udd_attach+0x7c>
		cpu_irq_enable();
  403eee:	4b03      	ldr	r3, [pc, #12]	; (403efc <udd_attach+0x80>)
  403ef0:	7019      	strb	r1, [r3, #0]
  403ef2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403ef6:	b662      	cpsie	i
}
  403ef8:	b002      	add	sp, #8
  403efa:	bd70      	pop	{r4, r5, r6, pc}
  403efc:	204000c8 	.word	0x204000c8
  403f00:	00403341 	.word	0x00403341
  403f04:	40038000 	.word	0x40038000

00403f08 <udd_enable>:
{
  403f08:	b510      	push	{r4, lr}
  403f0a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403f0c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403f10:	fab3 f383 	clz	r3, r3
  403f14:	095b      	lsrs	r3, r3, #5
  403f16:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  403f18:	b672      	cpsid	i
  403f1a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403f1e:	2200      	movs	r2, #0
  403f20:	4b3d      	ldr	r3, [pc, #244]	; (404018 <udd_enable+0x110>)
  403f22:	701a      	strb	r2, [r3, #0]
	return flags;
  403f24:	9c00      	ldr	r4, [sp, #0]
	pmc_enable_periph_clk(ID_USBHS);
  403f26:	2022      	movs	r0, #34	; 0x22
  403f28:	4b3c      	ldr	r3, [pc, #240]	; (40401c <udd_enable+0x114>)
  403f2a:	4798      	blx	r3
	sysclk_enable_usb();
  403f2c:	4b3c      	ldr	r3, [pc, #240]	; (404020 <udd_enable+0x118>)
  403f2e:	4798      	blx	r3
{
  if(IRQn < 0) {
	 // printf("nvic...........");
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403f30:	4b3c      	ldr	r3, [pc, #240]	; (404024 <udd_enable+0x11c>)
  403f32:	22a0      	movs	r2, #160	; 0xa0
  403f34:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403f38:	2204      	movs	r2, #4
  403f3a:	605a      	str	r2, [r3, #4]
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  403f3c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  403f40:	4b39      	ldr	r3, [pc, #228]	; (404028 <udd_enable+0x120>)
  403f42:	4798      	blx	r3
	USBHS->USBHS_CTRL = USBHS_CTRL_UIMOD_DEVICE;
  403f44:	4b39      	ldr	r3, [pc, #228]	; (40402c <udd_enable+0x124>)
  403f46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  403f4a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable();
  403f4e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  403f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  403f56:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_low_speed_disable();
  403f5a:	681a      	ldr	r2, [r3, #0]
  403f5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403f60:	601a      	str	r2, [r3, #0]
	udd_high_speed_enable();
  403f62:	681a      	ldr	r2, [r3, #0]
  403f64:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
  403f68:	601a      	str	r2, [r3, #0]
	otg_unfreeze_clock();
  403f6a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  403f6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  403f72:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
  403f76:	461a      	mov	r2, r3
  403f78:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
  403f7c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  403f80:	d0fa      	beq.n	403f78 <udd_enable+0x70>
		udd_ep_job[i].busy = false;
  403f82:	4b2b      	ldr	r3, [pc, #172]	; (404030 <udd_enable+0x128>)
  403f84:	7d1a      	ldrb	r2, [r3, #20]
		udd_ep_job[i].stall_requested = false;
  403f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  403f8a:	f36f 0282 	bfc	r2, #2, #1
  403f8e:	751a      	strb	r2, [r3, #20]
		udd_ep_job[i].busy = false;
  403f90:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		udd_ep_job[i].stall_requested = false;
  403f94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  403f98:	f36f 0282 	bfc	r2, #2, #1
  403f9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	otg_freeze_clock();
  403fa0:	4a22      	ldr	r2, [pc, #136]	; (40402c <udd_enable+0x124>)
  403fa2:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  403fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  403faa:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	if (!udd_b_sleep_initialized) {
  403fae:	4b21      	ldr	r3, [pc, #132]	; (404034 <udd_enable+0x12c>)
  403fb0:	781b      	ldrb	r3, [r3, #0]
  403fb2:	bb1b      	cbnz	r3, 403ffc <udd_enable+0xf4>
		udd_b_sleep_initialized = true;
  403fb4:	2201      	movs	r2, #1
  403fb6:	4b1f      	ldr	r3, [pc, #124]	; (404034 <udd_enable+0x12c>)
  403fb8:	701a      	strb	r2, [r3, #0]
		udd_b_idle = false;
  403fba:	2200      	movs	r2, #0
  403fbc:	4b1e      	ldr	r3, [pc, #120]	; (404038 <udd_enable+0x130>)
  403fbe:	701a      	strb	r2, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
  403fc0:	4b1e      	ldr	r3, [pc, #120]	; (40403c <udd_enable+0x134>)
  403fc2:	78db      	ldrb	r3, [r3, #3]
  403fc4:	2bff      	cmp	r3, #255	; 0xff
  403fc6:	d018      	beq.n	403ffa <udd_enable+0xf2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403fc8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403fcc:	fab3 f383 	clz	r3, r3
  403fd0:	095b      	lsrs	r3, r3, #5
  403fd2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403fd4:	b672      	cpsid	i
  403fd6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403fda:	2200      	movs	r2, #0
  403fdc:	4b0e      	ldr	r3, [pc, #56]	; (404018 <udd_enable+0x110>)
  403fde:	701a      	strb	r2, [r3, #0]
	return flags;
  403fe0:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
  403fe2:	4a16      	ldr	r2, [pc, #88]	; (40403c <udd_enable+0x134>)
  403fe4:	78d3      	ldrb	r3, [r2, #3]
  403fe6:	3301      	adds	r3, #1
  403fe8:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
  403fea:	b151      	cbz	r1, 404002 <udd_enable+0xfa>
		cpu_irq_enable();
  403fec:	2201      	movs	r2, #1
  403fee:	4b0a      	ldr	r3, [pc, #40]	; (404018 <udd_enable+0x110>)
  403ff0:	701a      	strb	r2, [r3, #0]
  403ff2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403ff6:	b662      	cpsie	i
  403ff8:	e003      	b.n	404002 <udd_enable+0xfa>
  403ffa:	e7fe      	b.n	403ffa <udd_enable+0xf2>
		udd_sleep_mode(false); // Enter idle mode
  403ffc:	2000      	movs	r0, #0
  403ffe:	4b10      	ldr	r3, [pc, #64]	; (404040 <udd_enable+0x138>)
  404000:	4798      	blx	r3
	udd_attach();
  404002:	4b10      	ldr	r3, [pc, #64]	; (404044 <udd_enable+0x13c>)
  404004:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  404006:	b12c      	cbz	r4, 404014 <udd_enable+0x10c>
		cpu_irq_enable();
  404008:	2201      	movs	r2, #1
  40400a:	4b03      	ldr	r3, [pc, #12]	; (404018 <udd_enable+0x110>)
  40400c:	701a      	strb	r2, [r3, #0]
  40400e:	f3bf 8f5f 	dmb	sy
  404012:	b662      	cpsie	i
}
  404014:	b002      	add	sp, #8
  404016:	bd10      	pop	{r4, pc}
  404018:	204000c8 	.word	0x204000c8
  40401c:	00402f95 	.word	0x00402f95
  404020:	00401911 	.word	0x00401911
  404024:	e000e100 	.word	0xe000e100
  404028:	0040305d 	.word	0x0040305d
  40402c:	40038000 	.word	0x40038000
  404030:	20400bd0 	.word	0x20400bd0
  404034:	20400bc6 	.word	0x20400bc6
  404038:	20400bc5 	.word	0x20400bc5
  40403c:	20401060 	.word	0x20401060
  404040:	00403341 	.word	0x00403341
  404044:	00403e7d 	.word	0x00403e7d

00404048 <udd_set_address>:
	udd_disable_address();
  404048:	4b08      	ldr	r3, [pc, #32]	; (40406c <udd_set_address+0x24>)
  40404a:	681a      	ldr	r2, [r3, #0]
  40404c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  404050:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
  404052:	681a      	ldr	r2, [r3, #0]
  404054:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  404058:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40405c:	4302      	orrs	r2, r0
  40405e:	601a      	str	r2, [r3, #0]
	udd_enable_address();
  404060:	681a      	ldr	r2, [r3, #0]
  404062:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  404066:	601a      	str	r2, [r3, #0]
  404068:	4770      	bx	lr
  40406a:	bf00      	nop
  40406c:	40038000 	.word	0x40038000

00404070 <udd_getaddress>:
	return udd_get_configured_address();
  404070:	4b02      	ldr	r3, [pc, #8]	; (40407c <udd_getaddress+0xc>)
  404072:	6818      	ldr	r0, [r3, #0]
}
  404074:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  404078:	4770      	bx	lr
  40407a:	bf00      	nop
  40407c:	40038000 	.word	0x40038000

00404080 <udd_get_frame_number>:
	return udd_frame_number();
  404080:	4b02      	ldr	r3, [pc, #8]	; (40408c <udd_get_frame_number+0xc>)
  404082:	6a18      	ldr	r0, [r3, #32]
}
  404084:	f3c0 00ca 	ubfx	r0, r0, #3, #11
  404088:	4770      	bx	lr
  40408a:	bf00      	nop
  40408c:	40038000 	.word	0x40038000

00404090 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  404090:	4b01      	ldr	r3, [pc, #4]	; (404098 <udd_set_setup_payload+0x8>)
  404092:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  404094:	8199      	strh	r1, [r3, #12]
  404096:	4770      	bx	lr
  404098:	20401068 	.word	0x20401068

0040409c <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  40409c:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4040a0:	2a02      	cmp	r2, #2
  4040a2:	d900      	bls.n	4040a6 <udd_ep_free+0xa>
  4040a4:	4770      	bx	lr
{
  4040a6:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
  4040a8:	4810      	ldr	r0, [pc, #64]	; (4040ec <udd_ep_free+0x50>)
  4040aa:	69c3      	ldr	r3, [r0, #28]
  4040ac:	2101      	movs	r1, #1
  4040ae:	fa01 f402 	lsl.w	r4, r1, r2
  4040b2:	ea23 0304 	bic.w	r3, r3, r4
  4040b6:	61c3      	str	r3, [r0, #28]
	udd_unallocate_memory(ep_index);
  4040b8:	f500 7080 	add.w	r0, r0, #256	; 0x100
  4040bc:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
  4040c0:	f023 0302 	bic.w	r3, r3, #2
  4040c4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
  4040c8:	1e56      	subs	r6, r2, #1
  4040ca:	4c09      	ldr	r4, [pc, #36]	; (4040f0 <udd_ep_free+0x54>)
  4040cc:	fa06 f501 	lsl.w	r5, r6, r1
  4040d0:	19a8      	adds	r0, r5, r6
  4040d2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
  4040d6:	4b07      	ldr	r3, [pc, #28]	; (4040f4 <udd_ep_free+0x58>)
  4040d8:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
  4040da:	4435      	add	r5, r6
  4040dc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  4040e0:	7d23      	ldrb	r3, [r4, #20]
  4040e2:	f36f 0382 	bfc	r3, #2, #1
  4040e6:	7523      	strb	r3, [r4, #20]
  4040e8:	bd70      	pop	{r4, r5, r6, pc}
  4040ea:	bf00      	nop
  4040ec:	40038000 	.word	0x40038000
  4040f0:	20400bd0 	.word	0x20400bd0
  4040f4:	00403639 	.word	0x00403639

004040f8 <udd_ep_is_halted>:
	return Is_udd_endpoint_stall_requested(ep_index);
  4040f8:	f000 000f 	and.w	r0, r0, #15
  4040fc:	4b02      	ldr	r3, [pc, #8]	; (404108 <udd_ep_is_halted+0x10>)
  4040fe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
  404102:	f3c0 40c0 	ubfx	r0, r0, #19, #1
  404106:	4770      	bx	lr
  404108:	400381c0 	.word	0x400381c0

0040410c <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  40410c:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  404110:	2b02      	cmp	r3, #2
  404112:	d85d      	bhi.n	4041d0 <udd_ep_set_halt+0xc4>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
  404114:	4a36      	ldr	r2, [pc, #216]	; (4041f0 <udd_ep_set_halt+0xe4>)
  404116:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40411a:	f412 2f00 	tst.w	r2, #524288	; 0x80000
  40411e:	d159      	bne.n	4041d4 <udd_ep_set_halt+0xc8>
{
  404120:	b410      	push	{r4}
  404122:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  404124:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
  404126:	eb01 0441 	add.w	r4, r1, r1, lsl #1
  40412a:	4a32      	ldr	r2, [pc, #200]	; (4041f4 <udd_ep_set_halt+0xe8>)
  40412c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  404130:	7d12      	ldrb	r2, [r2, #20]
  404132:	f012 0f04 	tst.w	r2, #4
  404136:	d14f      	bne.n	4041d8 <udd_ep_set_halt+0xcc>
	if (ptr_job->busy == true) {
  404138:	f012 0f01 	tst.w	r2, #1
  40413c:	d151      	bne.n	4041e2 <udd_ep_set_halt+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40413e:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404142:	fab2 f282 	clz	r2, r2
  404146:	0952      	lsrs	r2, r2, #5
  404148:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40414a:	b672      	cpsid	i
  40414c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404150:	2400      	movs	r4, #0
  404152:	4a29      	ldr	r2, [pc, #164]	; (4041f8 <udd_ep_set_halt+0xec>)
  404154:	7014      	strb	r4, [r2, #0]
	return flags;
  404156:	9c01      	ldr	r4, [sp, #4]
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
  404158:	f010 0f80 	tst.w	r0, #128	; 0x80
  40415c:	d118      	bne.n	404190 <udd_ep_set_halt+0x84>
	udd_disable_endpoint_bank_autoswitch(ep_index);
  40415e:	4927      	ldr	r1, [pc, #156]	; (4041fc <udd_ep_set_halt+0xf0>)
  404160:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
  404164:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  404168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	udd_ack_stall(ep_index);
  40416c:	2140      	movs	r1, #64	; 0x40
  40416e:	4a24      	ldr	r2, [pc, #144]	; (404200 <udd_ep_set_halt+0xf4>)
  404170:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
  404174:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  404178:	3290      	adds	r2, #144	; 0x90
  40417a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
  40417e:	2c00      	cmp	r4, #0
  404180:	d033      	beq.n	4041ea <udd_ep_set_halt+0xde>
		cpu_irq_enable();
  404182:	2001      	movs	r0, #1
  404184:	4b1c      	ldr	r3, [pc, #112]	; (4041f8 <udd_ep_set_halt+0xec>)
  404186:	7018      	strb	r0, [r3, #0]
  404188:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40418c:	b662      	cpsie	i
  40418e:	e024      	b.n	4041da <udd_ep_set_halt+0xce>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
  404190:	4a1c      	ldr	r2, [pc, #112]	; (404204 <udd_ep_set_halt+0xf8>)
  404192:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  404196:	f412 5f40 	tst.w	r2, #12288	; 0x3000
  40419a:	d0e0      	beq.n	40415e <udd_ep_set_halt+0x52>
		ptr_job->stall_requested = true;
  40419c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4041a0:	4a14      	ldr	r2, [pc, #80]	; (4041f4 <udd_ep_set_halt+0xe8>)
  4041a2:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
  4041a6:	7d0a      	ldrb	r2, [r1, #20]
  4041a8:	f042 0204 	orr.w	r2, r2, #4
  4041ac:	750a      	strb	r2, [r1, #20]
		udd_enable_bank_interrupt(ep_index);
  4041ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4041b2:	4915      	ldr	r1, [pc, #84]	; (404208 <udd_ep_set_halt+0xfc>)
  4041b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
  4041b8:	fa02 f303 	lsl.w	r3, r2, r3
  4041bc:	4a13      	ldr	r2, [pc, #76]	; (40420c <udd_ep_set_halt+0x100>)
  4041be:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
  4041c0:	b18c      	cbz	r4, 4041e6 <udd_ep_set_halt+0xda>
		cpu_irq_enable();
  4041c2:	2001      	movs	r0, #1
  4041c4:	4b0c      	ldr	r3, [pc, #48]	; (4041f8 <udd_ep_set_halt+0xec>)
  4041c6:	7018      	strb	r0, [r3, #0]
  4041c8:	f3bf 8f5f 	dmb	sy
  4041cc:	b662      	cpsie	i
  4041ce:	e004      	b.n	4041da <udd_ep_set_halt+0xce>
		return false;
  4041d0:	2000      	movs	r0, #0
  4041d2:	4770      	bx	lr
		return true; // Already STALL
  4041d4:	2001      	movs	r0, #1
  4041d6:	4770      	bx	lr
  4041d8:	2001      	movs	r0, #1
}
  4041da:	b003      	add	sp, #12
  4041dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4041e0:	4770      	bx	lr
		return false; // Job on going, stall impossible
  4041e2:	2000      	movs	r0, #0
  4041e4:	e7f9      	b.n	4041da <udd_ep_set_halt+0xce>
		return true;
  4041e6:	2001      	movs	r0, #1
  4041e8:	e7f7      	b.n	4041da <udd_ep_set_halt+0xce>
	return true;
  4041ea:	2001      	movs	r0, #1
  4041ec:	e7f5      	b.n	4041da <udd_ep_set_halt+0xce>
  4041ee:	bf00      	nop
  4041f0:	400381c0 	.word	0x400381c0
  4041f4:	20400bd0 	.word	0x20400bd0
  4041f8:	204000c8 	.word	0x204000c8
  4041fc:	40038100 	.word	0x40038100
  404200:	40038160 	.word	0x40038160
  404204:	40038130 	.word	0x40038130
  404208:	400381f0 	.word	0x400381f0
  40420c:	40038000 	.word	0x40038000

00404210 <udd_ep_clear_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  404210:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index)
  404214:	2802      	cmp	r0, #2
  404216:	d851      	bhi.n	4042bc <udd_ep_clear_halt+0xac>
{
  404218:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  40421a:	1e43      	subs	r3, r0, #1
	if (ptr_job->stall_requested) {
  40421c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  404220:	4a2c      	ldr	r2, [pc, #176]	; (4042d4 <udd_ep_clear_halt+0xc4>)
  404222:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  404226:	7d12      	ldrb	r2, [r2, #20]
  404228:	f012 0f04 	tst.w	r2, #4
  40422c:	d048      	beq.n	4042c0 <udd_ep_clear_halt+0xb0>
		ptr_job->stall_requested = false;
  40422e:	460a      	mov	r2, r1
  404230:	4928      	ldr	r1, [pc, #160]	; (4042d4 <udd_ep_clear_halt+0xc4>)
  404232:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  404236:	7d11      	ldrb	r1, [r2, #20]
  404238:	f36f 0182 	bfc	r1, #2, #1
  40423c:	7511      	strb	r1, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
  40423e:	0082      	lsls	r2, r0, #2
  404240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404244:	4c24      	ldr	r4, [pc, #144]	; (4042d8 <udd_ep_clear_halt+0xc8>)
  404246:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
  40424a:	4081      	lsls	r1, r0
  40424c:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
  404250:	6161      	str	r1, [r4, #20]
	if (Is_udd_endpoint_stall_requested(ep_index)) {
  404252:	4922      	ldr	r1, [pc, #136]	; (4042dc <udd_ep_clear_halt+0xcc>)
  404254:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  404258:	f411 2f00 	tst.w	r1, #524288	; 0x80000
  40425c:	d014      	beq.n	404288 <udd_ep_clear_halt+0x78>
		if (Is_udd_stall(ep_index)) {
  40425e:	4920      	ldr	r1, [pc, #128]	; (4042e0 <udd_ep_clear_halt+0xd0>)
  404260:	5851      	ldr	r1, [r2, r1]
  404262:	f011 0f40 	tst.w	r1, #64	; 0x40
  404266:	d006      	beq.n	404276 <udd_ep_clear_halt+0x66>
			udd_ack_stall(ep_index);
  404268:	2040      	movs	r0, #64	; 0x40
  40426a:	491e      	ldr	r1, [pc, #120]	; (4042e4 <udd_ep_clear_halt+0xd4>)
  40426c:	5050      	str	r0, [r2, r1]
			udd_reset_data_toggle(ep_index);
  40426e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  404272:	3190      	adds	r1, #144	; 0x90
  404274:	5050      	str	r0, [r2, r1]
		udd_disable_stall_handshake(ep_index);
  404276:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  40427a:	4917      	ldr	r1, [pc, #92]	; (4042d8 <udd_ep_clear_halt+0xc8>)
  40427c:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
  40427e:	481a      	ldr	r0, [pc, #104]	; (4042e8 <udd_ep_clear_halt+0xd8>)
  404280:	5811      	ldr	r1, [r2, r0]
  404282:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  404286:	5011      	str	r1, [r2, r0]
		if (ptr_job->busy == true) {
  404288:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  40428c:	4911      	ldr	r1, [pc, #68]	; (4042d4 <udd_ep_clear_halt+0xc4>)
  40428e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  404292:	7d12      	ldrb	r2, [r2, #20]
  404294:	f012 0f01 	tst.w	r2, #1
  404298:	d101      	bne.n	40429e <udd_ep_clear_halt+0x8e>
	return true;
  40429a:	2001      	movs	r0, #1
  40429c:	bd10      	pop	{r4, pc}
			ptr_job->busy = false;
  40429e:	4608      	mov	r0, r1
  4042a0:	0059      	lsls	r1, r3, #1
  4042a2:	18ca      	adds	r2, r1, r3
  4042a4:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  4042a8:	7d14      	ldrb	r4, [r2, #20]
  4042aa:	f36f 0400 	bfc	r4, #0, #1
  4042ae:	7514      	strb	r4, [r2, #20]
			ptr_job->call_nohalt();
  4042b0:	440b      	add	r3, r1
  4042b2:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
  4042b6:	4798      	blx	r3
	return true;
  4042b8:	2001      	movs	r0, #1
  4042ba:	bd10      	pop	{r4, pc}
		return false;
  4042bc:	2000      	movs	r0, #0
  4042be:	4770      	bx	lr
	if (Is_udd_endpoint_stall_requested(ep_index)) {
  4042c0:	0082      	lsls	r2, r0, #2
  4042c2:	4906      	ldr	r1, [pc, #24]	; (4042dc <udd_ep_clear_halt+0xcc>)
  4042c4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4042c8:	f411 2f00 	tst.w	r1, #524288	; 0x80000
  4042cc:	d1c7      	bne.n	40425e <udd_ep_clear_halt+0x4e>
	return true;
  4042ce:	2001      	movs	r0, #1
}
  4042d0:	bd10      	pop	{r4, pc}
  4042d2:	bf00      	nop
  4042d4:	20400bd0 	.word	0x20400bd0
  4042d8:	40038220 	.word	0x40038220
  4042dc:	400381c0 	.word	0x400381c0
  4042e0:	40038130 	.word	0x40038130
  4042e4:	40038160 	.word	0x40038160
  4042e8:	40038100 	.word	0x40038100

004042ec <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
  4042ec:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  4042f0:	2802      	cmp	r0, #2
  4042f2:	d866      	bhi.n	4043c2 <udd_ep_run+0xd6>
{
  4042f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4042f6:	b083      	sub	sp, #12
	if ((!Is_udd_endpoint_enabled(ep))
  4042f8:	4c37      	ldr	r4, [pc, #220]	; (4043d8 <udd_ep_run+0xec>)
  4042fa:	69e5      	ldr	r5, [r4, #28]
  4042fc:	2401      	movs	r4, #1
  4042fe:	4084      	lsls	r4, r0
  404300:	422c      	tst	r4, r5
  404302:	d060      	beq.n	4043c6 <udd_ep_run+0xda>
			|| Is_udd_endpoint_stall_requested(ep)
  404304:	4c35      	ldr	r4, [pc, #212]	; (4043dc <udd_ep_run+0xf0>)
  404306:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
  40430a:	f414 2f00 	tst.w	r4, #524288	; 0x80000
  40430e:	d15d      	bne.n	4043cc <udd_ep_run+0xe0>
	ptr_job = &udd_ep_job[ep - 1];
  404310:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
  404312:	eb04 0644 	add.w	r6, r4, r4, lsl #1
  404316:	4d32      	ldr	r5, [pc, #200]	; (4043e0 <udd_ep_run+0xf4>)
  404318:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
  40431c:	7d2d      	ldrb	r5, [r5, #20]
  40431e:	f015 0f04 	tst.w	r5, #4
  404322:	d155      	bne.n	4043d0 <udd_ep_run+0xe4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404324:	f3ef 8510 	mrs	r5, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404328:	fab5 f585 	clz	r5, r5
  40432c:	096d      	lsrs	r5, r5, #5
  40432e:	9501      	str	r5, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404330:	b672      	cpsid	i
  404332:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404336:	2600      	movs	r6, #0
  404338:	4d2a      	ldr	r5, [pc, #168]	; (4043e4 <udd_ep_run+0xf8>)
  40433a:	702e      	strb	r6, [r5, #0]
	return flags;
  40433c:	9f01      	ldr	r7, [sp, #4]
	if (ptr_job->busy == true) {
  40433e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  404342:	4e27      	ldr	r6, [pc, #156]	; (4043e0 <udd_ep_run+0xf4>)
  404344:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  404348:	7d2d      	ldrb	r5, [r5, #20]
  40434a:	f015 0f01 	tst.w	r5, #1
  40434e:	d009      	beq.n	404364 <udd_ep_run+0x78>
	if (cpu_irq_is_enabled_flags(flags))
  404350:	2f00      	cmp	r7, #0
  404352:	d03f      	beq.n	4043d4 <udd_ep_run+0xe8>
		cpu_irq_enable();
  404354:	2201      	movs	r2, #1
  404356:	4b23      	ldr	r3, [pc, #140]	; (4043e4 <udd_ep_run+0xf8>)
  404358:	701a      	strb	r2, [r3, #0]
  40435a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40435e:	b662      	cpsie	i
		return false; // Job already on going
  404360:	2000      	movs	r0, #0
  404362:	e031      	b.n	4043c8 <udd_ep_run+0xdc>
	ptr_job->busy = true;
  404364:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  404368:	4e1d      	ldr	r6, [pc, #116]	; (4043e0 <udd_ep_run+0xf4>)
  40436a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  40436e:	7d2e      	ldrb	r6, [r5, #20]
  404370:	f046 0601 	orr.w	r6, r6, #1
  404374:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
  404376:	b12f      	cbz	r7, 404384 <udd_ep_run+0x98>
		cpu_irq_enable();
  404378:	2601      	movs	r6, #1
  40437a:	4d1a      	ldr	r5, [pc, #104]	; (4043e4 <udd_ep_run+0xf8>)
  40437c:	702e      	strb	r6, [r5, #0]
  40437e:	f3bf 8f5f 	dmb	sy
  404382:	b662      	cpsie	i
	ptr_job->buf = buf;
  404384:	4d16      	ldr	r5, [pc, #88]	; (4043e0 <udd_ep_run+0xf4>)
  404386:	0066      	lsls	r6, r4, #1
  404388:	1937      	adds	r7, r6, r4
  40438a:	00ff      	lsls	r7, r7, #3
  40438c:	eb05 0e07 	add.w	lr, r5, r7
  404390:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  404394:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  404398:	2200      	movs	r2, #0
  40439a:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->buf_load = 0;
  40439e:	f8ce 2010 	str.w	r2, [lr, #16]
	ptr_job->call_trans = callback;
  4043a2:	9a08      	ldr	r2, [sp, #32]
  4043a4:	51ea      	str	r2, [r5, r7]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  4043a6:	2b00      	cmp	r3, #0
  4043a8:	bf08      	it	eq
  4043aa:	f041 0101 	orreq.w	r1, r1, #1
  4043ae:	f89e 3014 	ldrb.w	r3, [lr, #20]
  4043b2:	f361 0341 	bfi	r3, r1, #1, #1
  4043b6:	f88e 3014 	strb.w	r3, [lr, #20]
	udd_ep_trans_done(ep);
  4043ba:	4b0b      	ldr	r3, [pc, #44]	; (4043e8 <udd_ep_run+0xfc>)
  4043bc:	4798      	blx	r3
	return true;
  4043be:	2001      	movs	r0, #1
  4043c0:	e002      	b.n	4043c8 <udd_ep_run+0xdc>
		return false;
  4043c2:	2000      	movs	r0, #0
  4043c4:	4770      	bx	lr
		return false; // Endpoint is halted
  4043c6:	2000      	movs	r0, #0
}
  4043c8:	b003      	add	sp, #12
  4043ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  4043cc:	2000      	movs	r0, #0
  4043ce:	e7fb      	b.n	4043c8 <udd_ep_run+0xdc>
  4043d0:	2000      	movs	r0, #0
  4043d2:	e7f9      	b.n	4043c8 <udd_ep_run+0xdc>
		return false; // Job already on going
  4043d4:	2000      	movs	r0, #0
  4043d6:	e7f7      	b.n	4043c8 <udd_ep_run+0xdc>
  4043d8:	40038000 	.word	0x40038000
  4043dc:	400381c0 	.word	0x400381c0
  4043e0:	20400bd0 	.word	0x20400bd0
  4043e4:	204000c8 	.word	0x204000c8
  4043e8:	00403671 	.word	0x00403671

004043ec <udd_ep_alloc>:
{
  4043ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4043f0:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  4043f2:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  4043f6:	2c02      	cmp	r4, #2
  4043f8:	f200 80e9 	bhi.w	4045ce <udd_ep_alloc+0x1e2>
	if (Is_udd_endpoint_enabled(ep)) {
  4043fc:	4b79      	ldr	r3, [pc, #484]	; (4045e4 <udd_ep_alloc+0x1f8>)
  4043fe:	69dd      	ldr	r5, [r3, #28]
  404400:	2301      	movs	r3, #1
  404402:	40a3      	lsls	r3, r4
  404404:	402b      	ands	r3, r5
  404406:	f040 80e7 	bne.w	4045d8 <udd_ep_alloc+0x1ec>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
  40440a:	f011 0503 	ands.w	r5, r1, #3
  40440e:	f000 80e5 	beq.w	4045dc <udd_ep_alloc+0x1f0>
  404412:	2d02      	cmp	r5, #2
  404414:	d91f      	bls.n	404456 <udd_ep_alloc+0x6a>
  404416:	2d03      	cmp	r5, #3
  404418:	f040 80e0 	bne.w	4045dc <udd_ep_alloc+0x1f0>
		bank = USBHS_DEVEPTCFG_EPBK_1_BANK >>
  40441c:	f04f 0e00 	mov.w	lr, #0
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  404420:	4e71      	ldr	r6, [pc, #452]	; (4045e8 <udd_ep_alloc+0x1fc>)
  404422:	eb06 0584 	add.w	r5, r6, r4, lsl #2
  404426:	f856 c024 	ldr.w	ip, [r6, r4, lsl #2]
  40442a:	4f70      	ldr	r7, [pc, #448]	; (4045ec <udd_ep_alloc+0x200>)
  40442c:	ea0c 0707 	and.w	r7, ip, r7
  404430:	02c9      	lsls	r1, r1, #11
  404432:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
  404436:	b240      	sxtb	r0, r0
  404438:	2800      	cmp	r0, #0
  40443a:	bfb8      	it	lt
  40443c:	f44f 7380 	movlt.w	r3, #256	; 0x100
  404440:	f5a2 6080 	sub.w	r0, r2, #1024	; 0x400
  404444:	b280      	uxth	r0, r0
  404446:	f5b0 4f7c 	cmp.w	r0, #64512	; 0xfc00
  40444a:	d307      	bcc.n	40445c <udd_ep_alloc+0x70>
  40444c:	2a08      	cmp	r2, #8
  40444e:	d950      	bls.n	4044f2 <udd_ep_alloc+0x106>
  404450:	0052      	lsls	r2, r2, #1
  404452:	3a01      	subs	r2, #1
  404454:	e004      	b.n	404460 <udd_ep_alloc+0x74>
		bank = USBHS_DEVEPTCFG_EPBK_2_BANK >>
  404456:	f04f 0e01 	mov.w	lr, #1
  40445a:	e7e1      	b.n	404420 <udd_ep_alloc+0x34>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  40445c:	f240 72ff 	movw	r2, #2047	; 0x7ff
  404460:	fab2 f282 	clz	r2, r2
  404464:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
  404468:	4319      	orrs	r1, r3
  40446a:	f1c2 031c 	rsb	r3, r2, #28
  40446e:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
  404472:	f423 63d0 	bic.w	r3, r3, #1664	; 0x680
  404476:	f023 0303 	bic.w	r3, r3, #3
  40447a:	04db      	lsls	r3, r3, #19
  40447c:	0cdb      	lsrs	r3, r3, #19
  40447e:	433b      	orrs	r3, r7
  404480:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	ep_allocated = 1 << ep;
  404484:	2301      	movs	r3, #1
  404486:	40a3      	lsls	r3, r4
  404488:	b29f      	uxth	r7, r3
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
  40448a:	2c01      	cmp	r4, #1
  40448c:	d825      	bhi.n	4044da <udd_ep_alloc+0xee>
		if (Is_udd_endpoint_enabled(i)) {
  40448e:	4a55      	ldr	r2, [pc, #340]	; (4045e4 <udd_ep_alloc+0x1f8>)
  404490:	69d2      	ldr	r2, [r2, #28]
  404492:	f012 0f04 	tst.w	r2, #4
  404496:	d00d      	beq.n	4044b4 <udd_ep_alloc+0xc8>
			ep_allocated |= 1 << i;
  404498:	f043 0704 	orr.w	r7, r3, #4
  40449c:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
  40449e:	4a51      	ldr	r2, [pc, #324]	; (4045e4 <udd_ep_alloc+0x1f8>)
  4044a0:	69d3      	ldr	r3, [r2, #28]
  4044a2:	f023 0304 	bic.w	r3, r3, #4
  4044a6:	61d3      	str	r3, [r2, #28]
			udd_unallocate_memory(i);
  4044a8:	f502 7284 	add.w	r2, r2, #264	; 0x108
  4044ac:	6813      	ldr	r3, [r2, #0]
  4044ae:	f023 0302 	bic.w	r3, r3, #2
  4044b2:	6013      	str	r3, [r2, #0]
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
  4044b4:	b98c      	cbnz	r4, 4044da <udd_ep_alloc+0xee>
		if (Is_udd_endpoint_enabled(i)) {
  4044b6:	4b4b      	ldr	r3, [pc, #300]	; (4045e4 <udd_ep_alloc+0x1f8>)
  4044b8:	69db      	ldr	r3, [r3, #28]
  4044ba:	f013 0f02 	tst.w	r3, #2
  4044be:	d00c      	beq.n	4044da <udd_ep_alloc+0xee>
			ep_allocated |= 1 << i;
  4044c0:	f047 0702 	orr.w	r7, r7, #2
			udd_disable_endpoint(i);
  4044c4:	4a47      	ldr	r2, [pc, #284]	; (4045e4 <udd_ep_alloc+0x1f8>)
  4044c6:	69d3      	ldr	r3, [r2, #28]
  4044c8:	f023 0302 	bic.w	r3, r3, #2
  4044cc:	61d3      	str	r3, [r2, #28]
			udd_unallocate_memory(i);
  4044ce:	f502 7282 	add.w	r2, r2, #260	; 0x104
  4044d2:	6813      	ldr	r3, [r2, #0]
  4044d4:	f023 0302 	bic.w	r3, r3, #2
  4044d8:	6013      	str	r3, [r2, #0]
  4044da:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  4044de:	4e44      	ldr	r6, [pc, #272]	; (4045f0 <udd_ep_alloc+0x204>)
  4044e0:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
			bool b_restart = ptr_job->busy;
  4044e4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 4045f0 <udd_ep_alloc+0x204>
			udd_enable_endpoint(i);
  4044e8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 4045e4 <udd_ep_alloc+0x1f8>
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  4044ec:	f8df a104 	ldr.w	sl, [pc, #260]	; 4045f4 <udd_ep_alloc+0x208>
  4044f0:	e01f      	b.n	404532 <udd_ep_alloc+0x146>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
  4044f2:	220f      	movs	r2, #15
  4044f4:	e7b4      	b.n	404460 <udd_ep_alloc+0x74>
				if (NULL == ptr_job->call_trans) {
  4044f6:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  4044fa:	4a3d      	ldr	r2, [pc, #244]	; (4045f0 <udd_ep_alloc+0x204>)
  4044fc:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
  404500:	2c00      	cmp	r4, #0
  404502:	d06d      	beq.n	4045e0 <udd_ep_alloc+0x1f4>
				if (Is_udd_endpoint_in(i)) {
  404504:	682b      	ldr	r3, [r5, #0]
  404506:	f413 7f80 	tst.w	r3, #256	; 0x100
					i |= USB_EP_DIR_IN;
  40450a:	bf18      	it	ne
  40450c:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
  404510:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  404514:	4b36      	ldr	r3, [pc, #216]	; (4045f0 <udd_ep_alloc+0x204>)
  404516:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  40451a:	4602      	mov	r2, r0
  40451c:	68c9      	ldr	r1, [r1, #12]
  40451e:	2001      	movs	r0, #1
  404520:	47a0      	blx	r4
				return false;
  404522:	2300      	movs	r3, #0
  404524:	e054      	b.n	4045d0 <udd_ep_alloc+0x1e4>
  404526:	3401      	adds	r4, #1
  404528:	3504      	adds	r5, #4
  40452a:	3618      	adds	r6, #24
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
  40452c:	b2e3      	uxtb	r3, r4
  40452e:	2b02      	cmp	r3, #2
  404530:	d84b      	bhi.n	4045ca <udd_ep_alloc+0x1de>
  404532:	b2e0      	uxtb	r0, r4
		if (ep_allocated & (1 << i)) {
  404534:	fa47 f304 	asr.w	r3, r7, r4
  404538:	f013 0f01 	tst.w	r3, #1
  40453c:	d0f3      	beq.n	404526 <udd_ep_alloc+0x13a>
  40453e:	1e61      	subs	r1, r4, #1
			bool b_restart = ptr_job->busy;
  404540:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  404544:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
  404548:	f893 e014 	ldrb.w	lr, [r3, #20]
  40454c:	f00e 0201 	and.w	r2, lr, #1
			ptr_job->busy = false;
  404550:	f36f 0e00 	bfc	lr, #0, #1
  404554:	f883 e014 	strb.w	lr, [r3, #20]
			udd_allocate_memory(i);
  404558:	682b      	ldr	r3, [r5, #0]
  40455a:	f043 0302 	orr.w	r3, r3, #2
  40455e:	602b      	str	r3, [r5, #0]
			udd_enable_endpoint(i);
  404560:	f8d8 e01c 	ldr.w	lr, [r8, #28]
  404564:	2301      	movs	r3, #1
  404566:	40a3      	lsls	r3, r4
  404568:	ea43 030e 	orr.w	r3, r3, lr
  40456c:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
  404570:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404572:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  404576:	d0be      	beq.n	4044f6 <udd_ep_alloc+0x10a>
			udd_enable_endpoint_bank_autoswitch(i);
  404578:	682b      	ldr	r3, [r5, #0]
  40457a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  40457e:	602b      	str	r3, [r5, #0]
			if (b_restart) {
  404580:	2a00      	cmp	r2, #0
  404582:	d0d0      	beq.n	404526 <udd_ep_alloc+0x13a>
				ptr_job->buf_cnt -= ptr_job->buf_load;
  404584:	f856 3c0c 	ldr.w	r3, [r6, #-12]
  404588:	f856 2c08 	ldr.w	r2, [r6, #-8]
  40458c:	1a9a      	subs	r2, r3, r2
  40458e:	f846 2c0c 	str.w	r2, [r6, #-12]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  404592:	682b      	ldr	r3, [r5, #0]
  404594:	f413 7f80 	tst.w	r3, #256	; 0x100
  404598:	bf18      	it	ne
  40459a:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
  40459e:	f856 bc10 	ldr.w	fp, [r6, #-16]
  4045a2:	f856 cc14 	ldr.w	ip, [r6, #-20]
						ptr_job->b_shortpacket,
  4045a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4045aa:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
  4045ae:	7d09      	ldrb	r1, [r1, #20]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
  4045b0:	f856 3c18 	ldr.w	r3, [r6, #-24]
  4045b4:	9300      	str	r3, [sp, #0]
  4045b6:	ebab 0302 	sub.w	r3, fp, r2
  4045ba:	4462      	add	r2, ip
  4045bc:	f3c1 0140 	ubfx	r1, r1, #1, #1
  4045c0:	47d0      	blx	sl
				if (!b_restart) {
  4045c2:	4603      	mov	r3, r0
  4045c4:	2800      	cmp	r0, #0
  4045c6:	d1ae      	bne.n	404526 <udd_ep_alloc+0x13a>
  4045c8:	e002      	b.n	4045d0 <udd_ep_alloc+0x1e4>
	return true;
  4045ca:	2301      	movs	r3, #1
  4045cc:	e000      	b.n	4045d0 <udd_ep_alloc+0x1e4>
		return false;
  4045ce:	2300      	movs	r3, #0
}
  4045d0:	4618      	mov	r0, r3
  4045d2:	b003      	add	sp, #12
  4045d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
  4045d8:	2300      	movs	r3, #0
  4045da:	e7f9      	b.n	4045d0 <udd_ep_alloc+0x1e4>
		return false;
  4045dc:	2300      	movs	r3, #0
  4045de:	e7f7      	b.n	4045d0 <udd_ep_alloc+0x1e4>
					return false;
  4045e0:	2300      	movs	r3, #0
  4045e2:	e7f5      	b.n	4045d0 <udd_ep_alloc+0x1e4>
  4045e4:	40038000 	.word	0x40038000
  4045e8:	40038100 	.word	0x40038100
  4045ec:	ffffe683 	.word	0xffffe683
  4045f0:	20400bd0 	.word	0x20400bd0
  4045f4:	004042ed 	.word	0x004042ed

004045f8 <udd_ep_abort>:
{
  4045f8:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4045fa:	f000 020f 	and.w	r2, r0, #15
		udd_disable_endpoint_dma_interrupt(ep_index);
  4045fe:	1e54      	subs	r4, r2, #1
  404600:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  404604:	40a3      	lsls	r3, r4
  404606:	4916      	ldr	r1, [pc, #88]	; (404660 <udd_ep_abort+0x68>)
  404608:	614b      	str	r3, [r1, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
  40460a:	4b16      	ldr	r3, [pc, #88]	; (404664 <udd_ep_abort+0x6c>)
  40460c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  404610:	2500      	movs	r5, #0
  404612:	609d      	str	r5, [r3, #8]
	udd_disable_endpoint_interrupt(ep_index);
  404614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  404618:	4093      	lsls	r3, r2
  40461a:	614b      	str	r3, [r1, #20]
	if (ep & USB_EP_DIR_IN) {
  40461c:	f010 0f80 	tst.w	r0, #128	; 0x80
  404620:	d108      	bne.n	404634 <udd_ep_abort+0x3c>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
  404622:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  404626:	2101      	movs	r1, #1
  404628:	480f      	ldr	r0, [pc, #60]	; (404668 <udd_ep_abort+0x70>)
  40462a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  40462e:	4b0f      	ldr	r3, [pc, #60]	; (40466c <udd_ep_abort+0x74>)
  404630:	4798      	blx	r3
  404632:	bd70      	pop	{r4, r5, r6, pc}
		while(udd_nb_busy_bank(ep_index)) {
  404634:	0093      	lsls	r3, r2, #2
  404636:	480e      	ldr	r0, [pc, #56]	; (404670 <udd_ep_abort+0x78>)
  404638:	4418      	add	r0, r3
			udd_kill_last_in_bank(ep_index);
  40463a:	4d0e      	ldr	r5, [pc, #56]	; (404674 <udd_ep_abort+0x7c>)
  40463c:	441d      	add	r5, r3
  40463e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
  404642:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
  404646:	4419      	add	r1, r3
  404648:	e004      	b.n	404654 <udd_ep_abort+0x5c>
			udd_kill_last_in_bank(ep_index);
  40464a:	602e      	str	r6, [r5, #0]
			while(Is_udd_kill_last(ep_index));
  40464c:	680b      	ldr	r3, [r1, #0]
  40464e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  404652:	d1fb      	bne.n	40464c <udd_ep_abort+0x54>
		while(udd_nb_busy_bank(ep_index)) {
  404654:	6803      	ldr	r3, [r0, #0]
  404656:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  40465a:	d1f6      	bne.n	40464a <udd_ep_abort+0x52>
  40465c:	e7e1      	b.n	404622 <udd_ep_abort+0x2a>
  40465e:	bf00      	nop
  404660:	40038000 	.word	0x40038000
  404664:	40038300 	.word	0x40038300
  404668:	20400bd0 	.word	0x20400bd0
  40466c:	00403639 	.word	0x00403639
  404670:	40038130 	.word	0x40038130
  404674:	400381f0 	.word	0x400381f0

00404678 <udd_ep_wait_stall_clear>:
	ep &= USB_EP_ADDR_MASK;
  404678:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  40467c:	2802      	cmp	r0, #2
  40467e:	d82a      	bhi.n	4046d6 <udd_ep_wait_stall_clear+0x5e>
{
  404680:	b538      	push	{r3, r4, r5, lr}
	if (!Is_udd_endpoint_enabled(ep)) {
  404682:	4b18      	ldr	r3, [pc, #96]	; (4046e4 <udd_ep_wait_stall_clear+0x6c>)
  404684:	69da      	ldr	r2, [r3, #28]
  404686:	2301      	movs	r3, #1
  404688:	4083      	lsls	r3, r0
  40468a:	4213      	tst	r3, r2
  40468c:	d025      	beq.n	4046da <udd_ep_wait_stall_clear+0x62>
	ptr_job = &udd_ep_job[ep - 1];
  40468e:	1e43      	subs	r3, r0, #1
	if (ptr_job->busy == true) {
  404690:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  404694:	4a14      	ldr	r2, [pc, #80]	; (4046e8 <udd_ep_wait_stall_clear+0x70>)
  404696:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  40469a:	7d12      	ldrb	r2, [r2, #20]
  40469c:	f012 0f01 	tst.w	r2, #1
  4046a0:	d11d      	bne.n	4046de <udd_ep_wait_stall_clear+0x66>
	if (Is_udd_endpoint_stall_requested(ep)
  4046a2:	4c12      	ldr	r4, [pc, #72]	; (4046ec <udd_ep_wait_stall_clear+0x74>)
  4046a4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
  4046a8:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  4046ac:	d102      	bne.n	4046b4 <udd_ep_wait_stall_clear+0x3c>
			|| ptr_job->stall_requested) {
  4046ae:	f012 0f04 	tst.w	r2, #4
  4046b2:	d00d      	beq.n	4046d0 <udd_ep_wait_stall_clear+0x58>
		ptr_job->busy = true;
  4046b4:	4d0c      	ldr	r5, [pc, #48]	; (4046e8 <udd_ep_wait_stall_clear+0x70>)
  4046b6:	0058      	lsls	r0, r3, #1
  4046b8:	18c2      	adds	r2, r0, r3
  4046ba:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
  4046be:	7d14      	ldrb	r4, [r2, #20]
  4046c0:	f044 0401 	orr.w	r4, r4, #1
  4046c4:	7514      	strb	r4, [r2, #20]
		ptr_job->call_nohalt = callback;
  4046c6:	4403      	add	r3, r0
  4046c8:	f845 1033 	str.w	r1, [r5, r3, lsl #3]
	return true;
  4046cc:	2001      	movs	r0, #1
		ptr_job->call_nohalt = callback;
  4046ce:	bd38      	pop	{r3, r4, r5, pc}
		callback();
  4046d0:	4788      	blx	r1
	return true;
  4046d2:	2001      	movs	r0, #1
  4046d4:	bd38      	pop	{r3, r4, r5, pc}
		return false;
  4046d6:	2000      	movs	r0, #0
  4046d8:	4770      	bx	lr
		return false; // Endpoint not enabled
  4046da:	2000      	movs	r0, #0
  4046dc:	bd38      	pop	{r3, r4, r5, pc}
		return false; // Job already on going
  4046de:	2000      	movs	r0, #0
}
  4046e0:	bd38      	pop	{r3, r4, r5, pc}
  4046e2:	bf00      	nop
  4046e4:	40038000 	.word	0x40038000
  4046e8:	20400bd0 	.word	0x20400bd0
  4046ec:	400381c0 	.word	0x400381c0

004046f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4046f0:	e7fe      	b.n	4046f0 <Dummy_Handler>
	...

004046f4 <Reset_Handler>:
{
  4046f4:	b500      	push	{lr}
  4046f6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4046f8:	4b25      	ldr	r3, [pc, #148]	; (404790 <Reset_Handler+0x9c>)
  4046fa:	4a26      	ldr	r2, [pc, #152]	; (404794 <Reset_Handler+0xa0>)
  4046fc:	429a      	cmp	r2, r3
  4046fe:	d010      	beq.n	404722 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  404700:	4b25      	ldr	r3, [pc, #148]	; (404798 <Reset_Handler+0xa4>)
  404702:	4a23      	ldr	r2, [pc, #140]	; (404790 <Reset_Handler+0x9c>)
  404704:	429a      	cmp	r2, r3
  404706:	d20c      	bcs.n	404722 <Reset_Handler+0x2e>
  404708:	3b01      	subs	r3, #1
  40470a:	1a9b      	subs	r3, r3, r2
  40470c:	f023 0303 	bic.w	r3, r3, #3
  404710:	3304      	adds	r3, #4
  404712:	4413      	add	r3, r2
  404714:	491f      	ldr	r1, [pc, #124]	; (404794 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  404716:	f851 0b04 	ldr.w	r0, [r1], #4
  40471a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40471e:	429a      	cmp	r2, r3
  404720:	d1f9      	bne.n	404716 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  404722:	4b1e      	ldr	r3, [pc, #120]	; (40479c <Reset_Handler+0xa8>)
  404724:	4a1e      	ldr	r2, [pc, #120]	; (4047a0 <Reset_Handler+0xac>)
  404726:	429a      	cmp	r2, r3
  404728:	d20a      	bcs.n	404740 <Reset_Handler+0x4c>
  40472a:	3b01      	subs	r3, #1
  40472c:	1a9b      	subs	r3, r3, r2
  40472e:	f023 0303 	bic.w	r3, r3, #3
  404732:	3304      	adds	r3, #4
  404734:	4413      	add	r3, r2
                *pDest++ = 0;
  404736:	2100      	movs	r1, #0
  404738:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40473c:	4293      	cmp	r3, r2
  40473e:	d1fb      	bne.n	404738 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  404740:	4a18      	ldr	r2, [pc, #96]	; (4047a4 <Reset_Handler+0xb0>)
  404742:	4b19      	ldr	r3, [pc, #100]	; (4047a8 <Reset_Handler+0xb4>)
  404744:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  404748:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40474a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40474e:	fab3 f383 	clz	r3, r3
  404752:	095b      	lsrs	r3, r3, #5
  404754:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404756:	b672      	cpsid	i
  __ASM volatile ("dmb");
  404758:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40475c:	2200      	movs	r2, #0
  40475e:	4b13      	ldr	r3, [pc, #76]	; (4047ac <Reset_Handler+0xb8>)
  404760:	701a      	strb	r2, [r3, #0]
	return flags;
  404762:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  404764:	4a12      	ldr	r2, [pc, #72]	; (4047b0 <Reset_Handler+0xbc>)
  404766:	6813      	ldr	r3, [r2, #0]
  404768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40476c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40476e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404772:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  404776:	b129      	cbz	r1, 404784 <Reset_Handler+0x90>
		cpu_irq_enable();
  404778:	2201      	movs	r2, #1
  40477a:	4b0c      	ldr	r3, [pc, #48]	; (4047ac <Reset_Handler+0xb8>)
  40477c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40477e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404782:	b662      	cpsie	i
        __libc_init_array();
  404784:	4b0b      	ldr	r3, [pc, #44]	; (4047b4 <Reset_Handler+0xc0>)
  404786:	4798      	blx	r3
        main();
  404788:	4b0b      	ldr	r3, [pc, #44]	; (4047b8 <Reset_Handler+0xc4>)
  40478a:	4798      	blx	r3
  40478c:	e7fe      	b.n	40478c <Reset_Handler+0x98>
  40478e:	bf00      	nop
  404790:	20400000 	.word	0x20400000
  404794:	004083e4 	.word	0x004083e4
  404798:	20400a80 	.word	0x20400a80
  40479c:	204010b0 	.word	0x204010b0
  4047a0:	20400a80 	.word	0x20400a80
  4047a4:	e000ed00 	.word	0xe000ed00
  4047a8:	00400000 	.word	0x00400000
  4047ac:	204000c8 	.word	0x204000c8
  4047b0:	e000ed88 	.word	0xe000ed88
  4047b4:	00404edd 	.word	0x00404edd
  4047b8:	00404cf1 	.word	0x00404cf1

004047bc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4047bc:	4b3b      	ldr	r3, [pc, #236]	; (4048ac <SystemCoreClockUpdate+0xf0>)
  4047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4047c0:	f003 0303 	and.w	r3, r3, #3
  4047c4:	2b01      	cmp	r3, #1
  4047c6:	d01d      	beq.n	404804 <SystemCoreClockUpdate+0x48>
  4047c8:	b183      	cbz	r3, 4047ec <SystemCoreClockUpdate+0x30>
  4047ca:	2b02      	cmp	r3, #2
  4047cc:	d036      	beq.n	40483c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4047ce:	4b37      	ldr	r3, [pc, #220]	; (4048ac <SystemCoreClockUpdate+0xf0>)
  4047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4047d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4047d6:	2b70      	cmp	r3, #112	; 0x70
  4047d8:	d05f      	beq.n	40489a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4047da:	4b34      	ldr	r3, [pc, #208]	; (4048ac <SystemCoreClockUpdate+0xf0>)
  4047dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4047de:	4934      	ldr	r1, [pc, #208]	; (4048b0 <SystemCoreClockUpdate+0xf4>)
  4047e0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4047e4:	680b      	ldr	r3, [r1, #0]
  4047e6:	40d3      	lsrs	r3, r2
  4047e8:	600b      	str	r3, [r1, #0]
  4047ea:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4047ec:	4b31      	ldr	r3, [pc, #196]	; (4048b4 <SystemCoreClockUpdate+0xf8>)
  4047ee:	695b      	ldr	r3, [r3, #20]
  4047f0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4047f4:	bf14      	ite	ne
  4047f6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4047fa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4047fe:	4b2c      	ldr	r3, [pc, #176]	; (4048b0 <SystemCoreClockUpdate+0xf4>)
  404800:	601a      	str	r2, [r3, #0]
  404802:	e7e4      	b.n	4047ce <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  404804:	4b29      	ldr	r3, [pc, #164]	; (4048ac <SystemCoreClockUpdate+0xf0>)
  404806:	6a1b      	ldr	r3, [r3, #32]
  404808:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40480c:	d003      	beq.n	404816 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40480e:	4a2a      	ldr	r2, [pc, #168]	; (4048b8 <SystemCoreClockUpdate+0xfc>)
  404810:	4b27      	ldr	r3, [pc, #156]	; (4048b0 <SystemCoreClockUpdate+0xf4>)
  404812:	601a      	str	r2, [r3, #0]
  404814:	e7db      	b.n	4047ce <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404816:	4a29      	ldr	r2, [pc, #164]	; (4048bc <SystemCoreClockUpdate+0x100>)
  404818:	4b25      	ldr	r3, [pc, #148]	; (4048b0 <SystemCoreClockUpdate+0xf4>)
  40481a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40481c:	4b23      	ldr	r3, [pc, #140]	; (4048ac <SystemCoreClockUpdate+0xf0>)
  40481e:	6a1b      	ldr	r3, [r3, #32]
  404820:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404824:	2b10      	cmp	r3, #16
  404826:	d005      	beq.n	404834 <SystemCoreClockUpdate+0x78>
  404828:	2b20      	cmp	r3, #32
  40482a:	d1d0      	bne.n	4047ce <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40482c:	4a22      	ldr	r2, [pc, #136]	; (4048b8 <SystemCoreClockUpdate+0xfc>)
  40482e:	4b20      	ldr	r3, [pc, #128]	; (4048b0 <SystemCoreClockUpdate+0xf4>)
  404830:	601a      	str	r2, [r3, #0]
          break;
  404832:	e7cc      	b.n	4047ce <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  404834:	4a22      	ldr	r2, [pc, #136]	; (4048c0 <SystemCoreClockUpdate+0x104>)
  404836:	4b1e      	ldr	r3, [pc, #120]	; (4048b0 <SystemCoreClockUpdate+0xf4>)
  404838:	601a      	str	r2, [r3, #0]
          break;
  40483a:	e7c8      	b.n	4047ce <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40483c:	4b1b      	ldr	r3, [pc, #108]	; (4048ac <SystemCoreClockUpdate+0xf0>)
  40483e:	6a1b      	ldr	r3, [r3, #32]
  404840:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  404844:	d016      	beq.n	404874 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  404846:	4a1c      	ldr	r2, [pc, #112]	; (4048b8 <SystemCoreClockUpdate+0xfc>)
  404848:	4b19      	ldr	r3, [pc, #100]	; (4048b0 <SystemCoreClockUpdate+0xf4>)
  40484a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40484c:	4b17      	ldr	r3, [pc, #92]	; (4048ac <SystemCoreClockUpdate+0xf0>)
  40484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404850:	f003 0303 	and.w	r3, r3, #3
  404854:	2b02      	cmp	r3, #2
  404856:	d1ba      	bne.n	4047ce <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  404858:	4a14      	ldr	r2, [pc, #80]	; (4048ac <SystemCoreClockUpdate+0xf0>)
  40485a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40485c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40485e:	4814      	ldr	r0, [pc, #80]	; (4048b0 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  404860:	f3c1 410a 	ubfx	r1, r1, #16, #11
  404864:	6803      	ldr	r3, [r0, #0]
  404866:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40486a:	b2d2      	uxtb	r2, r2
  40486c:	fbb3 f3f2 	udiv	r3, r3, r2
  404870:	6003      	str	r3, [r0, #0]
  404872:	e7ac      	b.n	4047ce <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404874:	4a11      	ldr	r2, [pc, #68]	; (4048bc <SystemCoreClockUpdate+0x100>)
  404876:	4b0e      	ldr	r3, [pc, #56]	; (4048b0 <SystemCoreClockUpdate+0xf4>)
  404878:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40487a:	4b0c      	ldr	r3, [pc, #48]	; (4048ac <SystemCoreClockUpdate+0xf0>)
  40487c:	6a1b      	ldr	r3, [r3, #32]
  40487e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404882:	2b10      	cmp	r3, #16
  404884:	d005      	beq.n	404892 <SystemCoreClockUpdate+0xd6>
  404886:	2b20      	cmp	r3, #32
  404888:	d1e0      	bne.n	40484c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40488a:	4a0b      	ldr	r2, [pc, #44]	; (4048b8 <SystemCoreClockUpdate+0xfc>)
  40488c:	4b08      	ldr	r3, [pc, #32]	; (4048b0 <SystemCoreClockUpdate+0xf4>)
  40488e:	601a      	str	r2, [r3, #0]
          break;
  404890:	e7dc      	b.n	40484c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  404892:	4a0b      	ldr	r2, [pc, #44]	; (4048c0 <SystemCoreClockUpdate+0x104>)
  404894:	4b06      	ldr	r3, [pc, #24]	; (4048b0 <SystemCoreClockUpdate+0xf4>)
  404896:	601a      	str	r2, [r3, #0]
          break;
  404898:	e7d8      	b.n	40484c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40489a:	4a05      	ldr	r2, [pc, #20]	; (4048b0 <SystemCoreClockUpdate+0xf4>)
  40489c:	6813      	ldr	r3, [r2, #0]
  40489e:	4909      	ldr	r1, [pc, #36]	; (4048c4 <SystemCoreClockUpdate+0x108>)
  4048a0:	fba1 1303 	umull	r1, r3, r1, r3
  4048a4:	085b      	lsrs	r3, r3, #1
  4048a6:	6013      	str	r3, [r2, #0]
  4048a8:	4770      	bx	lr
  4048aa:	bf00      	nop
  4048ac:	400e0600 	.word	0x400e0600
  4048b0:	204000cc 	.word	0x204000cc
  4048b4:	400e1810 	.word	0x400e1810
  4048b8:	00b71b00 	.word	0x00b71b00
  4048bc:	003d0900 	.word	0x003d0900
  4048c0:	007a1200 	.word	0x007a1200
  4048c4:	aaaaaaab 	.word	0xaaaaaaab

004048c8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4048c8:	4b12      	ldr	r3, [pc, #72]	; (404914 <system_init_flash+0x4c>)
  4048ca:	4298      	cmp	r0, r3
  4048cc:	d911      	bls.n	4048f2 <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4048ce:	4b12      	ldr	r3, [pc, #72]	; (404918 <system_init_flash+0x50>)
  4048d0:	4298      	cmp	r0, r3
  4048d2:	d913      	bls.n	4048fc <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4048d4:	4b11      	ldr	r3, [pc, #68]	; (40491c <system_init_flash+0x54>)
  4048d6:	4298      	cmp	r0, r3
  4048d8:	d914      	bls.n	404904 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4048da:	4b11      	ldr	r3, [pc, #68]	; (404920 <system_init_flash+0x58>)
  4048dc:	4298      	cmp	r0, r3
  4048de:	d915      	bls.n	40490c <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4048e0:	4b10      	ldr	r3, [pc, #64]	; (404924 <system_init_flash+0x5c>)
  4048e2:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4048e4:	bf94      	ite	ls
  4048e6:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4048ea:	4a0f      	ldrhi	r2, [pc, #60]	; (404928 <system_init_flash+0x60>)
  4048ec:	4b0f      	ldr	r3, [pc, #60]	; (40492c <system_init_flash+0x64>)
  4048ee:	601a      	str	r2, [r3, #0]
  4048f0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4048f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4048f6:	4b0d      	ldr	r3, [pc, #52]	; (40492c <system_init_flash+0x64>)
  4048f8:	601a      	str	r2, [r3, #0]
  4048fa:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4048fc:	4a0c      	ldr	r2, [pc, #48]	; (404930 <system_init_flash+0x68>)
  4048fe:	4b0b      	ldr	r3, [pc, #44]	; (40492c <system_init_flash+0x64>)
  404900:	601a      	str	r2, [r3, #0]
  404902:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  404904:	4a0b      	ldr	r2, [pc, #44]	; (404934 <system_init_flash+0x6c>)
  404906:	4b09      	ldr	r3, [pc, #36]	; (40492c <system_init_flash+0x64>)
  404908:	601a      	str	r2, [r3, #0]
  40490a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40490c:	4a0a      	ldr	r2, [pc, #40]	; (404938 <system_init_flash+0x70>)
  40490e:	4b07      	ldr	r3, [pc, #28]	; (40492c <system_init_flash+0x64>)
  404910:	601a      	str	r2, [r3, #0]
  404912:	4770      	bx	lr
  404914:	01312cff 	.word	0x01312cff
  404918:	026259ff 	.word	0x026259ff
  40491c:	039386ff 	.word	0x039386ff
  404920:	04c4b3ff 	.word	0x04c4b3ff
  404924:	05f5e0ff 	.word	0x05f5e0ff
  404928:	04000500 	.word	0x04000500
  40492c:	400e0c00 	.word	0x400e0c00
  404930:	04000100 	.word	0x04000100
  404934:	04000200 	.word	0x04000200
  404938:	04000300 	.word	0x04000300

0040493c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40493c:	4b0a      	ldr	r3, [pc, #40]	; (404968 <_sbrk+0x2c>)
  40493e:	681b      	ldr	r3, [r3, #0]
  404940:	b153      	cbz	r3, 404958 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  404942:	4b09      	ldr	r3, [pc, #36]	; (404968 <_sbrk+0x2c>)
  404944:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  404946:	181a      	adds	r2, r3, r0
  404948:	4908      	ldr	r1, [pc, #32]	; (40496c <_sbrk+0x30>)
  40494a:	4291      	cmp	r1, r2
  40494c:	db08      	blt.n	404960 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40494e:	4610      	mov	r0, r2
  404950:	4a05      	ldr	r2, [pc, #20]	; (404968 <_sbrk+0x2c>)
  404952:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  404954:	4618      	mov	r0, r3
  404956:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  404958:	4a05      	ldr	r2, [pc, #20]	; (404970 <_sbrk+0x34>)
  40495a:	4b03      	ldr	r3, [pc, #12]	; (404968 <_sbrk+0x2c>)
  40495c:	601a      	str	r2, [r3, #0]
  40495e:	e7f0      	b.n	404942 <_sbrk+0x6>
		return (caddr_t) -1;	
  404960:	f04f 30ff 	mov.w	r0, #4294967295
}
  404964:	4770      	bx	lr
  404966:	bf00      	nop
  404968:	20400c00 	.word	0x20400c00
  40496c:	2045fffc 	.word	0x2045fffc
  404970:	204032b0 	.word	0x204032b0

00404974 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  404974:	f04f 30ff 	mov.w	r0, #4294967295
  404978:	4770      	bx	lr

0040497a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40497a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40497e:	604b      	str	r3, [r1, #4]

	return 0;
}
  404980:	2000      	movs	r0, #0
  404982:	4770      	bx	lr

00404984 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  404984:	2001      	movs	r0, #1
  404986:	4770      	bx	lr

00404988 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  404988:	2000      	movs	r0, #0
  40498a:	4770      	bx	lr

0040498c <aes_callback>:

/**
 * \brief The AES interrupt call back function.
 */
void aes_callback(void)
{
  40498c:	b508      	push	{r3, lr}
	/* Read the output. */
	aes_read_output_data(AES, (uint32_t*) (block_buf + chunk_count));
  40498e:	4b06      	ldr	r3, [pc, #24]	; (4049a8 <aes_callback+0x1c>)
  404990:	881b      	ldrh	r3, [r3, #0]
  404992:	4a06      	ldr	r2, [pc, #24]	; (4049ac <aes_callback+0x20>)
  404994:	6811      	ldr	r1, [r2, #0]
  404996:	4419      	add	r1, r3
  404998:	4805      	ldr	r0, [pc, #20]	; (4049b0 <aes_callback+0x24>)
  40499a:	4b06      	ldr	r3, [pc, #24]	; (4049b4 <aes_callback+0x28>)
  40499c:	4798      	blx	r3
	state = true;
  40499e:	2201      	movs	r2, #1
  4049a0:	4b05      	ldr	r3, [pc, #20]	; (4049b8 <aes_callback+0x2c>)
  4049a2:	701a      	strb	r2, [r3, #0]
  4049a4:	bd08      	pop	{r3, pc}
  4049a6:	bf00      	nop
  4049a8:	20401084 	.word	0x20401084
  4049ac:	20401080 	.word	0x20401080
  4049b0:	4006c000 	.word	0x4006c000
  4049b4:	00400f09 	.word	0x00400f09
  4049b8:	20400c10 	.word	0x20400c10

004049bc <cipher_init>:
}


void cipher_init(void)
{
  4049bc:	b538      	push	{r3, r4, r5, lr}
		/* Enable the AES module. */
		aes_get_config_defaults(&g_aes_cfg);
  4049be:	4d09      	ldr	r5, [pc, #36]	; (4049e4 <cipher_init+0x28>)
  4049c0:	4628      	mov	r0, r5
  4049c2:	4b09      	ldr	r3, [pc, #36]	; (4049e8 <cipher_init+0x2c>)
  4049c4:	4798      	blx	r3
		aes_init(AES, &g_aes_cfg);
  4049c6:	4c09      	ldr	r4, [pc, #36]	; (4049ec <cipher_init+0x30>)
  4049c8:	4629      	mov	r1, r5
  4049ca:	4620      	mov	r0, r4
  4049cc:	4b08      	ldr	r3, [pc, #32]	; (4049f0 <cipher_init+0x34>)
  4049ce:	4798      	blx	r3
		aes_enable();
  4049d0:	4b08      	ldr	r3, [pc, #32]	; (4049f4 <cipher_init+0x38>)
  4049d2:	4798      	blx	r3

		/* Enable AES interrupt. */
		aes_set_callback(AES, AES_INTERRUPT_DATA_READY,
  4049d4:	2301      	movs	r3, #1
  4049d6:	4a08      	ldr	r2, [pc, #32]	; (4049f8 <cipher_init+0x3c>)
  4049d8:	4619      	mov	r1, r3
  4049da:	4620      	mov	r0, r4
  4049dc:	4c07      	ldr	r4, [pc, #28]	; (4049fc <cipher_init+0x40>)
  4049de:	47a0      	blx	r4
  4049e0:	bd38      	pop	{r3, r4, r5, pc}
  4049e2:	bf00      	nop
  4049e4:	20400c04 	.word	0x20400c04
  4049e8:	00400da9 	.word	0x00400da9
  4049ec:	4006c000 	.word	0x4006c000
  4049f0:	00400e6d 	.word	0x00400e6d
  4049f4:	00400dc1 	.word	0x00400dc1
  4049f8:	0040498d 	.word	0x0040498d
  4049fc:	00400f21 	.word	0x00400f21

00404a00 <encrypt_write_data>:
		aes_callback, 1);
}

void encrypt_write_data(uint8_t * block, iram_size_t block_size)
{
  404a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404a04:	4605      	mov	r5, r0
  404a06:	460e      	mov	r6, r1
	//printf("eblock:%x\t%x\t%x\t%d\r\n",block[0],block[1],block[2],block_size);
    state = false;
  404a08:	2400      	movs	r4, #0
  404a0a:	4b1a      	ldr	r3, [pc, #104]	; (404a74 <encrypt_write_data+0x74>)
  404a0c:	701c      	strb	r4, [r3, #0]

	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
  404a0e:	491a      	ldr	r1, [pc, #104]	; (404a78 <encrypt_write_data+0x78>)
  404a10:	2301      	movs	r3, #1
  404a12:	700b      	strb	r3, [r1, #0]
	//g_aes_cfg.key_size = AES_KEY_SIZE_128;
	g_aes_cfg.key_size = AES_KEY_SIZE_256;
  404a14:	2202      	movs	r2, #2
  404a16:	704a      	strb	r2, [r1, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
  404a18:	708b      	strb	r3, [r1, #2]
	g_aes_cfg.opmode = AES_CTR_MODE;
  404a1a:	2304      	movs	r3, #4
  404a1c:	70cb      	strb	r3, [r1, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
  404a1e:	710c      	strb	r4, [r1, #4]
	g_aes_cfg.lod = false;
  404a20:	714c      	strb	r4, [r1, #5]
	aes_set_config(AES, &g_aes_cfg);
  404a22:	4f16      	ldr	r7, [pc, #88]	; (404a7c <encrypt_write_data+0x7c>)
  404a24:	4638      	mov	r0, r7
  404a26:	4b16      	ldr	r3, [pc, #88]	; (404a80 <encrypt_write_data+0x80>)
  404a28:	4798      	blx	r3

	/* Set the cryptographic key. */
	aes_write_key(AES, key256);
  404a2a:	4916      	ldr	r1, [pc, #88]	; (404a84 <encrypt_write_data+0x84>)
  404a2c:	4638      	mov	r0, r7
  404a2e:	4b16      	ldr	r3, [pc, #88]	; (404a88 <encrypt_write_data+0x88>)
  404a30:	4798      	blx	r3

	/* Set the initialization vector. */
	aes_write_initvector(AES, init_vector_ctr);
  404a32:	4916      	ldr	r1, [pc, #88]	; (404a8c <encrypt_write_data+0x8c>)
  404a34:	4638      	mov	r0, r7
  404a36:	4b16      	ldr	r3, [pc, #88]	; (404a90 <encrypt_write_data+0x90>)
  404a38:	4798      	blx	r3

    block_buf = block;
  404a3a:	4b16      	ldr	r3, [pc, #88]	; (404a94 <encrypt_write_data+0x94>)
  404a3c:	601d      	str	r5, [r3, #0]
	chunk_count = 0;
  404a3e:	4b16      	ldr	r3, [pc, #88]	; (404a98 <encrypt_write_data+0x98>)
  404a40:	801c      	strh	r4, [r3, #0]

    while (chunk_count < block_size) 
  404a42:	b1ae      	cbz	r6, 404a70 <encrypt_write_data+0x70>
  404a44:	4621      	mov	r1, r4
    {
		state = false;
  404a46:	4c0b      	ldr	r4, [pc, #44]	; (404a74 <encrypt_write_data+0x74>)
  404a48:	f04f 0900 	mov.w	r9, #0
        /* Write the data to be ciphered to the input data registers. */
    	aes_write_input_data(AES, (uint32_t*) (block+chunk_count));
  404a4c:	46b8      	mov	r8, r7
  404a4e:	4f13      	ldr	r7, [pc, #76]	; (404a9c <encrypt_write_data+0x9c>)
		state = false;
  404a50:	f884 9000 	strb.w	r9, [r4]
    	aes_write_input_data(AES, (uint32_t*) (block+chunk_count));
  404a54:	4429      	add	r1, r5
  404a56:	4640      	mov	r0, r8
  404a58:	47b8      	blx	r7

    	/* Wait for the end of the encryption process. */
    	while (false == state) {
  404a5a:	7823      	ldrb	r3, [r4, #0]
  404a5c:	2b00      	cmp	r3, #0
  404a5e:	d0fc      	beq.n	404a5a <encrypt_write_data+0x5a>
    	}

		//memcpy( (uint32_t*) (block+count), output_data, sizeof(output_data));

        chunk_count += 16;
  404a60:	4a0d      	ldr	r2, [pc, #52]	; (404a98 <encrypt_write_data+0x98>)
  404a62:	8813      	ldrh	r3, [r2, #0]
  404a64:	3310      	adds	r3, #16
  404a66:	b29b      	uxth	r3, r3
  404a68:	8013      	strh	r3, [r2, #0]
    while (chunk_count < block_size) 
  404a6a:	4619      	mov	r1, r3
  404a6c:	42b3      	cmp	r3, r6
  404a6e:	d3ef      	bcc.n	404a50 <encrypt_write_data+0x50>
  404a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404a74:	20400c10 	.word	0x20400c10
  404a78:	20400c04 	.word	0x20400c04
  404a7c:	4006c000 	.word	0x4006c000
  404a80:	00400e19 	.word	0x00400e19
  404a84:	0040820c 	.word	0x0040820c
  404a88:	00400e9d 	.word	0x00400e9d
  404a8c:	004081fc 	.word	0x004081fc
  404a90:	00400ed1 	.word	0x00400ed1
  404a94:	20401080 	.word	0x20401080
  404a98:	20401084 	.word	0x20401084
  404a9c:	00400eed 	.word	0x00400eed

00404aa0 <decrypt_read_data>:
    }
}

void decrypt_read_data(uint8_t * block, iram_size_t block_size)
{
  404aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404aa4:	4605      	mov	r5, r0
  404aa6:	460e      	mov	r6, r1
	//printf("dblock:%x\t%x\t%x\t%d\r\n",block[0],block[1],block[2],block_size);
    state = false;
  404aa8:	2400      	movs	r4, #0
  404aaa:	4b1a      	ldr	r3, [pc, #104]	; (404b14 <decrypt_read_data+0x74>)
  404aac:	701c      	strb	r4, [r3, #0]

	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_DECRYPTION;
  404aae:	491a      	ldr	r1, [pc, #104]	; (404b18 <decrypt_read_data+0x78>)
  404ab0:	700c      	strb	r4, [r1, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_256;
  404ab2:	2302      	movs	r3, #2
  404ab4:	704b      	strb	r3, [r1, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
  404ab6:	2301      	movs	r3, #1
  404ab8:	708b      	strb	r3, [r1, #2]
	g_aes_cfg.opmode = AES_CTR_MODE;
  404aba:	2304      	movs	r3, #4
  404abc:	70cb      	strb	r3, [r1, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
  404abe:	710c      	strb	r4, [r1, #4]
	g_aes_cfg.lod = false;
  404ac0:	714c      	strb	r4, [r1, #5]
	aes_set_config(AES, &g_aes_cfg);
  404ac2:	4f16      	ldr	r7, [pc, #88]	; (404b1c <decrypt_read_data+0x7c>)
  404ac4:	4638      	mov	r0, r7
  404ac6:	4b16      	ldr	r3, [pc, #88]	; (404b20 <decrypt_read_data+0x80>)
  404ac8:	4798      	blx	r3

	/* Set the cryptographic key. */
	aes_write_key(AES, key256);
  404aca:	4916      	ldr	r1, [pc, #88]	; (404b24 <decrypt_read_data+0x84>)
  404acc:	4638      	mov	r0, r7
  404ace:	4b16      	ldr	r3, [pc, #88]	; (404b28 <decrypt_read_data+0x88>)
  404ad0:	4798      	blx	r3

	/* Set the initialization vector. */
	aes_write_initvector(AES, init_vector_ctr);
  404ad2:	4916      	ldr	r1, [pc, #88]	; (404b2c <decrypt_read_data+0x8c>)
  404ad4:	4638      	mov	r0, r7
  404ad6:	4b16      	ldr	r3, [pc, #88]	; (404b30 <decrypt_read_data+0x90>)
  404ad8:	4798      	blx	r3

	block_buf = block;
  404ada:	4b16      	ldr	r3, [pc, #88]	; (404b34 <decrypt_read_data+0x94>)
  404adc:	601d      	str	r5, [r3, #0]
	chunk_count = 0;
  404ade:	4b16      	ldr	r3, [pc, #88]	; (404b38 <decrypt_read_data+0x98>)
  404ae0:	801c      	strh	r4, [r3, #0]

	while (chunk_count < block_size)
  404ae2:	b1ae      	cbz	r6, 404b10 <decrypt_read_data+0x70>
  404ae4:	4621      	mov	r1, r4
	{
		state = false;
  404ae6:	4c0b      	ldr	r4, [pc, #44]	; (404b14 <decrypt_read_data+0x74>)
  404ae8:	f04f 0900 	mov.w	r9, #0

	   /* Write the data to be ciphered to the input data registers. */
	   aes_write_input_data(AES, (uint32_t*) (block + chunk_count));
  404aec:	46b8      	mov	r8, r7
  404aee:	4f13      	ldr	r7, [pc, #76]	; (404b3c <decrypt_read_data+0x9c>)
		state = false;
  404af0:	f884 9000 	strb.w	r9, [r4]
	   aes_write_input_data(AES, (uint32_t*) (block + chunk_count));
  404af4:	4429      	add	r1, r5
  404af6:	4640      	mov	r0, r8
  404af8:	47b8      	blx	r7

	   /* Wait for the end of the encryption process. */
	   while (false == state) {
  404afa:	7823      	ldrb	r3, [r4, #0]
  404afc:	2b00      	cmp	r3, #0
  404afe:	d0fc      	beq.n	404afa <decrypt_read_data+0x5a>
	   }
	  
	   //memcpy( (uint32_t*) (block+count), output_data, sizeof(output_data));

	   chunk_count += 16;
  404b00:	4a0d      	ldr	r2, [pc, #52]	; (404b38 <decrypt_read_data+0x98>)
  404b02:	8813      	ldrh	r3, [r2, #0]
  404b04:	3310      	adds	r3, #16
  404b06:	b29b      	uxth	r3, r3
  404b08:	8013      	strh	r3, [r2, #0]
	while (chunk_count < block_size)
  404b0a:	4619      	mov	r1, r3
  404b0c:	42b3      	cmp	r3, r6
  404b0e:	d3ef      	bcc.n	404af0 <decrypt_read_data+0x50>
  404b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404b14:	20400c10 	.word	0x20400c10
  404b18:	20400c04 	.word	0x20400c04
  404b1c:	4006c000 	.word	0x4006c000
  404b20:	00400e19 	.word	0x00400e19
  404b24:	0040820c 	.word	0x0040820c
  404b28:	00400e9d 	.word	0x00400e9d
  404b2c:	004081fc 	.word	0x004081fc
  404b30:	00400ed1 	.word	0x00400ed1
  404b34:	20401080 	.word	0x20401080
  404b38:	20401084 	.word	0x20401084
  404b3c:	00400eed 	.word	0x00400eed

00404b40 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  404b40:	b5f0      	push	{r4, r5, r6, r7, lr}
  404b42:	b083      	sub	sp, #12
  404b44:	4605      	mov	r5, r0
  404b46:	460c      	mov	r4, r1
	uint32_t val = 0;
  404b48:	2300      	movs	r3, #0
  404b4a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  404b4c:	4b2a      	ldr	r3, [pc, #168]	; (404bf8 <usart_serial_getchar+0xb8>)
  404b4e:	4298      	cmp	r0, r3
  404b50:	d013      	beq.n	404b7a <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  404b52:	4b2a      	ldr	r3, [pc, #168]	; (404bfc <usart_serial_getchar+0xbc>)
  404b54:	4298      	cmp	r0, r3
  404b56:	d018      	beq.n	404b8a <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  404b58:	4b29      	ldr	r3, [pc, #164]	; (404c00 <usart_serial_getchar+0xc0>)
  404b5a:	4298      	cmp	r0, r3
  404b5c:	d01d      	beq.n	404b9a <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  404b5e:	4b29      	ldr	r3, [pc, #164]	; (404c04 <usart_serial_getchar+0xc4>)
  404b60:	429d      	cmp	r5, r3
  404b62:	d022      	beq.n	404baa <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  404b64:	4b28      	ldr	r3, [pc, #160]	; (404c08 <usart_serial_getchar+0xc8>)
  404b66:	429d      	cmp	r5, r3
  404b68:	d027      	beq.n	404bba <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  404b6a:	4b28      	ldr	r3, [pc, #160]	; (404c0c <usart_serial_getchar+0xcc>)
  404b6c:	429d      	cmp	r5, r3
  404b6e:	d02e      	beq.n	404bce <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  404b70:	4b27      	ldr	r3, [pc, #156]	; (404c10 <usart_serial_getchar+0xd0>)
  404b72:	429d      	cmp	r5, r3
  404b74:	d035      	beq.n	404be2 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  404b76:	b003      	add	sp, #12
  404b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  404b7a:	461f      	mov	r7, r3
  404b7c:	4e25      	ldr	r6, [pc, #148]	; (404c14 <usart_serial_getchar+0xd4>)
  404b7e:	4621      	mov	r1, r4
  404b80:	4638      	mov	r0, r7
  404b82:	47b0      	blx	r6
  404b84:	2800      	cmp	r0, #0
  404b86:	d1fa      	bne.n	404b7e <usart_serial_getchar+0x3e>
  404b88:	e7e9      	b.n	404b5e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  404b8a:	461f      	mov	r7, r3
  404b8c:	4e21      	ldr	r6, [pc, #132]	; (404c14 <usart_serial_getchar+0xd4>)
  404b8e:	4621      	mov	r1, r4
  404b90:	4638      	mov	r0, r7
  404b92:	47b0      	blx	r6
  404b94:	2800      	cmp	r0, #0
  404b96:	d1fa      	bne.n	404b8e <usart_serial_getchar+0x4e>
  404b98:	e7e4      	b.n	404b64 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  404b9a:	461f      	mov	r7, r3
  404b9c:	4e1d      	ldr	r6, [pc, #116]	; (404c14 <usart_serial_getchar+0xd4>)
  404b9e:	4621      	mov	r1, r4
  404ba0:	4638      	mov	r0, r7
  404ba2:	47b0      	blx	r6
  404ba4:	2800      	cmp	r0, #0
  404ba6:	d1fa      	bne.n	404b9e <usart_serial_getchar+0x5e>
  404ba8:	e7df      	b.n	404b6a <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  404baa:	461f      	mov	r7, r3
  404bac:	4e19      	ldr	r6, [pc, #100]	; (404c14 <usart_serial_getchar+0xd4>)
  404bae:	4621      	mov	r1, r4
  404bb0:	4638      	mov	r0, r7
  404bb2:	47b0      	blx	r6
  404bb4:	2800      	cmp	r0, #0
  404bb6:	d1fa      	bne.n	404bae <usart_serial_getchar+0x6e>
  404bb8:	e7da      	b.n	404b70 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  404bba:	461e      	mov	r6, r3
  404bbc:	4d16      	ldr	r5, [pc, #88]	; (404c18 <usart_serial_getchar+0xd8>)
  404bbe:	a901      	add	r1, sp, #4
  404bc0:	4630      	mov	r0, r6
  404bc2:	47a8      	blx	r5
  404bc4:	2800      	cmp	r0, #0
  404bc6:	d1fa      	bne.n	404bbe <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  404bc8:	9b01      	ldr	r3, [sp, #4]
  404bca:	7023      	strb	r3, [r4, #0]
  404bcc:	e7d3      	b.n	404b76 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  404bce:	461e      	mov	r6, r3
  404bd0:	4d11      	ldr	r5, [pc, #68]	; (404c18 <usart_serial_getchar+0xd8>)
  404bd2:	a901      	add	r1, sp, #4
  404bd4:	4630      	mov	r0, r6
  404bd6:	47a8      	blx	r5
  404bd8:	2800      	cmp	r0, #0
  404bda:	d1fa      	bne.n	404bd2 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  404bdc:	9b01      	ldr	r3, [sp, #4]
  404bde:	7023      	strb	r3, [r4, #0]
  404be0:	e7c9      	b.n	404b76 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  404be2:	461e      	mov	r6, r3
  404be4:	4d0c      	ldr	r5, [pc, #48]	; (404c18 <usart_serial_getchar+0xd8>)
  404be6:	a901      	add	r1, sp, #4
  404be8:	4630      	mov	r0, r6
  404bea:	47a8      	blx	r5
  404bec:	2800      	cmp	r0, #0
  404bee:	d1fa      	bne.n	404be6 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  404bf0:	9b01      	ldr	r3, [sp, #4]
  404bf2:	7023      	strb	r3, [r4, #0]
}
  404bf4:	e7bf      	b.n	404b76 <usart_serial_getchar+0x36>
  404bf6:	bf00      	nop
  404bf8:	400e0800 	.word	0x400e0800
  404bfc:	400e0a00 	.word	0x400e0a00
  404c00:	400e1a00 	.word	0x400e1a00
  404c04:	400e1c00 	.word	0x400e1c00
  404c08:	40024000 	.word	0x40024000
  404c0c:	40028000 	.word	0x40028000
  404c10:	4002c000 	.word	0x4002c000
  404c14:	00401757 	.word	0x00401757
  404c18:	00401863 	.word	0x00401863

00404c1c <usart_serial_putchar>:
{
  404c1c:	b570      	push	{r4, r5, r6, lr}
  404c1e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  404c20:	4b2a      	ldr	r3, [pc, #168]	; (404ccc <usart_serial_putchar+0xb0>)
  404c22:	4298      	cmp	r0, r3
  404c24:	d013      	beq.n	404c4e <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  404c26:	4b2a      	ldr	r3, [pc, #168]	; (404cd0 <usart_serial_putchar+0xb4>)
  404c28:	4298      	cmp	r0, r3
  404c2a:	d019      	beq.n	404c60 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  404c2c:	4b29      	ldr	r3, [pc, #164]	; (404cd4 <usart_serial_putchar+0xb8>)
  404c2e:	4298      	cmp	r0, r3
  404c30:	d01f      	beq.n	404c72 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  404c32:	4b29      	ldr	r3, [pc, #164]	; (404cd8 <usart_serial_putchar+0xbc>)
  404c34:	4298      	cmp	r0, r3
  404c36:	d025      	beq.n	404c84 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  404c38:	4b28      	ldr	r3, [pc, #160]	; (404cdc <usart_serial_putchar+0xc0>)
  404c3a:	4298      	cmp	r0, r3
  404c3c:	d02b      	beq.n	404c96 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  404c3e:	4b28      	ldr	r3, [pc, #160]	; (404ce0 <usart_serial_putchar+0xc4>)
  404c40:	4298      	cmp	r0, r3
  404c42:	d031      	beq.n	404ca8 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  404c44:	4b27      	ldr	r3, [pc, #156]	; (404ce4 <usart_serial_putchar+0xc8>)
  404c46:	4298      	cmp	r0, r3
  404c48:	d037      	beq.n	404cba <usart_serial_putchar+0x9e>
	return 0;
  404c4a:	2000      	movs	r0, #0
}
  404c4c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  404c4e:	461e      	mov	r6, r3
  404c50:	4d25      	ldr	r5, [pc, #148]	; (404ce8 <usart_serial_putchar+0xcc>)
  404c52:	4621      	mov	r1, r4
  404c54:	4630      	mov	r0, r6
  404c56:	47a8      	blx	r5
  404c58:	2800      	cmp	r0, #0
  404c5a:	d1fa      	bne.n	404c52 <usart_serial_putchar+0x36>
		return 1;
  404c5c:	2001      	movs	r0, #1
  404c5e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  404c60:	461e      	mov	r6, r3
  404c62:	4d21      	ldr	r5, [pc, #132]	; (404ce8 <usart_serial_putchar+0xcc>)
  404c64:	4621      	mov	r1, r4
  404c66:	4630      	mov	r0, r6
  404c68:	47a8      	blx	r5
  404c6a:	2800      	cmp	r0, #0
  404c6c:	d1fa      	bne.n	404c64 <usart_serial_putchar+0x48>
		return 1;
  404c6e:	2001      	movs	r0, #1
  404c70:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  404c72:	461e      	mov	r6, r3
  404c74:	4d1c      	ldr	r5, [pc, #112]	; (404ce8 <usart_serial_putchar+0xcc>)
  404c76:	4621      	mov	r1, r4
  404c78:	4630      	mov	r0, r6
  404c7a:	47a8      	blx	r5
  404c7c:	2800      	cmp	r0, #0
  404c7e:	d1fa      	bne.n	404c76 <usart_serial_putchar+0x5a>
		return 1;
  404c80:	2001      	movs	r0, #1
  404c82:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  404c84:	461e      	mov	r6, r3
  404c86:	4d18      	ldr	r5, [pc, #96]	; (404ce8 <usart_serial_putchar+0xcc>)
  404c88:	4621      	mov	r1, r4
  404c8a:	4630      	mov	r0, r6
  404c8c:	47a8      	blx	r5
  404c8e:	2800      	cmp	r0, #0
  404c90:	d1fa      	bne.n	404c88 <usart_serial_putchar+0x6c>
		return 1;
  404c92:	2001      	movs	r0, #1
  404c94:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404c96:	461e      	mov	r6, r3
  404c98:	4d14      	ldr	r5, [pc, #80]	; (404cec <usart_serial_putchar+0xd0>)
  404c9a:	4621      	mov	r1, r4
  404c9c:	4630      	mov	r0, r6
  404c9e:	47a8      	blx	r5
  404ca0:	2800      	cmp	r0, #0
  404ca2:	d1fa      	bne.n	404c9a <usart_serial_putchar+0x7e>
		return 1;
  404ca4:	2001      	movs	r0, #1
  404ca6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404ca8:	461e      	mov	r6, r3
  404caa:	4d10      	ldr	r5, [pc, #64]	; (404cec <usart_serial_putchar+0xd0>)
  404cac:	4621      	mov	r1, r4
  404cae:	4630      	mov	r0, r6
  404cb0:	47a8      	blx	r5
  404cb2:	2800      	cmp	r0, #0
  404cb4:	d1fa      	bne.n	404cac <usart_serial_putchar+0x90>
		return 1;
  404cb6:	2001      	movs	r0, #1
  404cb8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404cba:	461e      	mov	r6, r3
  404cbc:	4d0b      	ldr	r5, [pc, #44]	; (404cec <usart_serial_putchar+0xd0>)
  404cbe:	4621      	mov	r1, r4
  404cc0:	4630      	mov	r0, r6
  404cc2:	47a8      	blx	r5
  404cc4:	2800      	cmp	r0, #0
  404cc6:	d1fa      	bne.n	404cbe <usart_serial_putchar+0xa2>
		return 1;
  404cc8:	2001      	movs	r0, #1
  404cca:	bd70      	pop	{r4, r5, r6, pc}
  404ccc:	400e0800 	.word	0x400e0800
  404cd0:	400e0a00 	.word	0x400e0a00
  404cd4:	400e1a00 	.word	0x400e1a00
  404cd8:	400e1c00 	.word	0x400e1c00
  404cdc:	40024000 	.word	0x40024000
  404ce0:	40028000 	.word	0x40028000
  404ce4:	4002c000 	.word	0x4002c000
  404ce8:	00401745 	.word	0x00401745
  404cec:	0040184d 	.word	0x0040184d

00404cf0 <main>:
}

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
  404cf0:	b500      	push	{lr}
  404cf2:	b087      	sub	sp, #28
	
	irq_initialize_vectors();
	cpu_irq_enable();
  404cf4:	2201      	movs	r2, #1
  404cf6:	4b47      	ldr	r3, [pc, #284]	; (404e14 <main+0x124>)
  404cf8:	701a      	strb	r2, [r3, #0]
  404cfa:	f3bf 8f5f 	dmb	sy
  404cfe:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
  404d00:	4b45      	ldr	r3, [pc, #276]	; (404e18 <main+0x128>)
  404d02:	2400      	movs	r4, #0
  404d04:	701c      	strb	r4, [r3, #0]
  404d06:	705c      	strb	r4, [r3, #1]
  404d08:	709c      	strb	r4, [r3, #2]
  404d0a:	70dc      	strb	r4, [r3, #3]
  404d0c:	711c      	strb	r4, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  404d0e:	715a      	strb	r2, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAM0
	sysclk_init();
  404d10:	4b42      	ldr	r3, [pc, #264]	; (404e1c <main+0x12c>)
  404d12:	4798      	blx	r3
	board_init();
  404d14:	4b42      	ldr	r3, [pc, #264]	; (404e20 <main+0x130>)
  404d16:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  404d18:	4d42      	ldr	r5, [pc, #264]	; (404e24 <main+0x134>)
  404d1a:	4b43      	ldr	r3, [pc, #268]	; (404e28 <main+0x138>)
  404d1c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  404d1e:	4a43      	ldr	r2, [pc, #268]	; (404e2c <main+0x13c>)
  404d20:	4b43      	ldr	r3, [pc, #268]	; (404e30 <main+0x140>)
  404d22:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  404d24:	4a43      	ldr	r2, [pc, #268]	; (404e34 <main+0x144>)
  404d26:	4b44      	ldr	r3, [pc, #272]	; (404e38 <main+0x148>)
  404d28:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  404d2a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  404d2e:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  404d30:	23c0      	movs	r3, #192	; 0xc0
  404d32:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  404d34:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404d38:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  404d3a:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  404d3c:	9404      	str	r4, [sp, #16]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  404d3e:	200e      	movs	r0, #14
  404d40:	4b3e      	ldr	r3, [pc, #248]	; (404e3c <main+0x14c>)
  404d42:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  404d44:	4a3e      	ldr	r2, [pc, #248]	; (404e40 <main+0x150>)
  404d46:	4669      	mov	r1, sp
  404d48:	4628      	mov	r0, r5
  404d4a:	4b3e      	ldr	r3, [pc, #248]	; (404e44 <main+0x154>)
  404d4c:	4798      	blx	r3
		usart_enable_tx(p_usart);
  404d4e:	4628      	mov	r0, r5
  404d50:	4b3d      	ldr	r3, [pc, #244]	; (404e48 <main+0x158>)
  404d52:	4798      	blx	r3
		usart_enable_rx(p_usart);
  404d54:	4628      	mov	r0, r5
  404d56:	4b3d      	ldr	r3, [pc, #244]	; (404e4c <main+0x15c>)
  404d58:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  404d5a:	4e3d      	ldr	r6, [pc, #244]	; (404e50 <main+0x160>)
  404d5c:	6833      	ldr	r3, [r6, #0]
  404d5e:	4621      	mov	r1, r4
  404d60:	6898      	ldr	r0, [r3, #8]
  404d62:	4d3c      	ldr	r5, [pc, #240]	; (404e54 <main+0x164>)
  404d64:	47a8      	blx	r5
	setbuf(stdin, NULL);
  404d66:	6833      	ldr	r3, [r6, #0]
  404d68:	4621      	mov	r1, r4
  404d6a:	6858      	ldr	r0, [r3, #4]
  404d6c:	47a8      	blx	r5
#else
	system_init();
#endif

	configure_console();
	printf("This is to test serial console\r\n");
  404d6e:	483a      	ldr	r0, [pc, #232]	; (404e58 <main+0x168>)
  404d70:	4b3a      	ldr	r3, [pc, #232]	; (404e5c <main+0x16c>)
  404d72:	4798      	blx	r3
	
	//ui initalization	
	ui_initalization();
  404d74:	4b3a      	ldr	r3, [pc, #232]	; (404e60 <main+0x170>)
  404d76:	4798      	blx	r3
	ui_powerdown();
  404d78:	4b3a      	ldr	r3, [pc, #232]	; (404e64 <main+0x174>)
  404d7a:	4798      	blx	r3
//.......CIT..........SD_card initialization.........
	sd_card_initialization();
  404d7c:	4b3a      	ldr	r3, [pc, #232]	; (404e68 <main+0x178>)
  404d7e:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	//...............CIT........USB device controller start..............
	udc_start();
  404d80:	4b3a      	ldr	r3, [pc, #232]	; (404e6c <main+0x17c>)
  404d82:	4798      	blx	r3
	
	//......CIT............... Initialize AES stuff
	cipher_init();
  404d84:	4b3a      	ldr	r3, [pc, #232]	; (404e70 <main+0x180>)
  404d86:	4798      	blx	r3

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {
		
		if (main_block_msc_enable) {
  404d88:	4d3a      	ldr	r5, [pc, #232]	; (404e74 <main+0x184>)
{
	//printf("sleepmgr enter sleep entered.......\r\n");
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
  404d8a:	4c22      	ldr	r4, [pc, #136]	; (404e14 <main+0x124>)
	while (!(*lock_ptr)) {
  404d8c:	4e22      	ldr	r6, [pc, #136]	; (404e18 <main+0x128>)
  404d8e:	e01c      	b.n	404dca <main+0xda>
  __ASM volatile ("cpsid i" : : : "memory");
  404d90:	b672      	cpsid	i
  404d92:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
  404d96:	2300      	movs	r3, #0
  404d98:	7023      	strb	r3, [r4, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
  404d9a:	4b37      	ldr	r3, [pc, #220]	; (404e78 <main+0x188>)
  404d9c:	4798      	blx	r3
  404d9e:	e014      	b.n	404dca <main+0xda>
  404da0:	b672      	cpsid	i
  404da2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404da6:	2300      	movs	r3, #0
  404da8:	7023      	strb	r3, [r4, #0]
	while (!(*lock_ptr)) {
  404daa:	7833      	ldrb	r3, [r6, #0]
  404dac:	b943      	cbnz	r3, 404dc0 <main+0xd0>
  404dae:	4b1a      	ldr	r3, [pc, #104]	; (404e18 <main+0x128>)
  404db0:	2000      	movs	r0, #0
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
  404db2:	3001      	adds	r0, #1
  404db4:	b2c0      	uxtb	r0, r0
	while (!(*lock_ptr)) {
  404db6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  404dba:	2a00      	cmp	r2, #0
  404dbc:	d0f9      	beq.n	404db2 <main+0xc2>

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
  404dbe:	bb08      	cbnz	r0, 404e04 <main+0x114>
		cpu_irq_enable();
  404dc0:	2301      	movs	r3, #1
  404dc2:	7023      	strb	r3, [r4, #0]
  404dc4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404dc8:	b662      	cpsie	i
  404dca:	782b      	ldrb	r3, [r5, #0]
  404dcc:	2b00      	cmp	r3, #0
  404dce:	d0e7      	beq.n	404da0 <main+0xb0>
				if (!udi_mass_storage_process_trans()) {
  404dd0:	4b2a      	ldr	r3, [pc, #168]	; (404e7c <main+0x18c>)
  404dd2:	4798      	blx	r3
  404dd4:	2800      	cmp	r0, #0
  404dd6:	d1f8      	bne.n	404dca <main+0xda>
  __ASM volatile ("cpsid i" : : : "memory");
  404dd8:	b672      	cpsid	i
  404dda:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404dde:	2300      	movs	r3, #0
  404de0:	7023      	strb	r3, [r4, #0]
	while (!(*lock_ptr)) {
  404de2:	7833      	ldrb	r3, [r6, #0]
  404de4:	b943      	cbnz	r3, 404df8 <main+0x108>
  404de6:	4b0c      	ldr	r3, [pc, #48]	; (404e18 <main+0x128>)
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
  404de8:	3001      	adds	r0, #1
  404dea:	b2c0      	uxtb	r0, r0
	while (!(*lock_ptr)) {
  404dec:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  404df0:	2a00      	cmp	r2, #0
  404df2:	d0f9      	beq.n	404de8 <main+0xf8>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
  404df4:	2800      	cmp	r0, #0
  404df6:	d1cb      	bne.n	404d90 <main+0xa0>
		cpu_irq_enable();
  404df8:	2301      	movs	r3, #1
  404dfa:	7023      	strb	r3, [r4, #0]
  404dfc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404e00:	b662      	cpsie	i
  404e02:	e7e2      	b.n	404dca <main+0xda>
  __ASM volatile ("cpsid i" : : : "memory");
  404e04:	b672      	cpsid	i
  404e06:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404e0a:	2300      	movs	r3, #0
  404e0c:	7023      	strb	r3, [r4, #0]
	pmc_sleep(sleep_mode);
  404e0e:	4b1a      	ldr	r3, [pc, #104]	; (404e78 <main+0x188>)
  404e10:	4798      	blx	r3
  404e12:	e7da      	b.n	404dca <main+0xda>
  404e14:	204000c8 	.word	0x204000c8
  404e18:	20401060 	.word	0x20401060
  404e1c:	00401931 	.word	0x00401931
  404e20:	00402a8d 	.word	0x00402a8d
  404e24:	40028000 	.word	0x40028000
  404e28:	20400c50 	.word	0x20400c50
  404e2c:	00404c1d 	.word	0x00404c1d
  404e30:	20400c4c 	.word	0x20400c4c
  404e34:	00404b41 	.word	0x00404b41
  404e38:	20400c48 	.word	0x20400c48
  404e3c:	00402f95 	.word	0x00402f95
  404e40:	08f0d180 	.word	0x08f0d180
  404e44:	004017ed 	.word	0x004017ed
  404e48:	00401841 	.word	0x00401841
  404e4c:	00401847 	.word	0x00401847
  404e50:	204000d0 	.word	0x204000d0
  404e54:	00404ff1 	.word	0x00404ff1
  404e58:	0040822c 	.word	0x0040822c
  404e5c:	00404f2d 	.word	0x00404f2d
  404e60:	004018b9 	.word	0x004018b9
  404e64:	004018c9 	.word	0x004018c9
  404e68:	00404ed1 	.word	0x00404ed1
  404e6c:	00402595 	.word	0x00402595
  404e70:	004049bd 	.word	0x004049bd
  404e74:	20400c11 	.word	0x20400c11
  404e78:	004030c1 	.word	0x004030c1
  404e7c:	004022bd 	.word	0x004022bd

00404e80 <main_suspend_action>:
		}
	}
}

void main_suspend_action(void)
{
  404e80:	b508      	push	{r3, lr}
	ui_powerdown();
  404e82:	4b01      	ldr	r3, [pc, #4]	; (404e88 <main_suspend_action+0x8>)
  404e84:	4798      	blx	r3
  404e86:	bd08      	pop	{r3, pc}
  404e88:	004018c9 	.word	0x004018c9

00404e8c <main_resume_action>:
}

void main_resume_action(void)
{
  404e8c:	b508      	push	{r3, lr}
	ui_wakeup();
  404e8e:	4b01      	ldr	r3, [pc, #4]	; (404e94 <main_resume_action+0x8>)
  404e90:	4798      	blx	r3
  404e92:	bd08      	pop	{r3, pc}
  404e94:	004018d9 	.word	0x004018d9

00404e98 <main_sof_action>:
}

void main_sof_action(void)
{
  404e98:	b508      	push	{r3, lr}
	if (!main_block_msc_enable)
  404e9a:	4b04      	ldr	r3, [pc, #16]	; (404eac <main_sof_action+0x14>)
  404e9c:	781b      	ldrb	r3, [r3, #0]
  404e9e:	b903      	cbnz	r3, 404ea2 <main_sof_action+0xa>
  404ea0:	bd08      	pop	{r3, pc}
		return;
	ui_process(udd_get_frame_number());
  404ea2:	4b03      	ldr	r3, [pc, #12]	; (404eb0 <main_sof_action+0x18>)
  404ea4:	4798      	blx	r3
  404ea6:	4b03      	ldr	r3, [pc, #12]	; (404eb4 <main_sof_action+0x1c>)
  404ea8:	4798      	blx	r3
  404eaa:	e7f9      	b.n	404ea0 <main_sof_action+0x8>
  404eac:	20400c11 	.word	0x20400c11
  404eb0:	00404081 	.word	0x00404081
  404eb4:	004018f1 	.word	0x004018f1

00404eb8 <main_msc_enable>:
}

bool main_msc_enable(void)
{
	main_block_msc_enable = true;
  404eb8:	2001      	movs	r0, #1
  404eba:	4b01      	ldr	r3, [pc, #4]	; (404ec0 <main_msc_enable+0x8>)
  404ebc:	7018      	strb	r0, [r3, #0]
	return true;
}
  404ebe:	4770      	bx	lr
  404ec0:	20400c11 	.word	0x20400c11

00404ec4 <main_msc_disable>:

void main_msc_disable(void)
{
	main_block_msc_enable = false;
  404ec4:	2200      	movs	r2, #0
  404ec6:	4b01      	ldr	r3, [pc, #4]	; (404ecc <main_msc_disable+0x8>)
  404ec8:	701a      	strb	r2, [r3, #0]
  404eca:	4770      	bx	lr
  404ecc:	20400c11 	.word	0x20400c11

00404ed0 <sd_card_initialization>:
	   No additional actions to do */
}
#endif

void sd_card_initialization(void)
{
  404ed0:	b508      	push	{r3, lr}
// 	//printf("nand_init.......\r\n");
// #endif
*/

#if defined CONF_BOARD_SD_MMC_HSMCI || defined CONF_BOARD_SD_MMC_SPI
	sd_mmc_init();
  404ed2:	4b01      	ldr	r3, [pc, #4]	; (404ed8 <sd_card_initialization+0x8>)
  404ed4:	4798      	blx	r3
  404ed6:	bd08      	pop	{r3, pc}
  404ed8:	0040027d 	.word	0x0040027d

00404edc <__libc_init_array>:
  404edc:	b570      	push	{r4, r5, r6, lr}
  404ede:	4e0f      	ldr	r6, [pc, #60]	; (404f1c <__libc_init_array+0x40>)
  404ee0:	4d0f      	ldr	r5, [pc, #60]	; (404f20 <__libc_init_array+0x44>)
  404ee2:	1b76      	subs	r6, r6, r5
  404ee4:	10b6      	asrs	r6, r6, #2
  404ee6:	bf18      	it	ne
  404ee8:	2400      	movne	r4, #0
  404eea:	d005      	beq.n	404ef8 <__libc_init_array+0x1c>
  404eec:	3401      	adds	r4, #1
  404eee:	f855 3b04 	ldr.w	r3, [r5], #4
  404ef2:	4798      	blx	r3
  404ef4:	42a6      	cmp	r6, r4
  404ef6:	d1f9      	bne.n	404eec <__libc_init_array+0x10>
  404ef8:	4e0a      	ldr	r6, [pc, #40]	; (404f24 <__libc_init_array+0x48>)
  404efa:	4d0b      	ldr	r5, [pc, #44]	; (404f28 <__libc_init_array+0x4c>)
  404efc:	1b76      	subs	r6, r6, r5
  404efe:	f003 fa5b 	bl	4083b8 <_init>
  404f02:	10b6      	asrs	r6, r6, #2
  404f04:	bf18      	it	ne
  404f06:	2400      	movne	r4, #0
  404f08:	d006      	beq.n	404f18 <__libc_init_array+0x3c>
  404f0a:	3401      	adds	r4, #1
  404f0c:	f855 3b04 	ldr.w	r3, [r5], #4
  404f10:	4798      	blx	r3
  404f12:	42a6      	cmp	r6, r4
  404f14:	d1f9      	bne.n	404f0a <__libc_init_array+0x2e>
  404f16:	bd70      	pop	{r4, r5, r6, pc}
  404f18:	bd70      	pop	{r4, r5, r6, pc}
  404f1a:	bf00      	nop
  404f1c:	004083c4 	.word	0x004083c4
  404f20:	004083c4 	.word	0x004083c4
  404f24:	004083cc 	.word	0x004083cc
  404f28:	004083c4 	.word	0x004083c4

00404f2c <iprintf>:
  404f2c:	b40f      	push	{r0, r1, r2, r3}
  404f2e:	b500      	push	{lr}
  404f30:	4907      	ldr	r1, [pc, #28]	; (404f50 <iprintf+0x24>)
  404f32:	b083      	sub	sp, #12
  404f34:	ab04      	add	r3, sp, #16
  404f36:	6808      	ldr	r0, [r1, #0]
  404f38:	f853 2b04 	ldr.w	r2, [r3], #4
  404f3c:	6881      	ldr	r1, [r0, #8]
  404f3e:	9301      	str	r3, [sp, #4]
  404f40:	f000 f966 	bl	405210 <_vfiprintf_r>
  404f44:	b003      	add	sp, #12
  404f46:	f85d eb04 	ldr.w	lr, [sp], #4
  404f4a:	b004      	add	sp, #16
  404f4c:	4770      	bx	lr
  404f4e:	bf00      	nop
  404f50:	204000d0 	.word	0x204000d0

00404f54 <memset>:
  404f54:	b470      	push	{r4, r5, r6}
  404f56:	0786      	lsls	r6, r0, #30
  404f58:	d046      	beq.n	404fe8 <memset+0x94>
  404f5a:	1e54      	subs	r4, r2, #1
  404f5c:	2a00      	cmp	r2, #0
  404f5e:	d041      	beq.n	404fe4 <memset+0x90>
  404f60:	b2ca      	uxtb	r2, r1
  404f62:	4603      	mov	r3, r0
  404f64:	e002      	b.n	404f6c <memset+0x18>
  404f66:	f114 34ff 	adds.w	r4, r4, #4294967295
  404f6a:	d33b      	bcc.n	404fe4 <memset+0x90>
  404f6c:	f803 2b01 	strb.w	r2, [r3], #1
  404f70:	079d      	lsls	r5, r3, #30
  404f72:	d1f8      	bne.n	404f66 <memset+0x12>
  404f74:	2c03      	cmp	r4, #3
  404f76:	d92e      	bls.n	404fd6 <memset+0x82>
  404f78:	b2cd      	uxtb	r5, r1
  404f7a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404f7e:	2c0f      	cmp	r4, #15
  404f80:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404f84:	d919      	bls.n	404fba <memset+0x66>
  404f86:	f103 0210 	add.w	r2, r3, #16
  404f8a:	4626      	mov	r6, r4
  404f8c:	3e10      	subs	r6, #16
  404f8e:	2e0f      	cmp	r6, #15
  404f90:	f842 5c10 	str.w	r5, [r2, #-16]
  404f94:	f842 5c0c 	str.w	r5, [r2, #-12]
  404f98:	f842 5c08 	str.w	r5, [r2, #-8]
  404f9c:	f842 5c04 	str.w	r5, [r2, #-4]
  404fa0:	f102 0210 	add.w	r2, r2, #16
  404fa4:	d8f2      	bhi.n	404f8c <memset+0x38>
  404fa6:	f1a4 0210 	sub.w	r2, r4, #16
  404faa:	f022 020f 	bic.w	r2, r2, #15
  404fae:	f004 040f 	and.w	r4, r4, #15
  404fb2:	3210      	adds	r2, #16
  404fb4:	2c03      	cmp	r4, #3
  404fb6:	4413      	add	r3, r2
  404fb8:	d90d      	bls.n	404fd6 <memset+0x82>
  404fba:	461e      	mov	r6, r3
  404fbc:	4622      	mov	r2, r4
  404fbe:	3a04      	subs	r2, #4
  404fc0:	2a03      	cmp	r2, #3
  404fc2:	f846 5b04 	str.w	r5, [r6], #4
  404fc6:	d8fa      	bhi.n	404fbe <memset+0x6a>
  404fc8:	1f22      	subs	r2, r4, #4
  404fca:	f022 0203 	bic.w	r2, r2, #3
  404fce:	3204      	adds	r2, #4
  404fd0:	4413      	add	r3, r2
  404fd2:	f004 0403 	and.w	r4, r4, #3
  404fd6:	b12c      	cbz	r4, 404fe4 <memset+0x90>
  404fd8:	b2c9      	uxtb	r1, r1
  404fda:	441c      	add	r4, r3
  404fdc:	f803 1b01 	strb.w	r1, [r3], #1
  404fe0:	429c      	cmp	r4, r3
  404fe2:	d1fb      	bne.n	404fdc <memset+0x88>
  404fe4:	bc70      	pop	{r4, r5, r6}
  404fe6:	4770      	bx	lr
  404fe8:	4614      	mov	r4, r2
  404fea:	4603      	mov	r3, r0
  404fec:	e7c2      	b.n	404f74 <memset+0x20>
  404fee:	bf00      	nop

00404ff0 <setbuf>:
  404ff0:	2900      	cmp	r1, #0
  404ff2:	bf0c      	ite	eq
  404ff4:	2202      	moveq	r2, #2
  404ff6:	2200      	movne	r2, #0
  404ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404ffc:	f000 b800 	b.w	405000 <setvbuf>

00405000 <setvbuf>:
  405000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405004:	4c61      	ldr	r4, [pc, #388]	; (40518c <setvbuf+0x18c>)
  405006:	6825      	ldr	r5, [r4, #0]
  405008:	b083      	sub	sp, #12
  40500a:	4604      	mov	r4, r0
  40500c:	460f      	mov	r7, r1
  40500e:	4690      	mov	r8, r2
  405010:	461e      	mov	r6, r3
  405012:	b115      	cbz	r5, 40501a <setvbuf+0x1a>
  405014:	6bab      	ldr	r3, [r5, #56]	; 0x38
  405016:	2b00      	cmp	r3, #0
  405018:	d064      	beq.n	4050e4 <setvbuf+0xe4>
  40501a:	f1b8 0f02 	cmp.w	r8, #2
  40501e:	d006      	beq.n	40502e <setvbuf+0x2e>
  405020:	f1b8 0f01 	cmp.w	r8, #1
  405024:	f200 809f 	bhi.w	405166 <setvbuf+0x166>
  405028:	2e00      	cmp	r6, #0
  40502a:	f2c0 809c 	blt.w	405166 <setvbuf+0x166>
  40502e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405030:	07d8      	lsls	r0, r3, #31
  405032:	d534      	bpl.n	40509e <setvbuf+0x9e>
  405034:	4621      	mov	r1, r4
  405036:	4628      	mov	r0, r5
  405038:	f001 f888 	bl	40614c <_fflush_r>
  40503c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40503e:	b141      	cbz	r1, 405052 <setvbuf+0x52>
  405040:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405044:	4299      	cmp	r1, r3
  405046:	d002      	beq.n	40504e <setvbuf+0x4e>
  405048:	4628      	mov	r0, r5
  40504a:	f001 f9fd 	bl	406448 <_free_r>
  40504e:	2300      	movs	r3, #0
  405050:	6323      	str	r3, [r4, #48]	; 0x30
  405052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405056:	2200      	movs	r2, #0
  405058:	61a2      	str	r2, [r4, #24]
  40505a:	6062      	str	r2, [r4, #4]
  40505c:	061a      	lsls	r2, r3, #24
  40505e:	d43a      	bmi.n	4050d6 <setvbuf+0xd6>
  405060:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  405064:	f023 0303 	bic.w	r3, r3, #3
  405068:	f1b8 0f02 	cmp.w	r8, #2
  40506c:	81a3      	strh	r3, [r4, #12]
  40506e:	d01d      	beq.n	4050ac <setvbuf+0xac>
  405070:	ab01      	add	r3, sp, #4
  405072:	466a      	mov	r2, sp
  405074:	4621      	mov	r1, r4
  405076:	4628      	mov	r0, r5
  405078:	f001 fc84 	bl	406984 <__swhatbuf_r>
  40507c:	89a3      	ldrh	r3, [r4, #12]
  40507e:	4318      	orrs	r0, r3
  405080:	81a0      	strh	r0, [r4, #12]
  405082:	2e00      	cmp	r6, #0
  405084:	d132      	bne.n	4050ec <setvbuf+0xec>
  405086:	9e00      	ldr	r6, [sp, #0]
  405088:	4630      	mov	r0, r6
  40508a:	f001 fcf3 	bl	406a74 <malloc>
  40508e:	4607      	mov	r7, r0
  405090:	2800      	cmp	r0, #0
  405092:	d06b      	beq.n	40516c <setvbuf+0x16c>
  405094:	89a3      	ldrh	r3, [r4, #12]
  405096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40509a:	81a3      	strh	r3, [r4, #12]
  40509c:	e028      	b.n	4050f0 <setvbuf+0xf0>
  40509e:	89a3      	ldrh	r3, [r4, #12]
  4050a0:	0599      	lsls	r1, r3, #22
  4050a2:	d4c7      	bmi.n	405034 <setvbuf+0x34>
  4050a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4050a6:	f001 fc69 	bl	40697c <__retarget_lock_acquire_recursive>
  4050aa:	e7c3      	b.n	405034 <setvbuf+0x34>
  4050ac:	2500      	movs	r5, #0
  4050ae:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4050b0:	2600      	movs	r6, #0
  4050b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4050b6:	f043 0302 	orr.w	r3, r3, #2
  4050ba:	2001      	movs	r0, #1
  4050bc:	60a6      	str	r6, [r4, #8]
  4050be:	07ce      	lsls	r6, r1, #31
  4050c0:	81a3      	strh	r3, [r4, #12]
  4050c2:	6022      	str	r2, [r4, #0]
  4050c4:	6122      	str	r2, [r4, #16]
  4050c6:	6160      	str	r0, [r4, #20]
  4050c8:	d401      	bmi.n	4050ce <setvbuf+0xce>
  4050ca:	0598      	lsls	r0, r3, #22
  4050cc:	d53e      	bpl.n	40514c <setvbuf+0x14c>
  4050ce:	4628      	mov	r0, r5
  4050d0:	b003      	add	sp, #12
  4050d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4050d6:	6921      	ldr	r1, [r4, #16]
  4050d8:	4628      	mov	r0, r5
  4050da:	f001 f9b5 	bl	406448 <_free_r>
  4050de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4050e2:	e7bd      	b.n	405060 <setvbuf+0x60>
  4050e4:	4628      	mov	r0, r5
  4050e6:	f001 f889 	bl	4061fc <__sinit>
  4050ea:	e796      	b.n	40501a <setvbuf+0x1a>
  4050ec:	2f00      	cmp	r7, #0
  4050ee:	d0cb      	beq.n	405088 <setvbuf+0x88>
  4050f0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4050f2:	2b00      	cmp	r3, #0
  4050f4:	d033      	beq.n	40515e <setvbuf+0x15e>
  4050f6:	9b00      	ldr	r3, [sp, #0]
  4050f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4050fc:	6027      	str	r7, [r4, #0]
  4050fe:	429e      	cmp	r6, r3
  405100:	bf1c      	itt	ne
  405102:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  405106:	81a2      	strhne	r2, [r4, #12]
  405108:	f1b8 0f01 	cmp.w	r8, #1
  40510c:	bf04      	itt	eq
  40510e:	f042 0201 	orreq.w	r2, r2, #1
  405112:	81a2      	strheq	r2, [r4, #12]
  405114:	b292      	uxth	r2, r2
  405116:	f012 0308 	ands.w	r3, r2, #8
  40511a:	6127      	str	r7, [r4, #16]
  40511c:	6166      	str	r6, [r4, #20]
  40511e:	d00e      	beq.n	40513e <setvbuf+0x13e>
  405120:	07d1      	lsls	r1, r2, #31
  405122:	d51a      	bpl.n	40515a <setvbuf+0x15a>
  405124:	6e65      	ldr	r5, [r4, #100]	; 0x64
  405126:	4276      	negs	r6, r6
  405128:	2300      	movs	r3, #0
  40512a:	f015 0501 	ands.w	r5, r5, #1
  40512e:	61a6      	str	r6, [r4, #24]
  405130:	60a3      	str	r3, [r4, #8]
  405132:	d009      	beq.n	405148 <setvbuf+0x148>
  405134:	2500      	movs	r5, #0
  405136:	4628      	mov	r0, r5
  405138:	b003      	add	sp, #12
  40513a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40513e:	60a3      	str	r3, [r4, #8]
  405140:	6e65      	ldr	r5, [r4, #100]	; 0x64
  405142:	f015 0501 	ands.w	r5, r5, #1
  405146:	d1f5      	bne.n	405134 <setvbuf+0x134>
  405148:	0593      	lsls	r3, r2, #22
  40514a:	d4c0      	bmi.n	4050ce <setvbuf+0xce>
  40514c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40514e:	f001 fc17 	bl	406980 <__retarget_lock_release_recursive>
  405152:	4628      	mov	r0, r5
  405154:	b003      	add	sp, #12
  405156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40515a:	60a6      	str	r6, [r4, #8]
  40515c:	e7f0      	b.n	405140 <setvbuf+0x140>
  40515e:	4628      	mov	r0, r5
  405160:	f001 f84c 	bl	4061fc <__sinit>
  405164:	e7c7      	b.n	4050f6 <setvbuf+0xf6>
  405166:	f04f 35ff 	mov.w	r5, #4294967295
  40516a:	e7b0      	b.n	4050ce <setvbuf+0xce>
  40516c:	f8dd 9000 	ldr.w	r9, [sp]
  405170:	45b1      	cmp	r9, r6
  405172:	d004      	beq.n	40517e <setvbuf+0x17e>
  405174:	4648      	mov	r0, r9
  405176:	f001 fc7d 	bl	406a74 <malloc>
  40517a:	4607      	mov	r7, r0
  40517c:	b920      	cbnz	r0, 405188 <setvbuf+0x188>
  40517e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405182:	f04f 35ff 	mov.w	r5, #4294967295
  405186:	e792      	b.n	4050ae <setvbuf+0xae>
  405188:	464e      	mov	r6, r9
  40518a:	e783      	b.n	405094 <setvbuf+0x94>
  40518c:	204000d0 	.word	0x204000d0

00405190 <__sprint_r.part.0>:
  405190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405194:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  405196:	049c      	lsls	r4, r3, #18
  405198:	4693      	mov	fp, r2
  40519a:	d52f      	bpl.n	4051fc <__sprint_r.part.0+0x6c>
  40519c:	6893      	ldr	r3, [r2, #8]
  40519e:	6812      	ldr	r2, [r2, #0]
  4051a0:	b353      	cbz	r3, 4051f8 <__sprint_r.part.0+0x68>
  4051a2:	460e      	mov	r6, r1
  4051a4:	4607      	mov	r7, r0
  4051a6:	f102 0908 	add.w	r9, r2, #8
  4051aa:	e919 0420 	ldmdb	r9, {r5, sl}
  4051ae:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4051b2:	d017      	beq.n	4051e4 <__sprint_r.part.0+0x54>
  4051b4:	3d04      	subs	r5, #4
  4051b6:	2400      	movs	r4, #0
  4051b8:	e001      	b.n	4051be <__sprint_r.part.0+0x2e>
  4051ba:	45a0      	cmp	r8, r4
  4051bc:	d010      	beq.n	4051e0 <__sprint_r.part.0+0x50>
  4051be:	4632      	mov	r2, r6
  4051c0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4051c4:	4638      	mov	r0, r7
  4051c6:	f001 f8bb 	bl	406340 <_fputwc_r>
  4051ca:	1c43      	adds	r3, r0, #1
  4051cc:	f104 0401 	add.w	r4, r4, #1
  4051d0:	d1f3      	bne.n	4051ba <__sprint_r.part.0+0x2a>
  4051d2:	2300      	movs	r3, #0
  4051d4:	f8cb 3008 	str.w	r3, [fp, #8]
  4051d8:	f8cb 3004 	str.w	r3, [fp, #4]
  4051dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051e0:	f8db 3008 	ldr.w	r3, [fp, #8]
  4051e4:	f02a 0a03 	bic.w	sl, sl, #3
  4051e8:	eba3 030a 	sub.w	r3, r3, sl
  4051ec:	f8cb 3008 	str.w	r3, [fp, #8]
  4051f0:	f109 0908 	add.w	r9, r9, #8
  4051f4:	2b00      	cmp	r3, #0
  4051f6:	d1d8      	bne.n	4051aa <__sprint_r.part.0+0x1a>
  4051f8:	2000      	movs	r0, #0
  4051fa:	e7ea      	b.n	4051d2 <__sprint_r.part.0+0x42>
  4051fc:	f001 fa0a 	bl	406614 <__sfvwrite_r>
  405200:	2300      	movs	r3, #0
  405202:	f8cb 3008 	str.w	r3, [fp, #8]
  405206:	f8cb 3004 	str.w	r3, [fp, #4]
  40520a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40520e:	bf00      	nop

00405210 <_vfiprintf_r>:
  405210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405214:	b0ad      	sub	sp, #180	; 0xb4
  405216:	461d      	mov	r5, r3
  405218:	468b      	mov	fp, r1
  40521a:	4690      	mov	r8, r2
  40521c:	9307      	str	r3, [sp, #28]
  40521e:	9006      	str	r0, [sp, #24]
  405220:	b118      	cbz	r0, 40522a <_vfiprintf_r+0x1a>
  405222:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405224:	2b00      	cmp	r3, #0
  405226:	f000 80f3 	beq.w	405410 <_vfiprintf_r+0x200>
  40522a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40522e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405232:	07df      	lsls	r7, r3, #31
  405234:	b281      	uxth	r1, r0
  405236:	d402      	bmi.n	40523e <_vfiprintf_r+0x2e>
  405238:	058e      	lsls	r6, r1, #22
  40523a:	f140 80fc 	bpl.w	405436 <_vfiprintf_r+0x226>
  40523e:	048c      	lsls	r4, r1, #18
  405240:	d40a      	bmi.n	405258 <_vfiprintf_r+0x48>
  405242:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405246:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40524a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40524e:	f8ab 100c 	strh.w	r1, [fp, #12]
  405252:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  405256:	b289      	uxth	r1, r1
  405258:	0708      	lsls	r0, r1, #28
  40525a:	f140 80b3 	bpl.w	4053c4 <_vfiprintf_r+0x1b4>
  40525e:	f8db 3010 	ldr.w	r3, [fp, #16]
  405262:	2b00      	cmp	r3, #0
  405264:	f000 80ae 	beq.w	4053c4 <_vfiprintf_r+0x1b4>
  405268:	f001 031a 	and.w	r3, r1, #26
  40526c:	2b0a      	cmp	r3, #10
  40526e:	f000 80b5 	beq.w	4053dc <_vfiprintf_r+0x1cc>
  405272:	2300      	movs	r3, #0
  405274:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  405278:	930b      	str	r3, [sp, #44]	; 0x2c
  40527a:	9311      	str	r3, [sp, #68]	; 0x44
  40527c:	9310      	str	r3, [sp, #64]	; 0x40
  40527e:	9303      	str	r3, [sp, #12]
  405280:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  405284:	46ca      	mov	sl, r9
  405286:	f8cd b010 	str.w	fp, [sp, #16]
  40528a:	f898 3000 	ldrb.w	r3, [r8]
  40528e:	4644      	mov	r4, r8
  405290:	b1fb      	cbz	r3, 4052d2 <_vfiprintf_r+0xc2>
  405292:	2b25      	cmp	r3, #37	; 0x25
  405294:	d102      	bne.n	40529c <_vfiprintf_r+0x8c>
  405296:	e01c      	b.n	4052d2 <_vfiprintf_r+0xc2>
  405298:	2b25      	cmp	r3, #37	; 0x25
  40529a:	d003      	beq.n	4052a4 <_vfiprintf_r+0x94>
  40529c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4052a0:	2b00      	cmp	r3, #0
  4052a2:	d1f9      	bne.n	405298 <_vfiprintf_r+0x88>
  4052a4:	eba4 0508 	sub.w	r5, r4, r8
  4052a8:	b19d      	cbz	r5, 4052d2 <_vfiprintf_r+0xc2>
  4052aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4052ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4052ae:	f8ca 8000 	str.w	r8, [sl]
  4052b2:	3301      	adds	r3, #1
  4052b4:	442a      	add	r2, r5
  4052b6:	2b07      	cmp	r3, #7
  4052b8:	f8ca 5004 	str.w	r5, [sl, #4]
  4052bc:	9211      	str	r2, [sp, #68]	; 0x44
  4052be:	9310      	str	r3, [sp, #64]	; 0x40
  4052c0:	dd7a      	ble.n	4053b8 <_vfiprintf_r+0x1a8>
  4052c2:	2a00      	cmp	r2, #0
  4052c4:	f040 84b0 	bne.w	405c28 <_vfiprintf_r+0xa18>
  4052c8:	9b03      	ldr	r3, [sp, #12]
  4052ca:	9210      	str	r2, [sp, #64]	; 0x40
  4052cc:	442b      	add	r3, r5
  4052ce:	46ca      	mov	sl, r9
  4052d0:	9303      	str	r3, [sp, #12]
  4052d2:	7823      	ldrb	r3, [r4, #0]
  4052d4:	2b00      	cmp	r3, #0
  4052d6:	f000 83e0 	beq.w	405a9a <_vfiprintf_r+0x88a>
  4052da:	2000      	movs	r0, #0
  4052dc:	f04f 0300 	mov.w	r3, #0
  4052e0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4052e4:	f104 0801 	add.w	r8, r4, #1
  4052e8:	7862      	ldrb	r2, [r4, #1]
  4052ea:	4605      	mov	r5, r0
  4052ec:	4606      	mov	r6, r0
  4052ee:	4603      	mov	r3, r0
  4052f0:	f04f 34ff 	mov.w	r4, #4294967295
  4052f4:	f108 0801 	add.w	r8, r8, #1
  4052f8:	f1a2 0120 	sub.w	r1, r2, #32
  4052fc:	2958      	cmp	r1, #88	; 0x58
  4052fe:	f200 82de 	bhi.w	4058be <_vfiprintf_r+0x6ae>
  405302:	e8df f011 	tbh	[pc, r1, lsl #1]
  405306:	0221      	.short	0x0221
  405308:	02dc02dc 	.word	0x02dc02dc
  40530c:	02dc0229 	.word	0x02dc0229
  405310:	02dc02dc 	.word	0x02dc02dc
  405314:	02dc02dc 	.word	0x02dc02dc
  405318:	028902dc 	.word	0x028902dc
  40531c:	02dc0295 	.word	0x02dc0295
  405320:	02bd00a2 	.word	0x02bd00a2
  405324:	019f02dc 	.word	0x019f02dc
  405328:	01a401a4 	.word	0x01a401a4
  40532c:	01a401a4 	.word	0x01a401a4
  405330:	01a401a4 	.word	0x01a401a4
  405334:	01a401a4 	.word	0x01a401a4
  405338:	02dc01a4 	.word	0x02dc01a4
  40533c:	02dc02dc 	.word	0x02dc02dc
  405340:	02dc02dc 	.word	0x02dc02dc
  405344:	02dc02dc 	.word	0x02dc02dc
  405348:	02dc02dc 	.word	0x02dc02dc
  40534c:	01b202dc 	.word	0x01b202dc
  405350:	02dc02dc 	.word	0x02dc02dc
  405354:	02dc02dc 	.word	0x02dc02dc
  405358:	02dc02dc 	.word	0x02dc02dc
  40535c:	02dc02dc 	.word	0x02dc02dc
  405360:	02dc02dc 	.word	0x02dc02dc
  405364:	02dc0197 	.word	0x02dc0197
  405368:	02dc02dc 	.word	0x02dc02dc
  40536c:	02dc02dc 	.word	0x02dc02dc
  405370:	02dc019b 	.word	0x02dc019b
  405374:	025302dc 	.word	0x025302dc
  405378:	02dc02dc 	.word	0x02dc02dc
  40537c:	02dc02dc 	.word	0x02dc02dc
  405380:	02dc02dc 	.word	0x02dc02dc
  405384:	02dc02dc 	.word	0x02dc02dc
  405388:	02dc02dc 	.word	0x02dc02dc
  40538c:	021b025a 	.word	0x021b025a
  405390:	02dc02dc 	.word	0x02dc02dc
  405394:	026e02dc 	.word	0x026e02dc
  405398:	02dc021b 	.word	0x02dc021b
  40539c:	027302dc 	.word	0x027302dc
  4053a0:	01f502dc 	.word	0x01f502dc
  4053a4:	02090182 	.word	0x02090182
  4053a8:	02dc02d7 	.word	0x02dc02d7
  4053ac:	02dc029a 	.word	0x02dc029a
  4053b0:	02dc00a7 	.word	0x02dc00a7
  4053b4:	022e02dc 	.word	0x022e02dc
  4053b8:	f10a 0a08 	add.w	sl, sl, #8
  4053bc:	9b03      	ldr	r3, [sp, #12]
  4053be:	442b      	add	r3, r5
  4053c0:	9303      	str	r3, [sp, #12]
  4053c2:	e786      	b.n	4052d2 <_vfiprintf_r+0xc2>
  4053c4:	4659      	mov	r1, fp
  4053c6:	9806      	ldr	r0, [sp, #24]
  4053c8:	f000 fdac 	bl	405f24 <__swsetup_r>
  4053cc:	bb18      	cbnz	r0, 405416 <_vfiprintf_r+0x206>
  4053ce:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4053d2:	f001 031a 	and.w	r3, r1, #26
  4053d6:	2b0a      	cmp	r3, #10
  4053d8:	f47f af4b 	bne.w	405272 <_vfiprintf_r+0x62>
  4053dc:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4053e0:	2b00      	cmp	r3, #0
  4053e2:	f6ff af46 	blt.w	405272 <_vfiprintf_r+0x62>
  4053e6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4053ea:	07db      	lsls	r3, r3, #31
  4053ec:	d405      	bmi.n	4053fa <_vfiprintf_r+0x1ea>
  4053ee:	058f      	lsls	r7, r1, #22
  4053f0:	d403      	bmi.n	4053fa <_vfiprintf_r+0x1ea>
  4053f2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4053f6:	f001 fac3 	bl	406980 <__retarget_lock_release_recursive>
  4053fa:	462b      	mov	r3, r5
  4053fc:	4642      	mov	r2, r8
  4053fe:	4659      	mov	r1, fp
  405400:	9806      	ldr	r0, [sp, #24]
  405402:	f000 fd4d 	bl	405ea0 <__sbprintf>
  405406:	9003      	str	r0, [sp, #12]
  405408:	9803      	ldr	r0, [sp, #12]
  40540a:	b02d      	add	sp, #180	; 0xb4
  40540c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405410:	f000 fef4 	bl	4061fc <__sinit>
  405414:	e709      	b.n	40522a <_vfiprintf_r+0x1a>
  405416:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40541a:	07d9      	lsls	r1, r3, #31
  40541c:	d404      	bmi.n	405428 <_vfiprintf_r+0x218>
  40541e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405422:	059a      	lsls	r2, r3, #22
  405424:	f140 84aa 	bpl.w	405d7c <_vfiprintf_r+0xb6c>
  405428:	f04f 33ff 	mov.w	r3, #4294967295
  40542c:	9303      	str	r3, [sp, #12]
  40542e:	9803      	ldr	r0, [sp, #12]
  405430:	b02d      	add	sp, #180	; 0xb4
  405432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405436:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40543a:	f001 fa9f 	bl	40697c <__retarget_lock_acquire_recursive>
  40543e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405442:	b281      	uxth	r1, r0
  405444:	e6fb      	b.n	40523e <_vfiprintf_r+0x2e>
  405446:	4276      	negs	r6, r6
  405448:	9207      	str	r2, [sp, #28]
  40544a:	f043 0304 	orr.w	r3, r3, #4
  40544e:	f898 2000 	ldrb.w	r2, [r8]
  405452:	e74f      	b.n	4052f4 <_vfiprintf_r+0xe4>
  405454:	9608      	str	r6, [sp, #32]
  405456:	069e      	lsls	r6, r3, #26
  405458:	f100 8450 	bmi.w	405cfc <_vfiprintf_r+0xaec>
  40545c:	9907      	ldr	r1, [sp, #28]
  40545e:	06dd      	lsls	r5, r3, #27
  405460:	460a      	mov	r2, r1
  405462:	f100 83ef 	bmi.w	405c44 <_vfiprintf_r+0xa34>
  405466:	0658      	lsls	r0, r3, #25
  405468:	f140 83ec 	bpl.w	405c44 <_vfiprintf_r+0xa34>
  40546c:	880e      	ldrh	r6, [r1, #0]
  40546e:	3104      	adds	r1, #4
  405470:	2700      	movs	r7, #0
  405472:	2201      	movs	r2, #1
  405474:	9107      	str	r1, [sp, #28]
  405476:	f04f 0100 	mov.w	r1, #0
  40547a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40547e:	2500      	movs	r5, #0
  405480:	1c61      	adds	r1, r4, #1
  405482:	f000 8116 	beq.w	4056b2 <_vfiprintf_r+0x4a2>
  405486:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40548a:	9102      	str	r1, [sp, #8]
  40548c:	ea56 0107 	orrs.w	r1, r6, r7
  405490:	f040 8114 	bne.w	4056bc <_vfiprintf_r+0x4ac>
  405494:	2c00      	cmp	r4, #0
  405496:	f040 835c 	bne.w	405b52 <_vfiprintf_r+0x942>
  40549a:	2a00      	cmp	r2, #0
  40549c:	f040 83b7 	bne.w	405c0e <_vfiprintf_r+0x9fe>
  4054a0:	f013 0301 	ands.w	r3, r3, #1
  4054a4:	9305      	str	r3, [sp, #20]
  4054a6:	f000 8457 	beq.w	405d58 <_vfiprintf_r+0xb48>
  4054aa:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4054ae:	2330      	movs	r3, #48	; 0x30
  4054b0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4054b4:	9b05      	ldr	r3, [sp, #20]
  4054b6:	42a3      	cmp	r3, r4
  4054b8:	bfb8      	it	lt
  4054ba:	4623      	movlt	r3, r4
  4054bc:	9301      	str	r3, [sp, #4]
  4054be:	b10d      	cbz	r5, 4054c4 <_vfiprintf_r+0x2b4>
  4054c0:	3301      	adds	r3, #1
  4054c2:	9301      	str	r3, [sp, #4]
  4054c4:	9b02      	ldr	r3, [sp, #8]
  4054c6:	f013 0302 	ands.w	r3, r3, #2
  4054ca:	9309      	str	r3, [sp, #36]	; 0x24
  4054cc:	d002      	beq.n	4054d4 <_vfiprintf_r+0x2c4>
  4054ce:	9b01      	ldr	r3, [sp, #4]
  4054d0:	3302      	adds	r3, #2
  4054d2:	9301      	str	r3, [sp, #4]
  4054d4:	9b02      	ldr	r3, [sp, #8]
  4054d6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4054da:	930a      	str	r3, [sp, #40]	; 0x28
  4054dc:	f040 8217 	bne.w	40590e <_vfiprintf_r+0x6fe>
  4054e0:	9b08      	ldr	r3, [sp, #32]
  4054e2:	9a01      	ldr	r2, [sp, #4]
  4054e4:	1a9d      	subs	r5, r3, r2
  4054e6:	2d00      	cmp	r5, #0
  4054e8:	f340 8211 	ble.w	40590e <_vfiprintf_r+0x6fe>
  4054ec:	2d10      	cmp	r5, #16
  4054ee:	f340 8490 	ble.w	405e12 <_vfiprintf_r+0xc02>
  4054f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4054f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4054f6:	4ec4      	ldr	r6, [pc, #784]	; (405808 <_vfiprintf_r+0x5f8>)
  4054f8:	46d6      	mov	lr, sl
  4054fa:	2710      	movs	r7, #16
  4054fc:	46a2      	mov	sl, r4
  4054fe:	4619      	mov	r1, r3
  405500:	9c06      	ldr	r4, [sp, #24]
  405502:	e007      	b.n	405514 <_vfiprintf_r+0x304>
  405504:	f101 0c02 	add.w	ip, r1, #2
  405508:	f10e 0e08 	add.w	lr, lr, #8
  40550c:	4601      	mov	r1, r0
  40550e:	3d10      	subs	r5, #16
  405510:	2d10      	cmp	r5, #16
  405512:	dd11      	ble.n	405538 <_vfiprintf_r+0x328>
  405514:	1c48      	adds	r0, r1, #1
  405516:	3210      	adds	r2, #16
  405518:	2807      	cmp	r0, #7
  40551a:	9211      	str	r2, [sp, #68]	; 0x44
  40551c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  405520:	9010      	str	r0, [sp, #64]	; 0x40
  405522:	ddef      	ble.n	405504 <_vfiprintf_r+0x2f4>
  405524:	2a00      	cmp	r2, #0
  405526:	f040 81e4 	bne.w	4058f2 <_vfiprintf_r+0x6e2>
  40552a:	3d10      	subs	r5, #16
  40552c:	2d10      	cmp	r5, #16
  40552e:	4611      	mov	r1, r2
  405530:	f04f 0c01 	mov.w	ip, #1
  405534:	46ce      	mov	lr, r9
  405536:	dced      	bgt.n	405514 <_vfiprintf_r+0x304>
  405538:	4654      	mov	r4, sl
  40553a:	4661      	mov	r1, ip
  40553c:	46f2      	mov	sl, lr
  40553e:	442a      	add	r2, r5
  405540:	2907      	cmp	r1, #7
  405542:	9211      	str	r2, [sp, #68]	; 0x44
  405544:	f8ca 6000 	str.w	r6, [sl]
  405548:	f8ca 5004 	str.w	r5, [sl, #4]
  40554c:	9110      	str	r1, [sp, #64]	; 0x40
  40554e:	f300 82ec 	bgt.w	405b2a <_vfiprintf_r+0x91a>
  405552:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405556:	f10a 0a08 	add.w	sl, sl, #8
  40555a:	1c48      	adds	r0, r1, #1
  40555c:	2d00      	cmp	r5, #0
  40555e:	f040 81de 	bne.w	40591e <_vfiprintf_r+0x70e>
  405562:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405564:	2b00      	cmp	r3, #0
  405566:	f000 81f8 	beq.w	40595a <_vfiprintf_r+0x74a>
  40556a:	3202      	adds	r2, #2
  40556c:	a90e      	add	r1, sp, #56	; 0x38
  40556e:	2302      	movs	r3, #2
  405570:	2807      	cmp	r0, #7
  405572:	9211      	str	r2, [sp, #68]	; 0x44
  405574:	9010      	str	r0, [sp, #64]	; 0x40
  405576:	e88a 000a 	stmia.w	sl, {r1, r3}
  40557a:	f340 81ea 	ble.w	405952 <_vfiprintf_r+0x742>
  40557e:	2a00      	cmp	r2, #0
  405580:	f040 838c 	bne.w	405c9c <_vfiprintf_r+0xa8c>
  405584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405586:	2b80      	cmp	r3, #128	; 0x80
  405588:	f04f 0001 	mov.w	r0, #1
  40558c:	4611      	mov	r1, r2
  40558e:	46ca      	mov	sl, r9
  405590:	f040 81e7 	bne.w	405962 <_vfiprintf_r+0x752>
  405594:	9b08      	ldr	r3, [sp, #32]
  405596:	9d01      	ldr	r5, [sp, #4]
  405598:	1b5e      	subs	r6, r3, r5
  40559a:	2e00      	cmp	r6, #0
  40559c:	f340 81e1 	ble.w	405962 <_vfiprintf_r+0x752>
  4055a0:	2e10      	cmp	r6, #16
  4055a2:	4d9a      	ldr	r5, [pc, #616]	; (40580c <_vfiprintf_r+0x5fc>)
  4055a4:	f340 8450 	ble.w	405e48 <_vfiprintf_r+0xc38>
  4055a8:	46d4      	mov	ip, sl
  4055aa:	2710      	movs	r7, #16
  4055ac:	46a2      	mov	sl, r4
  4055ae:	9c06      	ldr	r4, [sp, #24]
  4055b0:	e007      	b.n	4055c2 <_vfiprintf_r+0x3b2>
  4055b2:	f101 0e02 	add.w	lr, r1, #2
  4055b6:	f10c 0c08 	add.w	ip, ip, #8
  4055ba:	4601      	mov	r1, r0
  4055bc:	3e10      	subs	r6, #16
  4055be:	2e10      	cmp	r6, #16
  4055c0:	dd11      	ble.n	4055e6 <_vfiprintf_r+0x3d6>
  4055c2:	1c48      	adds	r0, r1, #1
  4055c4:	3210      	adds	r2, #16
  4055c6:	2807      	cmp	r0, #7
  4055c8:	9211      	str	r2, [sp, #68]	; 0x44
  4055ca:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4055ce:	9010      	str	r0, [sp, #64]	; 0x40
  4055d0:	ddef      	ble.n	4055b2 <_vfiprintf_r+0x3a2>
  4055d2:	2a00      	cmp	r2, #0
  4055d4:	f040 829d 	bne.w	405b12 <_vfiprintf_r+0x902>
  4055d8:	3e10      	subs	r6, #16
  4055da:	2e10      	cmp	r6, #16
  4055dc:	f04f 0e01 	mov.w	lr, #1
  4055e0:	4611      	mov	r1, r2
  4055e2:	46cc      	mov	ip, r9
  4055e4:	dced      	bgt.n	4055c2 <_vfiprintf_r+0x3b2>
  4055e6:	4654      	mov	r4, sl
  4055e8:	46e2      	mov	sl, ip
  4055ea:	4432      	add	r2, r6
  4055ec:	f1be 0f07 	cmp.w	lr, #7
  4055f0:	9211      	str	r2, [sp, #68]	; 0x44
  4055f2:	e88a 0060 	stmia.w	sl, {r5, r6}
  4055f6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4055fa:	f300 8369 	bgt.w	405cd0 <_vfiprintf_r+0xac0>
  4055fe:	f10a 0a08 	add.w	sl, sl, #8
  405602:	f10e 0001 	add.w	r0, lr, #1
  405606:	4671      	mov	r1, lr
  405608:	e1ab      	b.n	405962 <_vfiprintf_r+0x752>
  40560a:	9608      	str	r6, [sp, #32]
  40560c:	f013 0220 	ands.w	r2, r3, #32
  405610:	f040 838c 	bne.w	405d2c <_vfiprintf_r+0xb1c>
  405614:	f013 0110 	ands.w	r1, r3, #16
  405618:	f040 831a 	bne.w	405c50 <_vfiprintf_r+0xa40>
  40561c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  405620:	f000 8316 	beq.w	405c50 <_vfiprintf_r+0xa40>
  405624:	9807      	ldr	r0, [sp, #28]
  405626:	460a      	mov	r2, r1
  405628:	4601      	mov	r1, r0
  40562a:	3104      	adds	r1, #4
  40562c:	8806      	ldrh	r6, [r0, #0]
  40562e:	9107      	str	r1, [sp, #28]
  405630:	2700      	movs	r7, #0
  405632:	e720      	b.n	405476 <_vfiprintf_r+0x266>
  405634:	9608      	str	r6, [sp, #32]
  405636:	f043 0310 	orr.w	r3, r3, #16
  40563a:	e7e7      	b.n	40560c <_vfiprintf_r+0x3fc>
  40563c:	9608      	str	r6, [sp, #32]
  40563e:	f043 0310 	orr.w	r3, r3, #16
  405642:	e708      	b.n	405456 <_vfiprintf_r+0x246>
  405644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405648:	f898 2000 	ldrb.w	r2, [r8]
  40564c:	e652      	b.n	4052f4 <_vfiprintf_r+0xe4>
  40564e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405652:	2600      	movs	r6, #0
  405654:	f818 2b01 	ldrb.w	r2, [r8], #1
  405658:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40565c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  405660:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405664:	2909      	cmp	r1, #9
  405666:	d9f5      	bls.n	405654 <_vfiprintf_r+0x444>
  405668:	e646      	b.n	4052f8 <_vfiprintf_r+0xe8>
  40566a:	9608      	str	r6, [sp, #32]
  40566c:	2800      	cmp	r0, #0
  40566e:	f040 8408 	bne.w	405e82 <_vfiprintf_r+0xc72>
  405672:	f043 0310 	orr.w	r3, r3, #16
  405676:	069e      	lsls	r6, r3, #26
  405678:	f100 834c 	bmi.w	405d14 <_vfiprintf_r+0xb04>
  40567c:	06dd      	lsls	r5, r3, #27
  40567e:	f100 82f3 	bmi.w	405c68 <_vfiprintf_r+0xa58>
  405682:	0658      	lsls	r0, r3, #25
  405684:	f140 82f0 	bpl.w	405c68 <_vfiprintf_r+0xa58>
  405688:	9d07      	ldr	r5, [sp, #28]
  40568a:	f9b5 6000 	ldrsh.w	r6, [r5]
  40568e:	462a      	mov	r2, r5
  405690:	17f7      	asrs	r7, r6, #31
  405692:	3204      	adds	r2, #4
  405694:	4630      	mov	r0, r6
  405696:	4639      	mov	r1, r7
  405698:	9207      	str	r2, [sp, #28]
  40569a:	2800      	cmp	r0, #0
  40569c:	f171 0200 	sbcs.w	r2, r1, #0
  4056a0:	f2c0 835d 	blt.w	405d5e <_vfiprintf_r+0xb4e>
  4056a4:	1c61      	adds	r1, r4, #1
  4056a6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4056aa:	f04f 0201 	mov.w	r2, #1
  4056ae:	f47f aeea 	bne.w	405486 <_vfiprintf_r+0x276>
  4056b2:	ea56 0107 	orrs.w	r1, r6, r7
  4056b6:	f000 824d 	beq.w	405b54 <_vfiprintf_r+0x944>
  4056ba:	9302      	str	r3, [sp, #8]
  4056bc:	2a01      	cmp	r2, #1
  4056be:	f000 828c 	beq.w	405bda <_vfiprintf_r+0x9ca>
  4056c2:	2a02      	cmp	r2, #2
  4056c4:	f040 825c 	bne.w	405b80 <_vfiprintf_r+0x970>
  4056c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4056ca:	46cb      	mov	fp, r9
  4056cc:	0933      	lsrs	r3, r6, #4
  4056ce:	f006 010f 	and.w	r1, r6, #15
  4056d2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4056d6:	093a      	lsrs	r2, r7, #4
  4056d8:	461e      	mov	r6, r3
  4056da:	4617      	mov	r7, r2
  4056dc:	5c43      	ldrb	r3, [r0, r1]
  4056de:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4056e2:	ea56 0307 	orrs.w	r3, r6, r7
  4056e6:	d1f1      	bne.n	4056cc <_vfiprintf_r+0x4bc>
  4056e8:	eba9 030b 	sub.w	r3, r9, fp
  4056ec:	9305      	str	r3, [sp, #20]
  4056ee:	e6e1      	b.n	4054b4 <_vfiprintf_r+0x2a4>
  4056f0:	2800      	cmp	r0, #0
  4056f2:	f040 83c0 	bne.w	405e76 <_vfiprintf_r+0xc66>
  4056f6:	0699      	lsls	r1, r3, #26
  4056f8:	f100 8367 	bmi.w	405dca <_vfiprintf_r+0xbba>
  4056fc:	06da      	lsls	r2, r3, #27
  4056fe:	f100 80f1 	bmi.w	4058e4 <_vfiprintf_r+0x6d4>
  405702:	065b      	lsls	r3, r3, #25
  405704:	f140 80ee 	bpl.w	4058e4 <_vfiprintf_r+0x6d4>
  405708:	9a07      	ldr	r2, [sp, #28]
  40570a:	6813      	ldr	r3, [r2, #0]
  40570c:	3204      	adds	r2, #4
  40570e:	9207      	str	r2, [sp, #28]
  405710:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  405714:	801a      	strh	r2, [r3, #0]
  405716:	e5b8      	b.n	40528a <_vfiprintf_r+0x7a>
  405718:	9807      	ldr	r0, [sp, #28]
  40571a:	4a3d      	ldr	r2, [pc, #244]	; (405810 <_vfiprintf_r+0x600>)
  40571c:	9608      	str	r6, [sp, #32]
  40571e:	920b      	str	r2, [sp, #44]	; 0x2c
  405720:	6806      	ldr	r6, [r0, #0]
  405722:	2278      	movs	r2, #120	; 0x78
  405724:	2130      	movs	r1, #48	; 0x30
  405726:	3004      	adds	r0, #4
  405728:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40572c:	f043 0302 	orr.w	r3, r3, #2
  405730:	9007      	str	r0, [sp, #28]
  405732:	2700      	movs	r7, #0
  405734:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405738:	2202      	movs	r2, #2
  40573a:	e69c      	b.n	405476 <_vfiprintf_r+0x266>
  40573c:	9608      	str	r6, [sp, #32]
  40573e:	2800      	cmp	r0, #0
  405740:	d099      	beq.n	405676 <_vfiprintf_r+0x466>
  405742:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405746:	e796      	b.n	405676 <_vfiprintf_r+0x466>
  405748:	f898 2000 	ldrb.w	r2, [r8]
  40574c:	2d00      	cmp	r5, #0
  40574e:	f47f add1 	bne.w	4052f4 <_vfiprintf_r+0xe4>
  405752:	2001      	movs	r0, #1
  405754:	2520      	movs	r5, #32
  405756:	e5cd      	b.n	4052f4 <_vfiprintf_r+0xe4>
  405758:	f043 0301 	orr.w	r3, r3, #1
  40575c:	f898 2000 	ldrb.w	r2, [r8]
  405760:	e5c8      	b.n	4052f4 <_vfiprintf_r+0xe4>
  405762:	9608      	str	r6, [sp, #32]
  405764:	2800      	cmp	r0, #0
  405766:	f040 8393 	bne.w	405e90 <_vfiprintf_r+0xc80>
  40576a:	4929      	ldr	r1, [pc, #164]	; (405810 <_vfiprintf_r+0x600>)
  40576c:	910b      	str	r1, [sp, #44]	; 0x2c
  40576e:	069f      	lsls	r7, r3, #26
  405770:	f100 82e8 	bmi.w	405d44 <_vfiprintf_r+0xb34>
  405774:	9807      	ldr	r0, [sp, #28]
  405776:	06de      	lsls	r6, r3, #27
  405778:	4601      	mov	r1, r0
  40577a:	f100 8270 	bmi.w	405c5e <_vfiprintf_r+0xa4e>
  40577e:	065d      	lsls	r5, r3, #25
  405780:	f140 826d 	bpl.w	405c5e <_vfiprintf_r+0xa4e>
  405784:	3104      	adds	r1, #4
  405786:	8806      	ldrh	r6, [r0, #0]
  405788:	9107      	str	r1, [sp, #28]
  40578a:	2700      	movs	r7, #0
  40578c:	07d8      	lsls	r0, r3, #31
  40578e:	f140 8222 	bpl.w	405bd6 <_vfiprintf_r+0x9c6>
  405792:	ea56 0107 	orrs.w	r1, r6, r7
  405796:	f000 821e 	beq.w	405bd6 <_vfiprintf_r+0x9c6>
  40579a:	2130      	movs	r1, #48	; 0x30
  40579c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4057a0:	f043 0302 	orr.w	r3, r3, #2
  4057a4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4057a8:	2202      	movs	r2, #2
  4057aa:	e664      	b.n	405476 <_vfiprintf_r+0x266>
  4057ac:	9608      	str	r6, [sp, #32]
  4057ae:	2800      	cmp	r0, #0
  4057b0:	f040 836b 	bne.w	405e8a <_vfiprintf_r+0xc7a>
  4057b4:	4917      	ldr	r1, [pc, #92]	; (405814 <_vfiprintf_r+0x604>)
  4057b6:	910b      	str	r1, [sp, #44]	; 0x2c
  4057b8:	e7d9      	b.n	40576e <_vfiprintf_r+0x55e>
  4057ba:	9907      	ldr	r1, [sp, #28]
  4057bc:	9608      	str	r6, [sp, #32]
  4057be:	680a      	ldr	r2, [r1, #0]
  4057c0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4057c4:	f04f 0000 	mov.w	r0, #0
  4057c8:	460a      	mov	r2, r1
  4057ca:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4057ce:	3204      	adds	r2, #4
  4057d0:	2001      	movs	r0, #1
  4057d2:	9001      	str	r0, [sp, #4]
  4057d4:	9207      	str	r2, [sp, #28]
  4057d6:	9005      	str	r0, [sp, #20]
  4057d8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4057dc:	9302      	str	r3, [sp, #8]
  4057de:	2400      	movs	r4, #0
  4057e0:	e670      	b.n	4054c4 <_vfiprintf_r+0x2b4>
  4057e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4057e6:	f898 2000 	ldrb.w	r2, [r8]
  4057ea:	e583      	b.n	4052f4 <_vfiprintf_r+0xe4>
  4057ec:	f898 2000 	ldrb.w	r2, [r8]
  4057f0:	2a6c      	cmp	r2, #108	; 0x6c
  4057f2:	bf03      	ittte	eq
  4057f4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4057f8:	f043 0320 	orreq.w	r3, r3, #32
  4057fc:	f108 0801 	addeq.w	r8, r8, #1
  405800:	f043 0310 	orrne.w	r3, r3, #16
  405804:	e576      	b.n	4052f4 <_vfiprintf_r+0xe4>
  405806:	bf00      	nop
  405808:	00408284 	.word	0x00408284
  40580c:	00408294 	.word	0x00408294
  405810:	00408268 	.word	0x00408268
  405814:	00408254 	.word	0x00408254
  405818:	9907      	ldr	r1, [sp, #28]
  40581a:	680e      	ldr	r6, [r1, #0]
  40581c:	460a      	mov	r2, r1
  40581e:	2e00      	cmp	r6, #0
  405820:	f102 0204 	add.w	r2, r2, #4
  405824:	f6ff ae0f 	blt.w	405446 <_vfiprintf_r+0x236>
  405828:	9207      	str	r2, [sp, #28]
  40582a:	f898 2000 	ldrb.w	r2, [r8]
  40582e:	e561      	b.n	4052f4 <_vfiprintf_r+0xe4>
  405830:	f898 2000 	ldrb.w	r2, [r8]
  405834:	2001      	movs	r0, #1
  405836:	252b      	movs	r5, #43	; 0x2b
  405838:	e55c      	b.n	4052f4 <_vfiprintf_r+0xe4>
  40583a:	9907      	ldr	r1, [sp, #28]
  40583c:	9608      	str	r6, [sp, #32]
  40583e:	f8d1 b000 	ldr.w	fp, [r1]
  405842:	f04f 0200 	mov.w	r2, #0
  405846:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40584a:	1d0e      	adds	r6, r1, #4
  40584c:	f1bb 0f00 	cmp.w	fp, #0
  405850:	f000 82e5 	beq.w	405e1e <_vfiprintf_r+0xc0e>
  405854:	1c67      	adds	r7, r4, #1
  405856:	f000 82c4 	beq.w	405de2 <_vfiprintf_r+0xbd2>
  40585a:	4622      	mov	r2, r4
  40585c:	2100      	movs	r1, #0
  40585e:	4658      	mov	r0, fp
  405860:	9301      	str	r3, [sp, #4]
  405862:	f001 fbd5 	bl	407010 <memchr>
  405866:	9b01      	ldr	r3, [sp, #4]
  405868:	2800      	cmp	r0, #0
  40586a:	f000 82e5 	beq.w	405e38 <_vfiprintf_r+0xc28>
  40586e:	eba0 020b 	sub.w	r2, r0, fp
  405872:	9205      	str	r2, [sp, #20]
  405874:	9607      	str	r6, [sp, #28]
  405876:	9302      	str	r3, [sp, #8]
  405878:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40587c:	2400      	movs	r4, #0
  40587e:	e619      	b.n	4054b4 <_vfiprintf_r+0x2a4>
  405880:	f898 2000 	ldrb.w	r2, [r8]
  405884:	2a2a      	cmp	r2, #42	; 0x2a
  405886:	f108 0701 	add.w	r7, r8, #1
  40588a:	f000 82e9 	beq.w	405e60 <_vfiprintf_r+0xc50>
  40588e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405892:	2909      	cmp	r1, #9
  405894:	46b8      	mov	r8, r7
  405896:	f04f 0400 	mov.w	r4, #0
  40589a:	f63f ad2d 	bhi.w	4052f8 <_vfiprintf_r+0xe8>
  40589e:	f818 2b01 	ldrb.w	r2, [r8], #1
  4058a2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4058a6:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4058aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4058ae:	2909      	cmp	r1, #9
  4058b0:	d9f5      	bls.n	40589e <_vfiprintf_r+0x68e>
  4058b2:	e521      	b.n	4052f8 <_vfiprintf_r+0xe8>
  4058b4:	f043 0320 	orr.w	r3, r3, #32
  4058b8:	f898 2000 	ldrb.w	r2, [r8]
  4058bc:	e51a      	b.n	4052f4 <_vfiprintf_r+0xe4>
  4058be:	9608      	str	r6, [sp, #32]
  4058c0:	2800      	cmp	r0, #0
  4058c2:	f040 82db 	bne.w	405e7c <_vfiprintf_r+0xc6c>
  4058c6:	2a00      	cmp	r2, #0
  4058c8:	f000 80e7 	beq.w	405a9a <_vfiprintf_r+0x88a>
  4058cc:	2101      	movs	r1, #1
  4058ce:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4058d2:	f04f 0200 	mov.w	r2, #0
  4058d6:	9101      	str	r1, [sp, #4]
  4058d8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4058dc:	9105      	str	r1, [sp, #20]
  4058de:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4058e2:	e77b      	b.n	4057dc <_vfiprintf_r+0x5cc>
  4058e4:	9a07      	ldr	r2, [sp, #28]
  4058e6:	6813      	ldr	r3, [r2, #0]
  4058e8:	3204      	adds	r2, #4
  4058ea:	9207      	str	r2, [sp, #28]
  4058ec:	9a03      	ldr	r2, [sp, #12]
  4058ee:	601a      	str	r2, [r3, #0]
  4058f0:	e4cb      	b.n	40528a <_vfiprintf_r+0x7a>
  4058f2:	aa0f      	add	r2, sp, #60	; 0x3c
  4058f4:	9904      	ldr	r1, [sp, #16]
  4058f6:	4620      	mov	r0, r4
  4058f8:	f7ff fc4a 	bl	405190 <__sprint_r.part.0>
  4058fc:	2800      	cmp	r0, #0
  4058fe:	f040 8139 	bne.w	405b74 <_vfiprintf_r+0x964>
  405902:	9910      	ldr	r1, [sp, #64]	; 0x40
  405904:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405906:	f101 0c01 	add.w	ip, r1, #1
  40590a:	46ce      	mov	lr, r9
  40590c:	e5ff      	b.n	40550e <_vfiprintf_r+0x2fe>
  40590e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405910:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405912:	1c48      	adds	r0, r1, #1
  405914:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405918:	2d00      	cmp	r5, #0
  40591a:	f43f ae22 	beq.w	405562 <_vfiprintf_r+0x352>
  40591e:	3201      	adds	r2, #1
  405920:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  405924:	2101      	movs	r1, #1
  405926:	2807      	cmp	r0, #7
  405928:	9211      	str	r2, [sp, #68]	; 0x44
  40592a:	9010      	str	r0, [sp, #64]	; 0x40
  40592c:	f8ca 5000 	str.w	r5, [sl]
  405930:	f8ca 1004 	str.w	r1, [sl, #4]
  405934:	f340 8108 	ble.w	405b48 <_vfiprintf_r+0x938>
  405938:	2a00      	cmp	r2, #0
  40593a:	f040 81bc 	bne.w	405cb6 <_vfiprintf_r+0xaa6>
  40593e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405940:	2b00      	cmp	r3, #0
  405942:	f43f ae1f 	beq.w	405584 <_vfiprintf_r+0x374>
  405946:	ab0e      	add	r3, sp, #56	; 0x38
  405948:	2202      	movs	r2, #2
  40594a:	4608      	mov	r0, r1
  40594c:	931c      	str	r3, [sp, #112]	; 0x70
  40594e:	921d      	str	r2, [sp, #116]	; 0x74
  405950:	46ca      	mov	sl, r9
  405952:	4601      	mov	r1, r0
  405954:	f10a 0a08 	add.w	sl, sl, #8
  405958:	3001      	adds	r0, #1
  40595a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40595c:	2b80      	cmp	r3, #128	; 0x80
  40595e:	f43f ae19 	beq.w	405594 <_vfiprintf_r+0x384>
  405962:	9b05      	ldr	r3, [sp, #20]
  405964:	1ae4      	subs	r4, r4, r3
  405966:	2c00      	cmp	r4, #0
  405968:	dd2e      	ble.n	4059c8 <_vfiprintf_r+0x7b8>
  40596a:	2c10      	cmp	r4, #16
  40596c:	4db3      	ldr	r5, [pc, #716]	; (405c3c <_vfiprintf_r+0xa2c>)
  40596e:	dd1e      	ble.n	4059ae <_vfiprintf_r+0x79e>
  405970:	46d6      	mov	lr, sl
  405972:	2610      	movs	r6, #16
  405974:	9f06      	ldr	r7, [sp, #24]
  405976:	f8dd a010 	ldr.w	sl, [sp, #16]
  40597a:	e006      	b.n	40598a <_vfiprintf_r+0x77a>
  40597c:	1c88      	adds	r0, r1, #2
  40597e:	f10e 0e08 	add.w	lr, lr, #8
  405982:	4619      	mov	r1, r3
  405984:	3c10      	subs	r4, #16
  405986:	2c10      	cmp	r4, #16
  405988:	dd10      	ble.n	4059ac <_vfiprintf_r+0x79c>
  40598a:	1c4b      	adds	r3, r1, #1
  40598c:	3210      	adds	r2, #16
  40598e:	2b07      	cmp	r3, #7
  405990:	9211      	str	r2, [sp, #68]	; 0x44
  405992:	e88e 0060 	stmia.w	lr, {r5, r6}
  405996:	9310      	str	r3, [sp, #64]	; 0x40
  405998:	ddf0      	ble.n	40597c <_vfiprintf_r+0x76c>
  40599a:	2a00      	cmp	r2, #0
  40599c:	d165      	bne.n	405a6a <_vfiprintf_r+0x85a>
  40599e:	3c10      	subs	r4, #16
  4059a0:	2c10      	cmp	r4, #16
  4059a2:	f04f 0001 	mov.w	r0, #1
  4059a6:	4611      	mov	r1, r2
  4059a8:	46ce      	mov	lr, r9
  4059aa:	dcee      	bgt.n	40598a <_vfiprintf_r+0x77a>
  4059ac:	46f2      	mov	sl, lr
  4059ae:	4422      	add	r2, r4
  4059b0:	2807      	cmp	r0, #7
  4059b2:	9211      	str	r2, [sp, #68]	; 0x44
  4059b4:	f8ca 5000 	str.w	r5, [sl]
  4059b8:	f8ca 4004 	str.w	r4, [sl, #4]
  4059bc:	9010      	str	r0, [sp, #64]	; 0x40
  4059be:	f300 8085 	bgt.w	405acc <_vfiprintf_r+0x8bc>
  4059c2:	f10a 0a08 	add.w	sl, sl, #8
  4059c6:	3001      	adds	r0, #1
  4059c8:	9905      	ldr	r1, [sp, #20]
  4059ca:	f8ca b000 	str.w	fp, [sl]
  4059ce:	440a      	add	r2, r1
  4059d0:	2807      	cmp	r0, #7
  4059d2:	9211      	str	r2, [sp, #68]	; 0x44
  4059d4:	f8ca 1004 	str.w	r1, [sl, #4]
  4059d8:	9010      	str	r0, [sp, #64]	; 0x40
  4059da:	f340 8082 	ble.w	405ae2 <_vfiprintf_r+0x8d2>
  4059de:	2a00      	cmp	r2, #0
  4059e0:	f040 8118 	bne.w	405c14 <_vfiprintf_r+0xa04>
  4059e4:	9b02      	ldr	r3, [sp, #8]
  4059e6:	9210      	str	r2, [sp, #64]	; 0x40
  4059e8:	0758      	lsls	r0, r3, #29
  4059ea:	d535      	bpl.n	405a58 <_vfiprintf_r+0x848>
  4059ec:	9b08      	ldr	r3, [sp, #32]
  4059ee:	9901      	ldr	r1, [sp, #4]
  4059f0:	1a5c      	subs	r4, r3, r1
  4059f2:	2c00      	cmp	r4, #0
  4059f4:	f340 80e7 	ble.w	405bc6 <_vfiprintf_r+0x9b6>
  4059f8:	46ca      	mov	sl, r9
  4059fa:	2c10      	cmp	r4, #16
  4059fc:	f340 8218 	ble.w	405e30 <_vfiprintf_r+0xc20>
  405a00:	9910      	ldr	r1, [sp, #64]	; 0x40
  405a02:	4e8f      	ldr	r6, [pc, #572]	; (405c40 <_vfiprintf_r+0xa30>)
  405a04:	9f06      	ldr	r7, [sp, #24]
  405a06:	f8dd b010 	ldr.w	fp, [sp, #16]
  405a0a:	2510      	movs	r5, #16
  405a0c:	e006      	b.n	405a1c <_vfiprintf_r+0x80c>
  405a0e:	1c88      	adds	r0, r1, #2
  405a10:	f10a 0a08 	add.w	sl, sl, #8
  405a14:	4619      	mov	r1, r3
  405a16:	3c10      	subs	r4, #16
  405a18:	2c10      	cmp	r4, #16
  405a1a:	dd11      	ble.n	405a40 <_vfiprintf_r+0x830>
  405a1c:	1c4b      	adds	r3, r1, #1
  405a1e:	3210      	adds	r2, #16
  405a20:	2b07      	cmp	r3, #7
  405a22:	9211      	str	r2, [sp, #68]	; 0x44
  405a24:	f8ca 6000 	str.w	r6, [sl]
  405a28:	f8ca 5004 	str.w	r5, [sl, #4]
  405a2c:	9310      	str	r3, [sp, #64]	; 0x40
  405a2e:	ddee      	ble.n	405a0e <_vfiprintf_r+0x7fe>
  405a30:	bb42      	cbnz	r2, 405a84 <_vfiprintf_r+0x874>
  405a32:	3c10      	subs	r4, #16
  405a34:	2c10      	cmp	r4, #16
  405a36:	f04f 0001 	mov.w	r0, #1
  405a3a:	4611      	mov	r1, r2
  405a3c:	46ca      	mov	sl, r9
  405a3e:	dced      	bgt.n	405a1c <_vfiprintf_r+0x80c>
  405a40:	4422      	add	r2, r4
  405a42:	2807      	cmp	r0, #7
  405a44:	9211      	str	r2, [sp, #68]	; 0x44
  405a46:	f8ca 6000 	str.w	r6, [sl]
  405a4a:	f8ca 4004 	str.w	r4, [sl, #4]
  405a4e:	9010      	str	r0, [sp, #64]	; 0x40
  405a50:	dd51      	ble.n	405af6 <_vfiprintf_r+0x8e6>
  405a52:	2a00      	cmp	r2, #0
  405a54:	f040 819b 	bne.w	405d8e <_vfiprintf_r+0xb7e>
  405a58:	9b03      	ldr	r3, [sp, #12]
  405a5a:	9a08      	ldr	r2, [sp, #32]
  405a5c:	9901      	ldr	r1, [sp, #4]
  405a5e:	428a      	cmp	r2, r1
  405a60:	bfac      	ite	ge
  405a62:	189b      	addge	r3, r3, r2
  405a64:	185b      	addlt	r3, r3, r1
  405a66:	9303      	str	r3, [sp, #12]
  405a68:	e04e      	b.n	405b08 <_vfiprintf_r+0x8f8>
  405a6a:	aa0f      	add	r2, sp, #60	; 0x3c
  405a6c:	4651      	mov	r1, sl
  405a6e:	4638      	mov	r0, r7
  405a70:	f7ff fb8e 	bl	405190 <__sprint_r.part.0>
  405a74:	2800      	cmp	r0, #0
  405a76:	f040 813f 	bne.w	405cf8 <_vfiprintf_r+0xae8>
  405a7a:	9910      	ldr	r1, [sp, #64]	; 0x40
  405a7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a7e:	1c48      	adds	r0, r1, #1
  405a80:	46ce      	mov	lr, r9
  405a82:	e77f      	b.n	405984 <_vfiprintf_r+0x774>
  405a84:	aa0f      	add	r2, sp, #60	; 0x3c
  405a86:	4659      	mov	r1, fp
  405a88:	4638      	mov	r0, r7
  405a8a:	f7ff fb81 	bl	405190 <__sprint_r.part.0>
  405a8e:	b960      	cbnz	r0, 405aaa <_vfiprintf_r+0x89a>
  405a90:	9910      	ldr	r1, [sp, #64]	; 0x40
  405a92:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a94:	1c48      	adds	r0, r1, #1
  405a96:	46ca      	mov	sl, r9
  405a98:	e7bd      	b.n	405a16 <_vfiprintf_r+0x806>
  405a9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405a9c:	f8dd b010 	ldr.w	fp, [sp, #16]
  405aa0:	2b00      	cmp	r3, #0
  405aa2:	f040 81d4 	bne.w	405e4e <_vfiprintf_r+0xc3e>
  405aa6:	2300      	movs	r3, #0
  405aa8:	9310      	str	r3, [sp, #64]	; 0x40
  405aaa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405aae:	f013 0f01 	tst.w	r3, #1
  405ab2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405ab6:	d102      	bne.n	405abe <_vfiprintf_r+0x8ae>
  405ab8:	059a      	lsls	r2, r3, #22
  405aba:	f140 80de 	bpl.w	405c7a <_vfiprintf_r+0xa6a>
  405abe:	065b      	lsls	r3, r3, #25
  405ac0:	f53f acb2 	bmi.w	405428 <_vfiprintf_r+0x218>
  405ac4:	9803      	ldr	r0, [sp, #12]
  405ac6:	b02d      	add	sp, #180	; 0xb4
  405ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405acc:	2a00      	cmp	r2, #0
  405ace:	f040 8106 	bne.w	405cde <_vfiprintf_r+0xace>
  405ad2:	9a05      	ldr	r2, [sp, #20]
  405ad4:	921d      	str	r2, [sp, #116]	; 0x74
  405ad6:	2301      	movs	r3, #1
  405ad8:	9211      	str	r2, [sp, #68]	; 0x44
  405ada:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  405ade:	9310      	str	r3, [sp, #64]	; 0x40
  405ae0:	46ca      	mov	sl, r9
  405ae2:	f10a 0a08 	add.w	sl, sl, #8
  405ae6:	9b02      	ldr	r3, [sp, #8]
  405ae8:	0759      	lsls	r1, r3, #29
  405aea:	d504      	bpl.n	405af6 <_vfiprintf_r+0x8e6>
  405aec:	9b08      	ldr	r3, [sp, #32]
  405aee:	9901      	ldr	r1, [sp, #4]
  405af0:	1a5c      	subs	r4, r3, r1
  405af2:	2c00      	cmp	r4, #0
  405af4:	dc81      	bgt.n	4059fa <_vfiprintf_r+0x7ea>
  405af6:	9b03      	ldr	r3, [sp, #12]
  405af8:	9908      	ldr	r1, [sp, #32]
  405afa:	9801      	ldr	r0, [sp, #4]
  405afc:	4281      	cmp	r1, r0
  405afe:	bfac      	ite	ge
  405b00:	185b      	addge	r3, r3, r1
  405b02:	181b      	addlt	r3, r3, r0
  405b04:	9303      	str	r3, [sp, #12]
  405b06:	bb72      	cbnz	r2, 405b66 <_vfiprintf_r+0x956>
  405b08:	2300      	movs	r3, #0
  405b0a:	9310      	str	r3, [sp, #64]	; 0x40
  405b0c:	46ca      	mov	sl, r9
  405b0e:	f7ff bbbc 	b.w	40528a <_vfiprintf_r+0x7a>
  405b12:	aa0f      	add	r2, sp, #60	; 0x3c
  405b14:	9904      	ldr	r1, [sp, #16]
  405b16:	4620      	mov	r0, r4
  405b18:	f7ff fb3a 	bl	405190 <__sprint_r.part.0>
  405b1c:	bb50      	cbnz	r0, 405b74 <_vfiprintf_r+0x964>
  405b1e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405b20:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405b22:	f101 0e01 	add.w	lr, r1, #1
  405b26:	46cc      	mov	ip, r9
  405b28:	e548      	b.n	4055bc <_vfiprintf_r+0x3ac>
  405b2a:	2a00      	cmp	r2, #0
  405b2c:	f040 8140 	bne.w	405db0 <_vfiprintf_r+0xba0>
  405b30:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  405b34:	2900      	cmp	r1, #0
  405b36:	f000 811b 	beq.w	405d70 <_vfiprintf_r+0xb60>
  405b3a:	2201      	movs	r2, #1
  405b3c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  405b40:	4610      	mov	r0, r2
  405b42:	921d      	str	r2, [sp, #116]	; 0x74
  405b44:	911c      	str	r1, [sp, #112]	; 0x70
  405b46:	46ca      	mov	sl, r9
  405b48:	4601      	mov	r1, r0
  405b4a:	f10a 0a08 	add.w	sl, sl, #8
  405b4e:	3001      	adds	r0, #1
  405b50:	e507      	b.n	405562 <_vfiprintf_r+0x352>
  405b52:	9b02      	ldr	r3, [sp, #8]
  405b54:	2a01      	cmp	r2, #1
  405b56:	f000 8098 	beq.w	405c8a <_vfiprintf_r+0xa7a>
  405b5a:	2a02      	cmp	r2, #2
  405b5c:	d10d      	bne.n	405b7a <_vfiprintf_r+0x96a>
  405b5e:	9302      	str	r3, [sp, #8]
  405b60:	2600      	movs	r6, #0
  405b62:	2700      	movs	r7, #0
  405b64:	e5b0      	b.n	4056c8 <_vfiprintf_r+0x4b8>
  405b66:	aa0f      	add	r2, sp, #60	; 0x3c
  405b68:	9904      	ldr	r1, [sp, #16]
  405b6a:	9806      	ldr	r0, [sp, #24]
  405b6c:	f7ff fb10 	bl	405190 <__sprint_r.part.0>
  405b70:	2800      	cmp	r0, #0
  405b72:	d0c9      	beq.n	405b08 <_vfiprintf_r+0x8f8>
  405b74:	f8dd b010 	ldr.w	fp, [sp, #16]
  405b78:	e797      	b.n	405aaa <_vfiprintf_r+0x89a>
  405b7a:	9302      	str	r3, [sp, #8]
  405b7c:	2600      	movs	r6, #0
  405b7e:	2700      	movs	r7, #0
  405b80:	4649      	mov	r1, r9
  405b82:	e000      	b.n	405b86 <_vfiprintf_r+0x976>
  405b84:	4659      	mov	r1, fp
  405b86:	08f2      	lsrs	r2, r6, #3
  405b88:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405b8c:	08f8      	lsrs	r0, r7, #3
  405b8e:	f006 0307 	and.w	r3, r6, #7
  405b92:	4607      	mov	r7, r0
  405b94:	4616      	mov	r6, r2
  405b96:	3330      	adds	r3, #48	; 0x30
  405b98:	ea56 0207 	orrs.w	r2, r6, r7
  405b9c:	f801 3c01 	strb.w	r3, [r1, #-1]
  405ba0:	f101 3bff 	add.w	fp, r1, #4294967295
  405ba4:	d1ee      	bne.n	405b84 <_vfiprintf_r+0x974>
  405ba6:	9a02      	ldr	r2, [sp, #8]
  405ba8:	07d6      	lsls	r6, r2, #31
  405baa:	f57f ad9d 	bpl.w	4056e8 <_vfiprintf_r+0x4d8>
  405bae:	2b30      	cmp	r3, #48	; 0x30
  405bb0:	f43f ad9a 	beq.w	4056e8 <_vfiprintf_r+0x4d8>
  405bb4:	3902      	subs	r1, #2
  405bb6:	2330      	movs	r3, #48	; 0x30
  405bb8:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405bbc:	eba9 0301 	sub.w	r3, r9, r1
  405bc0:	9305      	str	r3, [sp, #20]
  405bc2:	468b      	mov	fp, r1
  405bc4:	e476      	b.n	4054b4 <_vfiprintf_r+0x2a4>
  405bc6:	9b03      	ldr	r3, [sp, #12]
  405bc8:	9a08      	ldr	r2, [sp, #32]
  405bca:	428a      	cmp	r2, r1
  405bcc:	bfac      	ite	ge
  405bce:	189b      	addge	r3, r3, r2
  405bd0:	185b      	addlt	r3, r3, r1
  405bd2:	9303      	str	r3, [sp, #12]
  405bd4:	e798      	b.n	405b08 <_vfiprintf_r+0x8f8>
  405bd6:	2202      	movs	r2, #2
  405bd8:	e44d      	b.n	405476 <_vfiprintf_r+0x266>
  405bda:	2f00      	cmp	r7, #0
  405bdc:	bf08      	it	eq
  405bde:	2e0a      	cmpeq	r6, #10
  405be0:	d352      	bcc.n	405c88 <_vfiprintf_r+0xa78>
  405be2:	46cb      	mov	fp, r9
  405be4:	4630      	mov	r0, r6
  405be6:	4639      	mov	r1, r7
  405be8:	220a      	movs	r2, #10
  405bea:	2300      	movs	r3, #0
  405bec:	f001 ffa4 	bl	407b38 <__aeabi_uldivmod>
  405bf0:	3230      	adds	r2, #48	; 0x30
  405bf2:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  405bf6:	4630      	mov	r0, r6
  405bf8:	4639      	mov	r1, r7
  405bfa:	2300      	movs	r3, #0
  405bfc:	220a      	movs	r2, #10
  405bfe:	f001 ff9b 	bl	407b38 <__aeabi_uldivmod>
  405c02:	4606      	mov	r6, r0
  405c04:	460f      	mov	r7, r1
  405c06:	ea56 0307 	orrs.w	r3, r6, r7
  405c0a:	d1eb      	bne.n	405be4 <_vfiprintf_r+0x9d4>
  405c0c:	e56c      	b.n	4056e8 <_vfiprintf_r+0x4d8>
  405c0e:	9405      	str	r4, [sp, #20]
  405c10:	46cb      	mov	fp, r9
  405c12:	e44f      	b.n	4054b4 <_vfiprintf_r+0x2a4>
  405c14:	aa0f      	add	r2, sp, #60	; 0x3c
  405c16:	9904      	ldr	r1, [sp, #16]
  405c18:	9806      	ldr	r0, [sp, #24]
  405c1a:	f7ff fab9 	bl	405190 <__sprint_r.part.0>
  405c1e:	2800      	cmp	r0, #0
  405c20:	d1a8      	bne.n	405b74 <_vfiprintf_r+0x964>
  405c22:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c24:	46ca      	mov	sl, r9
  405c26:	e75e      	b.n	405ae6 <_vfiprintf_r+0x8d6>
  405c28:	aa0f      	add	r2, sp, #60	; 0x3c
  405c2a:	9904      	ldr	r1, [sp, #16]
  405c2c:	9806      	ldr	r0, [sp, #24]
  405c2e:	f7ff faaf 	bl	405190 <__sprint_r.part.0>
  405c32:	2800      	cmp	r0, #0
  405c34:	d19e      	bne.n	405b74 <_vfiprintf_r+0x964>
  405c36:	46ca      	mov	sl, r9
  405c38:	f7ff bbc0 	b.w	4053bc <_vfiprintf_r+0x1ac>
  405c3c:	00408294 	.word	0x00408294
  405c40:	00408284 	.word	0x00408284
  405c44:	3104      	adds	r1, #4
  405c46:	6816      	ldr	r6, [r2, #0]
  405c48:	9107      	str	r1, [sp, #28]
  405c4a:	2201      	movs	r2, #1
  405c4c:	2700      	movs	r7, #0
  405c4e:	e412      	b.n	405476 <_vfiprintf_r+0x266>
  405c50:	9807      	ldr	r0, [sp, #28]
  405c52:	4601      	mov	r1, r0
  405c54:	3104      	adds	r1, #4
  405c56:	6806      	ldr	r6, [r0, #0]
  405c58:	9107      	str	r1, [sp, #28]
  405c5a:	2700      	movs	r7, #0
  405c5c:	e40b      	b.n	405476 <_vfiprintf_r+0x266>
  405c5e:	680e      	ldr	r6, [r1, #0]
  405c60:	3104      	adds	r1, #4
  405c62:	9107      	str	r1, [sp, #28]
  405c64:	2700      	movs	r7, #0
  405c66:	e591      	b.n	40578c <_vfiprintf_r+0x57c>
  405c68:	9907      	ldr	r1, [sp, #28]
  405c6a:	680e      	ldr	r6, [r1, #0]
  405c6c:	460a      	mov	r2, r1
  405c6e:	17f7      	asrs	r7, r6, #31
  405c70:	3204      	adds	r2, #4
  405c72:	9207      	str	r2, [sp, #28]
  405c74:	4630      	mov	r0, r6
  405c76:	4639      	mov	r1, r7
  405c78:	e50f      	b.n	40569a <_vfiprintf_r+0x48a>
  405c7a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405c7e:	f000 fe7f 	bl	406980 <__retarget_lock_release_recursive>
  405c82:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405c86:	e71a      	b.n	405abe <_vfiprintf_r+0x8ae>
  405c88:	9b02      	ldr	r3, [sp, #8]
  405c8a:	9302      	str	r3, [sp, #8]
  405c8c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405c90:	3630      	adds	r6, #48	; 0x30
  405c92:	2301      	movs	r3, #1
  405c94:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405c98:	9305      	str	r3, [sp, #20]
  405c9a:	e40b      	b.n	4054b4 <_vfiprintf_r+0x2a4>
  405c9c:	aa0f      	add	r2, sp, #60	; 0x3c
  405c9e:	9904      	ldr	r1, [sp, #16]
  405ca0:	9806      	ldr	r0, [sp, #24]
  405ca2:	f7ff fa75 	bl	405190 <__sprint_r.part.0>
  405ca6:	2800      	cmp	r0, #0
  405ca8:	f47f af64 	bne.w	405b74 <_vfiprintf_r+0x964>
  405cac:	9910      	ldr	r1, [sp, #64]	; 0x40
  405cae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405cb0:	1c48      	adds	r0, r1, #1
  405cb2:	46ca      	mov	sl, r9
  405cb4:	e651      	b.n	40595a <_vfiprintf_r+0x74a>
  405cb6:	aa0f      	add	r2, sp, #60	; 0x3c
  405cb8:	9904      	ldr	r1, [sp, #16]
  405cba:	9806      	ldr	r0, [sp, #24]
  405cbc:	f7ff fa68 	bl	405190 <__sprint_r.part.0>
  405cc0:	2800      	cmp	r0, #0
  405cc2:	f47f af57 	bne.w	405b74 <_vfiprintf_r+0x964>
  405cc6:	9910      	ldr	r1, [sp, #64]	; 0x40
  405cc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405cca:	1c48      	adds	r0, r1, #1
  405ccc:	46ca      	mov	sl, r9
  405cce:	e448      	b.n	405562 <_vfiprintf_r+0x352>
  405cd0:	2a00      	cmp	r2, #0
  405cd2:	f040 8091 	bne.w	405df8 <_vfiprintf_r+0xbe8>
  405cd6:	2001      	movs	r0, #1
  405cd8:	4611      	mov	r1, r2
  405cda:	46ca      	mov	sl, r9
  405cdc:	e641      	b.n	405962 <_vfiprintf_r+0x752>
  405cde:	aa0f      	add	r2, sp, #60	; 0x3c
  405ce0:	9904      	ldr	r1, [sp, #16]
  405ce2:	9806      	ldr	r0, [sp, #24]
  405ce4:	f7ff fa54 	bl	405190 <__sprint_r.part.0>
  405ce8:	2800      	cmp	r0, #0
  405cea:	f47f af43 	bne.w	405b74 <_vfiprintf_r+0x964>
  405cee:	9810      	ldr	r0, [sp, #64]	; 0x40
  405cf0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405cf2:	3001      	adds	r0, #1
  405cf4:	46ca      	mov	sl, r9
  405cf6:	e667      	b.n	4059c8 <_vfiprintf_r+0x7b8>
  405cf8:	46d3      	mov	fp, sl
  405cfa:	e6d6      	b.n	405aaa <_vfiprintf_r+0x89a>
  405cfc:	9e07      	ldr	r6, [sp, #28]
  405cfe:	3607      	adds	r6, #7
  405d00:	f026 0207 	bic.w	r2, r6, #7
  405d04:	f102 0108 	add.w	r1, r2, #8
  405d08:	e9d2 6700 	ldrd	r6, r7, [r2]
  405d0c:	9107      	str	r1, [sp, #28]
  405d0e:	2201      	movs	r2, #1
  405d10:	f7ff bbb1 	b.w	405476 <_vfiprintf_r+0x266>
  405d14:	9e07      	ldr	r6, [sp, #28]
  405d16:	3607      	adds	r6, #7
  405d18:	f026 0607 	bic.w	r6, r6, #7
  405d1c:	e9d6 0100 	ldrd	r0, r1, [r6]
  405d20:	f106 0208 	add.w	r2, r6, #8
  405d24:	9207      	str	r2, [sp, #28]
  405d26:	4606      	mov	r6, r0
  405d28:	460f      	mov	r7, r1
  405d2a:	e4b6      	b.n	40569a <_vfiprintf_r+0x48a>
  405d2c:	9e07      	ldr	r6, [sp, #28]
  405d2e:	3607      	adds	r6, #7
  405d30:	f026 0207 	bic.w	r2, r6, #7
  405d34:	f102 0108 	add.w	r1, r2, #8
  405d38:	e9d2 6700 	ldrd	r6, r7, [r2]
  405d3c:	9107      	str	r1, [sp, #28]
  405d3e:	2200      	movs	r2, #0
  405d40:	f7ff bb99 	b.w	405476 <_vfiprintf_r+0x266>
  405d44:	9e07      	ldr	r6, [sp, #28]
  405d46:	3607      	adds	r6, #7
  405d48:	f026 0107 	bic.w	r1, r6, #7
  405d4c:	f101 0008 	add.w	r0, r1, #8
  405d50:	9007      	str	r0, [sp, #28]
  405d52:	e9d1 6700 	ldrd	r6, r7, [r1]
  405d56:	e519      	b.n	40578c <_vfiprintf_r+0x57c>
  405d58:	46cb      	mov	fp, r9
  405d5a:	f7ff bbab 	b.w	4054b4 <_vfiprintf_r+0x2a4>
  405d5e:	252d      	movs	r5, #45	; 0x2d
  405d60:	4276      	negs	r6, r6
  405d62:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405d66:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405d6a:	2201      	movs	r2, #1
  405d6c:	f7ff bb88 	b.w	405480 <_vfiprintf_r+0x270>
  405d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405d72:	b9b3      	cbnz	r3, 405da2 <_vfiprintf_r+0xb92>
  405d74:	4611      	mov	r1, r2
  405d76:	2001      	movs	r0, #1
  405d78:	46ca      	mov	sl, r9
  405d7a:	e5f2      	b.n	405962 <_vfiprintf_r+0x752>
  405d7c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405d80:	f000 fdfe 	bl	406980 <__retarget_lock_release_recursive>
  405d84:	f04f 33ff 	mov.w	r3, #4294967295
  405d88:	9303      	str	r3, [sp, #12]
  405d8a:	f7ff bb50 	b.w	40542e <_vfiprintf_r+0x21e>
  405d8e:	aa0f      	add	r2, sp, #60	; 0x3c
  405d90:	9904      	ldr	r1, [sp, #16]
  405d92:	9806      	ldr	r0, [sp, #24]
  405d94:	f7ff f9fc 	bl	405190 <__sprint_r.part.0>
  405d98:	2800      	cmp	r0, #0
  405d9a:	f47f aeeb 	bne.w	405b74 <_vfiprintf_r+0x964>
  405d9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405da0:	e6a9      	b.n	405af6 <_vfiprintf_r+0x8e6>
  405da2:	ab0e      	add	r3, sp, #56	; 0x38
  405da4:	2202      	movs	r2, #2
  405da6:	931c      	str	r3, [sp, #112]	; 0x70
  405da8:	921d      	str	r2, [sp, #116]	; 0x74
  405daa:	2001      	movs	r0, #1
  405dac:	46ca      	mov	sl, r9
  405dae:	e5d0      	b.n	405952 <_vfiprintf_r+0x742>
  405db0:	aa0f      	add	r2, sp, #60	; 0x3c
  405db2:	9904      	ldr	r1, [sp, #16]
  405db4:	9806      	ldr	r0, [sp, #24]
  405db6:	f7ff f9eb 	bl	405190 <__sprint_r.part.0>
  405dba:	2800      	cmp	r0, #0
  405dbc:	f47f aeda 	bne.w	405b74 <_vfiprintf_r+0x964>
  405dc0:	9910      	ldr	r1, [sp, #64]	; 0x40
  405dc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405dc4:	1c48      	adds	r0, r1, #1
  405dc6:	46ca      	mov	sl, r9
  405dc8:	e5a4      	b.n	405914 <_vfiprintf_r+0x704>
  405dca:	9a07      	ldr	r2, [sp, #28]
  405dcc:	9903      	ldr	r1, [sp, #12]
  405dce:	6813      	ldr	r3, [r2, #0]
  405dd0:	17cd      	asrs	r5, r1, #31
  405dd2:	4608      	mov	r0, r1
  405dd4:	3204      	adds	r2, #4
  405dd6:	4629      	mov	r1, r5
  405dd8:	9207      	str	r2, [sp, #28]
  405dda:	e9c3 0100 	strd	r0, r1, [r3]
  405dde:	f7ff ba54 	b.w	40528a <_vfiprintf_r+0x7a>
  405de2:	4658      	mov	r0, fp
  405de4:	9607      	str	r6, [sp, #28]
  405de6:	9302      	str	r3, [sp, #8]
  405de8:	f001 fc6a 	bl	4076c0 <strlen>
  405dec:	2400      	movs	r4, #0
  405dee:	9005      	str	r0, [sp, #20]
  405df0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405df4:	f7ff bb5e 	b.w	4054b4 <_vfiprintf_r+0x2a4>
  405df8:	aa0f      	add	r2, sp, #60	; 0x3c
  405dfa:	9904      	ldr	r1, [sp, #16]
  405dfc:	9806      	ldr	r0, [sp, #24]
  405dfe:	f7ff f9c7 	bl	405190 <__sprint_r.part.0>
  405e02:	2800      	cmp	r0, #0
  405e04:	f47f aeb6 	bne.w	405b74 <_vfiprintf_r+0x964>
  405e08:	9910      	ldr	r1, [sp, #64]	; 0x40
  405e0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405e0c:	1c48      	adds	r0, r1, #1
  405e0e:	46ca      	mov	sl, r9
  405e10:	e5a7      	b.n	405962 <_vfiprintf_r+0x752>
  405e12:	9910      	ldr	r1, [sp, #64]	; 0x40
  405e14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405e16:	4e20      	ldr	r6, [pc, #128]	; (405e98 <_vfiprintf_r+0xc88>)
  405e18:	3101      	adds	r1, #1
  405e1a:	f7ff bb90 	b.w	40553e <_vfiprintf_r+0x32e>
  405e1e:	2c06      	cmp	r4, #6
  405e20:	bf28      	it	cs
  405e22:	2406      	movcs	r4, #6
  405e24:	9405      	str	r4, [sp, #20]
  405e26:	9607      	str	r6, [sp, #28]
  405e28:	9401      	str	r4, [sp, #4]
  405e2a:	f8df b070 	ldr.w	fp, [pc, #112]	; 405e9c <_vfiprintf_r+0xc8c>
  405e2e:	e4d5      	b.n	4057dc <_vfiprintf_r+0x5cc>
  405e30:	9810      	ldr	r0, [sp, #64]	; 0x40
  405e32:	4e19      	ldr	r6, [pc, #100]	; (405e98 <_vfiprintf_r+0xc88>)
  405e34:	3001      	adds	r0, #1
  405e36:	e603      	b.n	405a40 <_vfiprintf_r+0x830>
  405e38:	9405      	str	r4, [sp, #20]
  405e3a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405e3e:	9607      	str	r6, [sp, #28]
  405e40:	9302      	str	r3, [sp, #8]
  405e42:	4604      	mov	r4, r0
  405e44:	f7ff bb36 	b.w	4054b4 <_vfiprintf_r+0x2a4>
  405e48:	4686      	mov	lr, r0
  405e4a:	f7ff bbce 	b.w	4055ea <_vfiprintf_r+0x3da>
  405e4e:	9806      	ldr	r0, [sp, #24]
  405e50:	aa0f      	add	r2, sp, #60	; 0x3c
  405e52:	4659      	mov	r1, fp
  405e54:	f7ff f99c 	bl	405190 <__sprint_r.part.0>
  405e58:	2800      	cmp	r0, #0
  405e5a:	f43f ae24 	beq.w	405aa6 <_vfiprintf_r+0x896>
  405e5e:	e624      	b.n	405aaa <_vfiprintf_r+0x89a>
  405e60:	9907      	ldr	r1, [sp, #28]
  405e62:	f898 2001 	ldrb.w	r2, [r8, #1]
  405e66:	680c      	ldr	r4, [r1, #0]
  405e68:	3104      	adds	r1, #4
  405e6a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405e6e:	46b8      	mov	r8, r7
  405e70:	9107      	str	r1, [sp, #28]
  405e72:	f7ff ba3f 	b.w	4052f4 <_vfiprintf_r+0xe4>
  405e76:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405e7a:	e43c      	b.n	4056f6 <_vfiprintf_r+0x4e6>
  405e7c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405e80:	e521      	b.n	4058c6 <_vfiprintf_r+0x6b6>
  405e82:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405e86:	f7ff bbf4 	b.w	405672 <_vfiprintf_r+0x462>
  405e8a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405e8e:	e491      	b.n	4057b4 <_vfiprintf_r+0x5a4>
  405e90:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405e94:	e469      	b.n	40576a <_vfiprintf_r+0x55a>
  405e96:	bf00      	nop
  405e98:	00408284 	.word	0x00408284
  405e9c:	0040827c 	.word	0x0040827c

00405ea0 <__sbprintf>:
  405ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405ea4:	460c      	mov	r4, r1
  405ea6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405eaa:	8989      	ldrh	r1, [r1, #12]
  405eac:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405eae:	89e5      	ldrh	r5, [r4, #14]
  405eb0:	9619      	str	r6, [sp, #100]	; 0x64
  405eb2:	f021 0102 	bic.w	r1, r1, #2
  405eb6:	4606      	mov	r6, r0
  405eb8:	69e0      	ldr	r0, [r4, #28]
  405eba:	f8ad 100c 	strh.w	r1, [sp, #12]
  405ebe:	4617      	mov	r7, r2
  405ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405ec4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405ec6:	f8ad 500e 	strh.w	r5, [sp, #14]
  405eca:	4698      	mov	r8, r3
  405ecc:	ad1a      	add	r5, sp, #104	; 0x68
  405ece:	2300      	movs	r3, #0
  405ed0:	9007      	str	r0, [sp, #28]
  405ed2:	a816      	add	r0, sp, #88	; 0x58
  405ed4:	9209      	str	r2, [sp, #36]	; 0x24
  405ed6:	9306      	str	r3, [sp, #24]
  405ed8:	9500      	str	r5, [sp, #0]
  405eda:	9504      	str	r5, [sp, #16]
  405edc:	9102      	str	r1, [sp, #8]
  405ede:	9105      	str	r1, [sp, #20]
  405ee0:	f000 fd48 	bl	406974 <__retarget_lock_init_recursive>
  405ee4:	4643      	mov	r3, r8
  405ee6:	463a      	mov	r2, r7
  405ee8:	4669      	mov	r1, sp
  405eea:	4630      	mov	r0, r6
  405eec:	f7ff f990 	bl	405210 <_vfiprintf_r>
  405ef0:	1e05      	subs	r5, r0, #0
  405ef2:	db07      	blt.n	405f04 <__sbprintf+0x64>
  405ef4:	4630      	mov	r0, r6
  405ef6:	4669      	mov	r1, sp
  405ef8:	f000 f928 	bl	40614c <_fflush_r>
  405efc:	2800      	cmp	r0, #0
  405efe:	bf18      	it	ne
  405f00:	f04f 35ff 	movne.w	r5, #4294967295
  405f04:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405f08:	065b      	lsls	r3, r3, #25
  405f0a:	d503      	bpl.n	405f14 <__sbprintf+0x74>
  405f0c:	89a3      	ldrh	r3, [r4, #12]
  405f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405f12:	81a3      	strh	r3, [r4, #12]
  405f14:	9816      	ldr	r0, [sp, #88]	; 0x58
  405f16:	f000 fd2f 	bl	406978 <__retarget_lock_close_recursive>
  405f1a:	4628      	mov	r0, r5
  405f1c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405f24 <__swsetup_r>:
  405f24:	b538      	push	{r3, r4, r5, lr}
  405f26:	4b30      	ldr	r3, [pc, #192]	; (405fe8 <__swsetup_r+0xc4>)
  405f28:	681b      	ldr	r3, [r3, #0]
  405f2a:	4605      	mov	r5, r0
  405f2c:	460c      	mov	r4, r1
  405f2e:	b113      	cbz	r3, 405f36 <__swsetup_r+0x12>
  405f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405f32:	2a00      	cmp	r2, #0
  405f34:	d038      	beq.n	405fa8 <__swsetup_r+0x84>
  405f36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405f3a:	b293      	uxth	r3, r2
  405f3c:	0718      	lsls	r0, r3, #28
  405f3e:	d50c      	bpl.n	405f5a <__swsetup_r+0x36>
  405f40:	6920      	ldr	r0, [r4, #16]
  405f42:	b1a8      	cbz	r0, 405f70 <__swsetup_r+0x4c>
  405f44:	f013 0201 	ands.w	r2, r3, #1
  405f48:	d01e      	beq.n	405f88 <__swsetup_r+0x64>
  405f4a:	6963      	ldr	r3, [r4, #20]
  405f4c:	2200      	movs	r2, #0
  405f4e:	425b      	negs	r3, r3
  405f50:	61a3      	str	r3, [r4, #24]
  405f52:	60a2      	str	r2, [r4, #8]
  405f54:	b1f0      	cbz	r0, 405f94 <__swsetup_r+0x70>
  405f56:	2000      	movs	r0, #0
  405f58:	bd38      	pop	{r3, r4, r5, pc}
  405f5a:	06d9      	lsls	r1, r3, #27
  405f5c:	d53c      	bpl.n	405fd8 <__swsetup_r+0xb4>
  405f5e:	0758      	lsls	r0, r3, #29
  405f60:	d426      	bmi.n	405fb0 <__swsetup_r+0x8c>
  405f62:	6920      	ldr	r0, [r4, #16]
  405f64:	f042 0308 	orr.w	r3, r2, #8
  405f68:	81a3      	strh	r3, [r4, #12]
  405f6a:	b29b      	uxth	r3, r3
  405f6c:	2800      	cmp	r0, #0
  405f6e:	d1e9      	bne.n	405f44 <__swsetup_r+0x20>
  405f70:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405f74:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405f78:	d0e4      	beq.n	405f44 <__swsetup_r+0x20>
  405f7a:	4628      	mov	r0, r5
  405f7c:	4621      	mov	r1, r4
  405f7e:	f000 fd2f 	bl	4069e0 <__smakebuf_r>
  405f82:	89a3      	ldrh	r3, [r4, #12]
  405f84:	6920      	ldr	r0, [r4, #16]
  405f86:	e7dd      	b.n	405f44 <__swsetup_r+0x20>
  405f88:	0799      	lsls	r1, r3, #30
  405f8a:	bf58      	it	pl
  405f8c:	6962      	ldrpl	r2, [r4, #20]
  405f8e:	60a2      	str	r2, [r4, #8]
  405f90:	2800      	cmp	r0, #0
  405f92:	d1e0      	bne.n	405f56 <__swsetup_r+0x32>
  405f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405f98:	061a      	lsls	r2, r3, #24
  405f9a:	d5dd      	bpl.n	405f58 <__swsetup_r+0x34>
  405f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405fa0:	81a3      	strh	r3, [r4, #12]
  405fa2:	f04f 30ff 	mov.w	r0, #4294967295
  405fa6:	bd38      	pop	{r3, r4, r5, pc}
  405fa8:	4618      	mov	r0, r3
  405faa:	f000 f927 	bl	4061fc <__sinit>
  405fae:	e7c2      	b.n	405f36 <__swsetup_r+0x12>
  405fb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405fb2:	b151      	cbz	r1, 405fca <__swsetup_r+0xa6>
  405fb4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405fb8:	4299      	cmp	r1, r3
  405fba:	d004      	beq.n	405fc6 <__swsetup_r+0xa2>
  405fbc:	4628      	mov	r0, r5
  405fbe:	f000 fa43 	bl	406448 <_free_r>
  405fc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405fc6:	2300      	movs	r3, #0
  405fc8:	6323      	str	r3, [r4, #48]	; 0x30
  405fca:	2300      	movs	r3, #0
  405fcc:	6920      	ldr	r0, [r4, #16]
  405fce:	6063      	str	r3, [r4, #4]
  405fd0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405fd4:	6020      	str	r0, [r4, #0]
  405fd6:	e7c5      	b.n	405f64 <__swsetup_r+0x40>
  405fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405fdc:	2309      	movs	r3, #9
  405fde:	602b      	str	r3, [r5, #0]
  405fe0:	f04f 30ff 	mov.w	r0, #4294967295
  405fe4:	81a2      	strh	r2, [r4, #12]
  405fe6:	bd38      	pop	{r3, r4, r5, pc}
  405fe8:	204000d0 	.word	0x204000d0

00405fec <register_fini>:
  405fec:	4b02      	ldr	r3, [pc, #8]	; (405ff8 <register_fini+0xc>)
  405fee:	b113      	cbz	r3, 405ff6 <register_fini+0xa>
  405ff0:	4802      	ldr	r0, [pc, #8]	; (405ffc <register_fini+0x10>)
  405ff2:	f000 b805 	b.w	406000 <atexit>
  405ff6:	4770      	bx	lr
  405ff8:	00000000 	.word	0x00000000
  405ffc:	0040626d 	.word	0x0040626d

00406000 <atexit>:
  406000:	2300      	movs	r3, #0
  406002:	4601      	mov	r1, r0
  406004:	461a      	mov	r2, r3
  406006:	4618      	mov	r0, r3
  406008:	f001 bc6e 	b.w	4078e8 <__register_exitproc>

0040600c <__sflush_r>:
  40600c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  406010:	b29a      	uxth	r2, r3
  406012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406016:	460d      	mov	r5, r1
  406018:	0711      	lsls	r1, r2, #28
  40601a:	4680      	mov	r8, r0
  40601c:	d43a      	bmi.n	406094 <__sflush_r+0x88>
  40601e:	686a      	ldr	r2, [r5, #4]
  406020:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406024:	2a00      	cmp	r2, #0
  406026:	81ab      	strh	r3, [r5, #12]
  406028:	dd6f      	ble.n	40610a <__sflush_r+0xfe>
  40602a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40602c:	2c00      	cmp	r4, #0
  40602e:	d049      	beq.n	4060c4 <__sflush_r+0xb8>
  406030:	2200      	movs	r2, #0
  406032:	b29b      	uxth	r3, r3
  406034:	f8d8 6000 	ldr.w	r6, [r8]
  406038:	f8c8 2000 	str.w	r2, [r8]
  40603c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  406040:	d067      	beq.n	406112 <__sflush_r+0x106>
  406042:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406044:	075f      	lsls	r7, r3, #29
  406046:	d505      	bpl.n	406054 <__sflush_r+0x48>
  406048:	6869      	ldr	r1, [r5, #4]
  40604a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40604c:	1a52      	subs	r2, r2, r1
  40604e:	b10b      	cbz	r3, 406054 <__sflush_r+0x48>
  406050:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  406052:	1ad2      	subs	r2, r2, r3
  406054:	2300      	movs	r3, #0
  406056:	69e9      	ldr	r1, [r5, #28]
  406058:	4640      	mov	r0, r8
  40605a:	47a0      	blx	r4
  40605c:	1c44      	adds	r4, r0, #1
  40605e:	d03c      	beq.n	4060da <__sflush_r+0xce>
  406060:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  406064:	692a      	ldr	r2, [r5, #16]
  406066:	602a      	str	r2, [r5, #0]
  406068:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40606c:	2200      	movs	r2, #0
  40606e:	81ab      	strh	r3, [r5, #12]
  406070:	04db      	lsls	r3, r3, #19
  406072:	606a      	str	r2, [r5, #4]
  406074:	d447      	bmi.n	406106 <__sflush_r+0xfa>
  406076:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406078:	f8c8 6000 	str.w	r6, [r8]
  40607c:	b311      	cbz	r1, 4060c4 <__sflush_r+0xb8>
  40607e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406082:	4299      	cmp	r1, r3
  406084:	d002      	beq.n	40608c <__sflush_r+0x80>
  406086:	4640      	mov	r0, r8
  406088:	f000 f9de 	bl	406448 <_free_r>
  40608c:	2000      	movs	r0, #0
  40608e:	6328      	str	r0, [r5, #48]	; 0x30
  406090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406094:	692e      	ldr	r6, [r5, #16]
  406096:	b1ae      	cbz	r6, 4060c4 <__sflush_r+0xb8>
  406098:	682c      	ldr	r4, [r5, #0]
  40609a:	602e      	str	r6, [r5, #0]
  40609c:	0791      	lsls	r1, r2, #30
  40609e:	bf0c      	ite	eq
  4060a0:	696b      	ldreq	r3, [r5, #20]
  4060a2:	2300      	movne	r3, #0
  4060a4:	1ba4      	subs	r4, r4, r6
  4060a6:	60ab      	str	r3, [r5, #8]
  4060a8:	e00a      	b.n	4060c0 <__sflush_r+0xb4>
  4060aa:	4623      	mov	r3, r4
  4060ac:	4632      	mov	r2, r6
  4060ae:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4060b0:	69e9      	ldr	r1, [r5, #28]
  4060b2:	4640      	mov	r0, r8
  4060b4:	47b8      	blx	r7
  4060b6:	2800      	cmp	r0, #0
  4060b8:	eba4 0400 	sub.w	r4, r4, r0
  4060bc:	4406      	add	r6, r0
  4060be:	dd04      	ble.n	4060ca <__sflush_r+0xbe>
  4060c0:	2c00      	cmp	r4, #0
  4060c2:	dcf2      	bgt.n	4060aa <__sflush_r+0x9e>
  4060c4:	2000      	movs	r0, #0
  4060c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4060ca:	89ab      	ldrh	r3, [r5, #12]
  4060cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4060d0:	81ab      	strh	r3, [r5, #12]
  4060d2:	f04f 30ff 	mov.w	r0, #4294967295
  4060d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4060da:	f8d8 4000 	ldr.w	r4, [r8]
  4060de:	2c1d      	cmp	r4, #29
  4060e0:	d8f3      	bhi.n	4060ca <__sflush_r+0xbe>
  4060e2:	4b19      	ldr	r3, [pc, #100]	; (406148 <__sflush_r+0x13c>)
  4060e4:	40e3      	lsrs	r3, r4
  4060e6:	43db      	mvns	r3, r3
  4060e8:	f013 0301 	ands.w	r3, r3, #1
  4060ec:	d1ed      	bne.n	4060ca <__sflush_r+0xbe>
  4060ee:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4060f2:	606b      	str	r3, [r5, #4]
  4060f4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4060f8:	6929      	ldr	r1, [r5, #16]
  4060fa:	81ab      	strh	r3, [r5, #12]
  4060fc:	04da      	lsls	r2, r3, #19
  4060fe:	6029      	str	r1, [r5, #0]
  406100:	d5b9      	bpl.n	406076 <__sflush_r+0x6a>
  406102:	2c00      	cmp	r4, #0
  406104:	d1b7      	bne.n	406076 <__sflush_r+0x6a>
  406106:	6528      	str	r0, [r5, #80]	; 0x50
  406108:	e7b5      	b.n	406076 <__sflush_r+0x6a>
  40610a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40610c:	2a00      	cmp	r2, #0
  40610e:	dc8c      	bgt.n	40602a <__sflush_r+0x1e>
  406110:	e7d8      	b.n	4060c4 <__sflush_r+0xb8>
  406112:	2301      	movs	r3, #1
  406114:	69e9      	ldr	r1, [r5, #28]
  406116:	4640      	mov	r0, r8
  406118:	47a0      	blx	r4
  40611a:	1c43      	adds	r3, r0, #1
  40611c:	4602      	mov	r2, r0
  40611e:	d002      	beq.n	406126 <__sflush_r+0x11a>
  406120:	89ab      	ldrh	r3, [r5, #12]
  406122:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406124:	e78e      	b.n	406044 <__sflush_r+0x38>
  406126:	f8d8 3000 	ldr.w	r3, [r8]
  40612a:	2b00      	cmp	r3, #0
  40612c:	d0f8      	beq.n	406120 <__sflush_r+0x114>
  40612e:	2b1d      	cmp	r3, #29
  406130:	d001      	beq.n	406136 <__sflush_r+0x12a>
  406132:	2b16      	cmp	r3, #22
  406134:	d102      	bne.n	40613c <__sflush_r+0x130>
  406136:	f8c8 6000 	str.w	r6, [r8]
  40613a:	e7c3      	b.n	4060c4 <__sflush_r+0xb8>
  40613c:	89ab      	ldrh	r3, [r5, #12]
  40613e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406142:	81ab      	strh	r3, [r5, #12]
  406144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406148:	20400001 	.word	0x20400001

0040614c <_fflush_r>:
  40614c:	b538      	push	{r3, r4, r5, lr}
  40614e:	460d      	mov	r5, r1
  406150:	4604      	mov	r4, r0
  406152:	b108      	cbz	r0, 406158 <_fflush_r+0xc>
  406154:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406156:	b1bb      	cbz	r3, 406188 <_fflush_r+0x3c>
  406158:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40615c:	b188      	cbz	r0, 406182 <_fflush_r+0x36>
  40615e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406160:	07db      	lsls	r3, r3, #31
  406162:	d401      	bmi.n	406168 <_fflush_r+0x1c>
  406164:	0581      	lsls	r1, r0, #22
  406166:	d517      	bpl.n	406198 <_fflush_r+0x4c>
  406168:	4620      	mov	r0, r4
  40616a:	4629      	mov	r1, r5
  40616c:	f7ff ff4e 	bl	40600c <__sflush_r>
  406170:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406172:	07da      	lsls	r2, r3, #31
  406174:	4604      	mov	r4, r0
  406176:	d402      	bmi.n	40617e <_fflush_r+0x32>
  406178:	89ab      	ldrh	r3, [r5, #12]
  40617a:	059b      	lsls	r3, r3, #22
  40617c:	d507      	bpl.n	40618e <_fflush_r+0x42>
  40617e:	4620      	mov	r0, r4
  406180:	bd38      	pop	{r3, r4, r5, pc}
  406182:	4604      	mov	r4, r0
  406184:	4620      	mov	r0, r4
  406186:	bd38      	pop	{r3, r4, r5, pc}
  406188:	f000 f838 	bl	4061fc <__sinit>
  40618c:	e7e4      	b.n	406158 <_fflush_r+0xc>
  40618e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406190:	f000 fbf6 	bl	406980 <__retarget_lock_release_recursive>
  406194:	4620      	mov	r0, r4
  406196:	bd38      	pop	{r3, r4, r5, pc}
  406198:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40619a:	f000 fbef 	bl	40697c <__retarget_lock_acquire_recursive>
  40619e:	e7e3      	b.n	406168 <_fflush_r+0x1c>

004061a0 <_cleanup_r>:
  4061a0:	4901      	ldr	r1, [pc, #4]	; (4061a8 <_cleanup_r+0x8>)
  4061a2:	f000 bbaf 	b.w	406904 <_fwalk_reent>
  4061a6:	bf00      	nop
  4061a8:	004079d1 	.word	0x004079d1

004061ac <std.isra.0>:
  4061ac:	b510      	push	{r4, lr}
  4061ae:	2300      	movs	r3, #0
  4061b0:	4604      	mov	r4, r0
  4061b2:	8181      	strh	r1, [r0, #12]
  4061b4:	81c2      	strh	r2, [r0, #14]
  4061b6:	6003      	str	r3, [r0, #0]
  4061b8:	6043      	str	r3, [r0, #4]
  4061ba:	6083      	str	r3, [r0, #8]
  4061bc:	6643      	str	r3, [r0, #100]	; 0x64
  4061be:	6103      	str	r3, [r0, #16]
  4061c0:	6143      	str	r3, [r0, #20]
  4061c2:	6183      	str	r3, [r0, #24]
  4061c4:	4619      	mov	r1, r3
  4061c6:	2208      	movs	r2, #8
  4061c8:	305c      	adds	r0, #92	; 0x5c
  4061ca:	f7fe fec3 	bl	404f54 <memset>
  4061ce:	4807      	ldr	r0, [pc, #28]	; (4061ec <std.isra.0+0x40>)
  4061d0:	4907      	ldr	r1, [pc, #28]	; (4061f0 <std.isra.0+0x44>)
  4061d2:	4a08      	ldr	r2, [pc, #32]	; (4061f4 <std.isra.0+0x48>)
  4061d4:	4b08      	ldr	r3, [pc, #32]	; (4061f8 <std.isra.0+0x4c>)
  4061d6:	6220      	str	r0, [r4, #32]
  4061d8:	61e4      	str	r4, [r4, #28]
  4061da:	6261      	str	r1, [r4, #36]	; 0x24
  4061dc:	62a2      	str	r2, [r4, #40]	; 0x28
  4061de:	62e3      	str	r3, [r4, #44]	; 0x2c
  4061e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4061e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4061e8:	f000 bbc4 	b.w	406974 <__retarget_lock_init_recursive>
  4061ec:	00407635 	.word	0x00407635
  4061f0:	00407659 	.word	0x00407659
  4061f4:	00407695 	.word	0x00407695
  4061f8:	004076b5 	.word	0x004076b5

004061fc <__sinit>:
  4061fc:	b510      	push	{r4, lr}
  4061fe:	4604      	mov	r4, r0
  406200:	4812      	ldr	r0, [pc, #72]	; (40624c <__sinit+0x50>)
  406202:	f000 fbbb 	bl	40697c <__retarget_lock_acquire_recursive>
  406206:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406208:	b9d2      	cbnz	r2, 406240 <__sinit+0x44>
  40620a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40620e:	4810      	ldr	r0, [pc, #64]	; (406250 <__sinit+0x54>)
  406210:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406214:	2103      	movs	r1, #3
  406216:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40621a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40621c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  406220:	6860      	ldr	r0, [r4, #4]
  406222:	2104      	movs	r1, #4
  406224:	f7ff ffc2 	bl	4061ac <std.isra.0>
  406228:	2201      	movs	r2, #1
  40622a:	2109      	movs	r1, #9
  40622c:	68a0      	ldr	r0, [r4, #8]
  40622e:	f7ff ffbd 	bl	4061ac <std.isra.0>
  406232:	2202      	movs	r2, #2
  406234:	2112      	movs	r1, #18
  406236:	68e0      	ldr	r0, [r4, #12]
  406238:	f7ff ffb8 	bl	4061ac <std.isra.0>
  40623c:	2301      	movs	r3, #1
  40623e:	63a3      	str	r3, [r4, #56]	; 0x38
  406240:	4802      	ldr	r0, [pc, #8]	; (40624c <__sinit+0x50>)
  406242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406246:	f000 bb9b 	b.w	406980 <__retarget_lock_release_recursive>
  40624a:	bf00      	nop
  40624c:	20401094 	.word	0x20401094
  406250:	004061a1 	.word	0x004061a1

00406254 <__sfp_lock_acquire>:
  406254:	4801      	ldr	r0, [pc, #4]	; (40625c <__sfp_lock_acquire+0x8>)
  406256:	f000 bb91 	b.w	40697c <__retarget_lock_acquire_recursive>
  40625a:	bf00      	nop
  40625c:	204010a8 	.word	0x204010a8

00406260 <__sfp_lock_release>:
  406260:	4801      	ldr	r0, [pc, #4]	; (406268 <__sfp_lock_release+0x8>)
  406262:	f000 bb8d 	b.w	406980 <__retarget_lock_release_recursive>
  406266:	bf00      	nop
  406268:	204010a8 	.word	0x204010a8

0040626c <__libc_fini_array>:
  40626c:	b538      	push	{r3, r4, r5, lr}
  40626e:	4c0a      	ldr	r4, [pc, #40]	; (406298 <__libc_fini_array+0x2c>)
  406270:	4d0a      	ldr	r5, [pc, #40]	; (40629c <__libc_fini_array+0x30>)
  406272:	1b64      	subs	r4, r4, r5
  406274:	10a4      	asrs	r4, r4, #2
  406276:	d00a      	beq.n	40628e <__libc_fini_array+0x22>
  406278:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40627c:	3b01      	subs	r3, #1
  40627e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406282:	3c01      	subs	r4, #1
  406284:	f855 3904 	ldr.w	r3, [r5], #-4
  406288:	4798      	blx	r3
  40628a:	2c00      	cmp	r4, #0
  40628c:	d1f9      	bne.n	406282 <__libc_fini_array+0x16>
  40628e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406292:	f002 b89b 	b.w	4083cc <_fini>
  406296:	bf00      	nop
  406298:	004083dc 	.word	0x004083dc
  40629c:	004083d8 	.word	0x004083d8

004062a0 <__fputwc>:
  4062a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4062a4:	b082      	sub	sp, #8
  4062a6:	4680      	mov	r8, r0
  4062a8:	4689      	mov	r9, r1
  4062aa:	4614      	mov	r4, r2
  4062ac:	f000 fb54 	bl	406958 <__locale_mb_cur_max>
  4062b0:	2801      	cmp	r0, #1
  4062b2:	d036      	beq.n	406322 <__fputwc+0x82>
  4062b4:	464a      	mov	r2, r9
  4062b6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4062ba:	a901      	add	r1, sp, #4
  4062bc:	4640      	mov	r0, r8
  4062be:	f001 fac5 	bl	40784c <_wcrtomb_r>
  4062c2:	1c42      	adds	r2, r0, #1
  4062c4:	4606      	mov	r6, r0
  4062c6:	d025      	beq.n	406314 <__fputwc+0x74>
  4062c8:	b3a8      	cbz	r0, 406336 <__fputwc+0x96>
  4062ca:	f89d e004 	ldrb.w	lr, [sp, #4]
  4062ce:	2500      	movs	r5, #0
  4062d0:	f10d 0a04 	add.w	sl, sp, #4
  4062d4:	e009      	b.n	4062ea <__fputwc+0x4a>
  4062d6:	6823      	ldr	r3, [r4, #0]
  4062d8:	1c5a      	adds	r2, r3, #1
  4062da:	6022      	str	r2, [r4, #0]
  4062dc:	f883 e000 	strb.w	lr, [r3]
  4062e0:	3501      	adds	r5, #1
  4062e2:	42b5      	cmp	r5, r6
  4062e4:	d227      	bcs.n	406336 <__fputwc+0x96>
  4062e6:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4062ea:	68a3      	ldr	r3, [r4, #8]
  4062ec:	3b01      	subs	r3, #1
  4062ee:	2b00      	cmp	r3, #0
  4062f0:	60a3      	str	r3, [r4, #8]
  4062f2:	daf0      	bge.n	4062d6 <__fputwc+0x36>
  4062f4:	69a7      	ldr	r7, [r4, #24]
  4062f6:	42bb      	cmp	r3, r7
  4062f8:	4671      	mov	r1, lr
  4062fa:	4622      	mov	r2, r4
  4062fc:	4640      	mov	r0, r8
  4062fe:	db02      	blt.n	406306 <__fputwc+0x66>
  406300:	f1be 0f0a 	cmp.w	lr, #10
  406304:	d1e7      	bne.n	4062d6 <__fputwc+0x36>
  406306:	f001 fa49 	bl	40779c <__swbuf_r>
  40630a:	1c43      	adds	r3, r0, #1
  40630c:	d1e8      	bne.n	4062e0 <__fputwc+0x40>
  40630e:	b002      	add	sp, #8
  406310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406314:	89a3      	ldrh	r3, [r4, #12]
  406316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40631a:	81a3      	strh	r3, [r4, #12]
  40631c:	b002      	add	sp, #8
  40631e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406322:	f109 33ff 	add.w	r3, r9, #4294967295
  406326:	2bfe      	cmp	r3, #254	; 0xfe
  406328:	d8c4      	bhi.n	4062b4 <__fputwc+0x14>
  40632a:	fa5f fe89 	uxtb.w	lr, r9
  40632e:	4606      	mov	r6, r0
  406330:	f88d e004 	strb.w	lr, [sp, #4]
  406334:	e7cb      	b.n	4062ce <__fputwc+0x2e>
  406336:	4648      	mov	r0, r9
  406338:	b002      	add	sp, #8
  40633a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40633e:	bf00      	nop

00406340 <_fputwc_r>:
  406340:	b530      	push	{r4, r5, lr}
  406342:	6e53      	ldr	r3, [r2, #100]	; 0x64
  406344:	f013 0f01 	tst.w	r3, #1
  406348:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40634c:	4614      	mov	r4, r2
  40634e:	b083      	sub	sp, #12
  406350:	4605      	mov	r5, r0
  406352:	b29a      	uxth	r2, r3
  406354:	d101      	bne.n	40635a <_fputwc_r+0x1a>
  406356:	0590      	lsls	r0, r2, #22
  406358:	d51c      	bpl.n	406394 <_fputwc_r+0x54>
  40635a:	0490      	lsls	r0, r2, #18
  40635c:	d406      	bmi.n	40636c <_fputwc_r+0x2c>
  40635e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  406360:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406368:	81a3      	strh	r3, [r4, #12]
  40636a:	6662      	str	r2, [r4, #100]	; 0x64
  40636c:	4628      	mov	r0, r5
  40636e:	4622      	mov	r2, r4
  406370:	f7ff ff96 	bl	4062a0 <__fputwc>
  406374:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406376:	07da      	lsls	r2, r3, #31
  406378:	4605      	mov	r5, r0
  40637a:	d402      	bmi.n	406382 <_fputwc_r+0x42>
  40637c:	89a3      	ldrh	r3, [r4, #12]
  40637e:	059b      	lsls	r3, r3, #22
  406380:	d502      	bpl.n	406388 <_fputwc_r+0x48>
  406382:	4628      	mov	r0, r5
  406384:	b003      	add	sp, #12
  406386:	bd30      	pop	{r4, r5, pc}
  406388:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40638a:	f000 faf9 	bl	406980 <__retarget_lock_release_recursive>
  40638e:	4628      	mov	r0, r5
  406390:	b003      	add	sp, #12
  406392:	bd30      	pop	{r4, r5, pc}
  406394:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406396:	9101      	str	r1, [sp, #4]
  406398:	f000 faf0 	bl	40697c <__retarget_lock_acquire_recursive>
  40639c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4063a0:	9901      	ldr	r1, [sp, #4]
  4063a2:	b29a      	uxth	r2, r3
  4063a4:	e7d9      	b.n	40635a <_fputwc_r+0x1a>
  4063a6:	bf00      	nop

004063a8 <_malloc_trim_r>:
  4063a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4063aa:	4f24      	ldr	r7, [pc, #144]	; (40643c <_malloc_trim_r+0x94>)
  4063ac:	460c      	mov	r4, r1
  4063ae:	4606      	mov	r6, r0
  4063b0:	f000 ff7c 	bl	4072ac <__malloc_lock>
  4063b4:	68bb      	ldr	r3, [r7, #8]
  4063b6:	685d      	ldr	r5, [r3, #4]
  4063b8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4063bc:	310f      	adds	r1, #15
  4063be:	f025 0503 	bic.w	r5, r5, #3
  4063c2:	4429      	add	r1, r5
  4063c4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4063c8:	f021 010f 	bic.w	r1, r1, #15
  4063cc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4063d0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4063d4:	db07      	blt.n	4063e6 <_malloc_trim_r+0x3e>
  4063d6:	2100      	movs	r1, #0
  4063d8:	4630      	mov	r0, r6
  4063da:	f001 f919 	bl	407610 <_sbrk_r>
  4063de:	68bb      	ldr	r3, [r7, #8]
  4063e0:	442b      	add	r3, r5
  4063e2:	4298      	cmp	r0, r3
  4063e4:	d004      	beq.n	4063f0 <_malloc_trim_r+0x48>
  4063e6:	4630      	mov	r0, r6
  4063e8:	f000 ff66 	bl	4072b8 <__malloc_unlock>
  4063ec:	2000      	movs	r0, #0
  4063ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4063f0:	4261      	negs	r1, r4
  4063f2:	4630      	mov	r0, r6
  4063f4:	f001 f90c 	bl	407610 <_sbrk_r>
  4063f8:	3001      	adds	r0, #1
  4063fa:	d00d      	beq.n	406418 <_malloc_trim_r+0x70>
  4063fc:	4b10      	ldr	r3, [pc, #64]	; (406440 <_malloc_trim_r+0x98>)
  4063fe:	68ba      	ldr	r2, [r7, #8]
  406400:	6819      	ldr	r1, [r3, #0]
  406402:	1b2d      	subs	r5, r5, r4
  406404:	f045 0501 	orr.w	r5, r5, #1
  406408:	4630      	mov	r0, r6
  40640a:	1b09      	subs	r1, r1, r4
  40640c:	6055      	str	r5, [r2, #4]
  40640e:	6019      	str	r1, [r3, #0]
  406410:	f000 ff52 	bl	4072b8 <__malloc_unlock>
  406414:	2001      	movs	r0, #1
  406416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406418:	2100      	movs	r1, #0
  40641a:	4630      	mov	r0, r6
  40641c:	f001 f8f8 	bl	407610 <_sbrk_r>
  406420:	68ba      	ldr	r2, [r7, #8]
  406422:	1a83      	subs	r3, r0, r2
  406424:	2b0f      	cmp	r3, #15
  406426:	ddde      	ble.n	4063e6 <_malloc_trim_r+0x3e>
  406428:	4c06      	ldr	r4, [pc, #24]	; (406444 <_malloc_trim_r+0x9c>)
  40642a:	4905      	ldr	r1, [pc, #20]	; (406440 <_malloc_trim_r+0x98>)
  40642c:	6824      	ldr	r4, [r4, #0]
  40642e:	f043 0301 	orr.w	r3, r3, #1
  406432:	1b00      	subs	r0, r0, r4
  406434:	6053      	str	r3, [r2, #4]
  406436:	6008      	str	r0, [r1, #0]
  406438:	e7d5      	b.n	4063e6 <_malloc_trim_r+0x3e>
  40643a:	bf00      	nop
  40643c:	20400670 	.word	0x20400670
  406440:	20400c14 	.word	0x20400c14
  406444:	20400a78 	.word	0x20400a78

00406448 <_free_r>:
  406448:	2900      	cmp	r1, #0
  40644a:	d044      	beq.n	4064d6 <_free_r+0x8e>
  40644c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406450:	460d      	mov	r5, r1
  406452:	4680      	mov	r8, r0
  406454:	f000 ff2a 	bl	4072ac <__malloc_lock>
  406458:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40645c:	4969      	ldr	r1, [pc, #420]	; (406604 <_free_r+0x1bc>)
  40645e:	f027 0301 	bic.w	r3, r7, #1
  406462:	f1a5 0408 	sub.w	r4, r5, #8
  406466:	18e2      	adds	r2, r4, r3
  406468:	688e      	ldr	r6, [r1, #8]
  40646a:	6850      	ldr	r0, [r2, #4]
  40646c:	42b2      	cmp	r2, r6
  40646e:	f020 0003 	bic.w	r0, r0, #3
  406472:	d05e      	beq.n	406532 <_free_r+0xea>
  406474:	07fe      	lsls	r6, r7, #31
  406476:	6050      	str	r0, [r2, #4]
  406478:	d40b      	bmi.n	406492 <_free_r+0x4a>
  40647a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40647e:	1be4      	subs	r4, r4, r7
  406480:	f101 0e08 	add.w	lr, r1, #8
  406484:	68a5      	ldr	r5, [r4, #8]
  406486:	4575      	cmp	r5, lr
  406488:	443b      	add	r3, r7
  40648a:	d06d      	beq.n	406568 <_free_r+0x120>
  40648c:	68e7      	ldr	r7, [r4, #12]
  40648e:	60ef      	str	r7, [r5, #12]
  406490:	60bd      	str	r5, [r7, #8]
  406492:	1815      	adds	r5, r2, r0
  406494:	686d      	ldr	r5, [r5, #4]
  406496:	07ed      	lsls	r5, r5, #31
  406498:	d53e      	bpl.n	406518 <_free_r+0xd0>
  40649a:	f043 0201 	orr.w	r2, r3, #1
  40649e:	6062      	str	r2, [r4, #4]
  4064a0:	50e3      	str	r3, [r4, r3]
  4064a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4064a6:	d217      	bcs.n	4064d8 <_free_r+0x90>
  4064a8:	08db      	lsrs	r3, r3, #3
  4064aa:	1c58      	adds	r0, r3, #1
  4064ac:	109a      	asrs	r2, r3, #2
  4064ae:	684d      	ldr	r5, [r1, #4]
  4064b0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4064b4:	60a7      	str	r7, [r4, #8]
  4064b6:	2301      	movs	r3, #1
  4064b8:	4093      	lsls	r3, r2
  4064ba:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4064be:	432b      	orrs	r3, r5
  4064c0:	3a08      	subs	r2, #8
  4064c2:	60e2      	str	r2, [r4, #12]
  4064c4:	604b      	str	r3, [r1, #4]
  4064c6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4064ca:	60fc      	str	r4, [r7, #12]
  4064cc:	4640      	mov	r0, r8
  4064ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4064d2:	f000 bef1 	b.w	4072b8 <__malloc_unlock>
  4064d6:	4770      	bx	lr
  4064d8:	0a5a      	lsrs	r2, r3, #9
  4064da:	2a04      	cmp	r2, #4
  4064dc:	d852      	bhi.n	406584 <_free_r+0x13c>
  4064de:	099a      	lsrs	r2, r3, #6
  4064e0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4064e4:	00ff      	lsls	r7, r7, #3
  4064e6:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4064ea:	19c8      	adds	r0, r1, r7
  4064ec:	59ca      	ldr	r2, [r1, r7]
  4064ee:	3808      	subs	r0, #8
  4064f0:	4290      	cmp	r0, r2
  4064f2:	d04f      	beq.n	406594 <_free_r+0x14c>
  4064f4:	6851      	ldr	r1, [r2, #4]
  4064f6:	f021 0103 	bic.w	r1, r1, #3
  4064fa:	428b      	cmp	r3, r1
  4064fc:	d232      	bcs.n	406564 <_free_r+0x11c>
  4064fe:	6892      	ldr	r2, [r2, #8]
  406500:	4290      	cmp	r0, r2
  406502:	d1f7      	bne.n	4064f4 <_free_r+0xac>
  406504:	68c3      	ldr	r3, [r0, #12]
  406506:	60a0      	str	r0, [r4, #8]
  406508:	60e3      	str	r3, [r4, #12]
  40650a:	609c      	str	r4, [r3, #8]
  40650c:	60c4      	str	r4, [r0, #12]
  40650e:	4640      	mov	r0, r8
  406510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406514:	f000 bed0 	b.w	4072b8 <__malloc_unlock>
  406518:	6895      	ldr	r5, [r2, #8]
  40651a:	4f3b      	ldr	r7, [pc, #236]	; (406608 <_free_r+0x1c0>)
  40651c:	42bd      	cmp	r5, r7
  40651e:	4403      	add	r3, r0
  406520:	d040      	beq.n	4065a4 <_free_r+0x15c>
  406522:	68d0      	ldr	r0, [r2, #12]
  406524:	60e8      	str	r0, [r5, #12]
  406526:	f043 0201 	orr.w	r2, r3, #1
  40652a:	6085      	str	r5, [r0, #8]
  40652c:	6062      	str	r2, [r4, #4]
  40652e:	50e3      	str	r3, [r4, r3]
  406530:	e7b7      	b.n	4064a2 <_free_r+0x5a>
  406532:	07ff      	lsls	r7, r7, #31
  406534:	4403      	add	r3, r0
  406536:	d407      	bmi.n	406548 <_free_r+0x100>
  406538:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40653c:	1aa4      	subs	r4, r4, r2
  40653e:	4413      	add	r3, r2
  406540:	68a0      	ldr	r0, [r4, #8]
  406542:	68e2      	ldr	r2, [r4, #12]
  406544:	60c2      	str	r2, [r0, #12]
  406546:	6090      	str	r0, [r2, #8]
  406548:	4a30      	ldr	r2, [pc, #192]	; (40660c <_free_r+0x1c4>)
  40654a:	6812      	ldr	r2, [r2, #0]
  40654c:	f043 0001 	orr.w	r0, r3, #1
  406550:	4293      	cmp	r3, r2
  406552:	6060      	str	r0, [r4, #4]
  406554:	608c      	str	r4, [r1, #8]
  406556:	d3b9      	bcc.n	4064cc <_free_r+0x84>
  406558:	4b2d      	ldr	r3, [pc, #180]	; (406610 <_free_r+0x1c8>)
  40655a:	4640      	mov	r0, r8
  40655c:	6819      	ldr	r1, [r3, #0]
  40655e:	f7ff ff23 	bl	4063a8 <_malloc_trim_r>
  406562:	e7b3      	b.n	4064cc <_free_r+0x84>
  406564:	4610      	mov	r0, r2
  406566:	e7cd      	b.n	406504 <_free_r+0xbc>
  406568:	1811      	adds	r1, r2, r0
  40656a:	6849      	ldr	r1, [r1, #4]
  40656c:	07c9      	lsls	r1, r1, #31
  40656e:	d444      	bmi.n	4065fa <_free_r+0x1b2>
  406570:	6891      	ldr	r1, [r2, #8]
  406572:	68d2      	ldr	r2, [r2, #12]
  406574:	60ca      	str	r2, [r1, #12]
  406576:	4403      	add	r3, r0
  406578:	f043 0001 	orr.w	r0, r3, #1
  40657c:	6091      	str	r1, [r2, #8]
  40657e:	6060      	str	r0, [r4, #4]
  406580:	50e3      	str	r3, [r4, r3]
  406582:	e7a3      	b.n	4064cc <_free_r+0x84>
  406584:	2a14      	cmp	r2, #20
  406586:	d816      	bhi.n	4065b6 <_free_r+0x16e>
  406588:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40658c:	00ff      	lsls	r7, r7, #3
  40658e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406592:	e7aa      	b.n	4064ea <_free_r+0xa2>
  406594:	10aa      	asrs	r2, r5, #2
  406596:	2301      	movs	r3, #1
  406598:	684d      	ldr	r5, [r1, #4]
  40659a:	4093      	lsls	r3, r2
  40659c:	432b      	orrs	r3, r5
  40659e:	604b      	str	r3, [r1, #4]
  4065a0:	4603      	mov	r3, r0
  4065a2:	e7b0      	b.n	406506 <_free_r+0xbe>
  4065a4:	f043 0201 	orr.w	r2, r3, #1
  4065a8:	614c      	str	r4, [r1, #20]
  4065aa:	610c      	str	r4, [r1, #16]
  4065ac:	60e5      	str	r5, [r4, #12]
  4065ae:	60a5      	str	r5, [r4, #8]
  4065b0:	6062      	str	r2, [r4, #4]
  4065b2:	50e3      	str	r3, [r4, r3]
  4065b4:	e78a      	b.n	4064cc <_free_r+0x84>
  4065b6:	2a54      	cmp	r2, #84	; 0x54
  4065b8:	d806      	bhi.n	4065c8 <_free_r+0x180>
  4065ba:	0b1a      	lsrs	r2, r3, #12
  4065bc:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4065c0:	00ff      	lsls	r7, r7, #3
  4065c2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4065c6:	e790      	b.n	4064ea <_free_r+0xa2>
  4065c8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4065cc:	d806      	bhi.n	4065dc <_free_r+0x194>
  4065ce:	0bda      	lsrs	r2, r3, #15
  4065d0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4065d4:	00ff      	lsls	r7, r7, #3
  4065d6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4065da:	e786      	b.n	4064ea <_free_r+0xa2>
  4065dc:	f240 5054 	movw	r0, #1364	; 0x554
  4065e0:	4282      	cmp	r2, r0
  4065e2:	d806      	bhi.n	4065f2 <_free_r+0x1aa>
  4065e4:	0c9a      	lsrs	r2, r3, #18
  4065e6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4065ea:	00ff      	lsls	r7, r7, #3
  4065ec:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4065f0:	e77b      	b.n	4064ea <_free_r+0xa2>
  4065f2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4065f6:	257e      	movs	r5, #126	; 0x7e
  4065f8:	e777      	b.n	4064ea <_free_r+0xa2>
  4065fa:	f043 0101 	orr.w	r1, r3, #1
  4065fe:	6061      	str	r1, [r4, #4]
  406600:	6013      	str	r3, [r2, #0]
  406602:	e763      	b.n	4064cc <_free_r+0x84>
  406604:	20400670 	.word	0x20400670
  406608:	20400678 	.word	0x20400678
  40660c:	20400a7c 	.word	0x20400a7c
  406610:	20400c44 	.word	0x20400c44

00406614 <__sfvwrite_r>:
  406614:	6893      	ldr	r3, [r2, #8]
  406616:	2b00      	cmp	r3, #0
  406618:	d073      	beq.n	406702 <__sfvwrite_r+0xee>
  40661a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40661e:	898b      	ldrh	r3, [r1, #12]
  406620:	b083      	sub	sp, #12
  406622:	460c      	mov	r4, r1
  406624:	0719      	lsls	r1, r3, #28
  406626:	9000      	str	r0, [sp, #0]
  406628:	4616      	mov	r6, r2
  40662a:	d526      	bpl.n	40667a <__sfvwrite_r+0x66>
  40662c:	6922      	ldr	r2, [r4, #16]
  40662e:	b322      	cbz	r2, 40667a <__sfvwrite_r+0x66>
  406630:	f013 0002 	ands.w	r0, r3, #2
  406634:	6835      	ldr	r5, [r6, #0]
  406636:	d02c      	beq.n	406692 <__sfvwrite_r+0x7e>
  406638:	f04f 0900 	mov.w	r9, #0
  40663c:	4fb0      	ldr	r7, [pc, #704]	; (406900 <__sfvwrite_r+0x2ec>)
  40663e:	46c8      	mov	r8, r9
  406640:	46b2      	mov	sl, r6
  406642:	45b8      	cmp	r8, r7
  406644:	4643      	mov	r3, r8
  406646:	464a      	mov	r2, r9
  406648:	bf28      	it	cs
  40664a:	463b      	movcs	r3, r7
  40664c:	9800      	ldr	r0, [sp, #0]
  40664e:	f1b8 0f00 	cmp.w	r8, #0
  406652:	d050      	beq.n	4066f6 <__sfvwrite_r+0xe2>
  406654:	69e1      	ldr	r1, [r4, #28]
  406656:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406658:	47b0      	blx	r6
  40665a:	2800      	cmp	r0, #0
  40665c:	dd58      	ble.n	406710 <__sfvwrite_r+0xfc>
  40665e:	f8da 3008 	ldr.w	r3, [sl, #8]
  406662:	1a1b      	subs	r3, r3, r0
  406664:	4481      	add	r9, r0
  406666:	eba8 0800 	sub.w	r8, r8, r0
  40666a:	f8ca 3008 	str.w	r3, [sl, #8]
  40666e:	2b00      	cmp	r3, #0
  406670:	d1e7      	bne.n	406642 <__sfvwrite_r+0x2e>
  406672:	2000      	movs	r0, #0
  406674:	b003      	add	sp, #12
  406676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40667a:	4621      	mov	r1, r4
  40667c:	9800      	ldr	r0, [sp, #0]
  40667e:	f7ff fc51 	bl	405f24 <__swsetup_r>
  406682:	2800      	cmp	r0, #0
  406684:	f040 8133 	bne.w	4068ee <__sfvwrite_r+0x2da>
  406688:	89a3      	ldrh	r3, [r4, #12]
  40668a:	6835      	ldr	r5, [r6, #0]
  40668c:	f013 0002 	ands.w	r0, r3, #2
  406690:	d1d2      	bne.n	406638 <__sfvwrite_r+0x24>
  406692:	f013 0901 	ands.w	r9, r3, #1
  406696:	d145      	bne.n	406724 <__sfvwrite_r+0x110>
  406698:	464f      	mov	r7, r9
  40669a:	9601      	str	r6, [sp, #4]
  40669c:	b337      	cbz	r7, 4066ec <__sfvwrite_r+0xd8>
  40669e:	059a      	lsls	r2, r3, #22
  4066a0:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4066a4:	f140 8083 	bpl.w	4067ae <__sfvwrite_r+0x19a>
  4066a8:	4547      	cmp	r7, r8
  4066aa:	46c3      	mov	fp, r8
  4066ac:	f0c0 80ab 	bcc.w	406806 <__sfvwrite_r+0x1f2>
  4066b0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4066b4:	f040 80ac 	bne.w	406810 <__sfvwrite_r+0x1fc>
  4066b8:	6820      	ldr	r0, [r4, #0]
  4066ba:	46ba      	mov	sl, r7
  4066bc:	465a      	mov	r2, fp
  4066be:	4649      	mov	r1, r9
  4066c0:	f000 fd90 	bl	4071e4 <memmove>
  4066c4:	68a2      	ldr	r2, [r4, #8]
  4066c6:	6823      	ldr	r3, [r4, #0]
  4066c8:	eba2 0208 	sub.w	r2, r2, r8
  4066cc:	445b      	add	r3, fp
  4066ce:	60a2      	str	r2, [r4, #8]
  4066d0:	6023      	str	r3, [r4, #0]
  4066d2:	9a01      	ldr	r2, [sp, #4]
  4066d4:	6893      	ldr	r3, [r2, #8]
  4066d6:	eba3 030a 	sub.w	r3, r3, sl
  4066da:	44d1      	add	r9, sl
  4066dc:	eba7 070a 	sub.w	r7, r7, sl
  4066e0:	6093      	str	r3, [r2, #8]
  4066e2:	2b00      	cmp	r3, #0
  4066e4:	d0c5      	beq.n	406672 <__sfvwrite_r+0x5e>
  4066e6:	89a3      	ldrh	r3, [r4, #12]
  4066e8:	2f00      	cmp	r7, #0
  4066ea:	d1d8      	bne.n	40669e <__sfvwrite_r+0x8a>
  4066ec:	f8d5 9000 	ldr.w	r9, [r5]
  4066f0:	686f      	ldr	r7, [r5, #4]
  4066f2:	3508      	adds	r5, #8
  4066f4:	e7d2      	b.n	40669c <__sfvwrite_r+0x88>
  4066f6:	f8d5 9000 	ldr.w	r9, [r5]
  4066fa:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4066fe:	3508      	adds	r5, #8
  406700:	e79f      	b.n	406642 <__sfvwrite_r+0x2e>
  406702:	2000      	movs	r0, #0
  406704:	4770      	bx	lr
  406706:	4621      	mov	r1, r4
  406708:	9800      	ldr	r0, [sp, #0]
  40670a:	f7ff fd1f 	bl	40614c <_fflush_r>
  40670e:	b370      	cbz	r0, 40676e <__sfvwrite_r+0x15a>
  406710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406718:	f04f 30ff 	mov.w	r0, #4294967295
  40671c:	81a3      	strh	r3, [r4, #12]
  40671e:	b003      	add	sp, #12
  406720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406724:	4681      	mov	r9, r0
  406726:	4633      	mov	r3, r6
  406728:	464e      	mov	r6, r9
  40672a:	46a8      	mov	r8, r5
  40672c:	469a      	mov	sl, r3
  40672e:	464d      	mov	r5, r9
  406730:	b34e      	cbz	r6, 406786 <__sfvwrite_r+0x172>
  406732:	b380      	cbz	r0, 406796 <__sfvwrite_r+0x182>
  406734:	6820      	ldr	r0, [r4, #0]
  406736:	6923      	ldr	r3, [r4, #16]
  406738:	6962      	ldr	r2, [r4, #20]
  40673a:	45b1      	cmp	r9, r6
  40673c:	46cb      	mov	fp, r9
  40673e:	bf28      	it	cs
  406740:	46b3      	movcs	fp, r6
  406742:	4298      	cmp	r0, r3
  406744:	465f      	mov	r7, fp
  406746:	d904      	bls.n	406752 <__sfvwrite_r+0x13e>
  406748:	68a3      	ldr	r3, [r4, #8]
  40674a:	4413      	add	r3, r2
  40674c:	459b      	cmp	fp, r3
  40674e:	f300 80a6 	bgt.w	40689e <__sfvwrite_r+0x28a>
  406752:	4593      	cmp	fp, r2
  406754:	db4b      	blt.n	4067ee <__sfvwrite_r+0x1da>
  406756:	4613      	mov	r3, r2
  406758:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40675a:	69e1      	ldr	r1, [r4, #28]
  40675c:	9800      	ldr	r0, [sp, #0]
  40675e:	462a      	mov	r2, r5
  406760:	47b8      	blx	r7
  406762:	1e07      	subs	r7, r0, #0
  406764:	ddd4      	ble.n	406710 <__sfvwrite_r+0xfc>
  406766:	ebb9 0907 	subs.w	r9, r9, r7
  40676a:	d0cc      	beq.n	406706 <__sfvwrite_r+0xf2>
  40676c:	2001      	movs	r0, #1
  40676e:	f8da 3008 	ldr.w	r3, [sl, #8]
  406772:	1bdb      	subs	r3, r3, r7
  406774:	443d      	add	r5, r7
  406776:	1bf6      	subs	r6, r6, r7
  406778:	f8ca 3008 	str.w	r3, [sl, #8]
  40677c:	2b00      	cmp	r3, #0
  40677e:	f43f af78 	beq.w	406672 <__sfvwrite_r+0x5e>
  406782:	2e00      	cmp	r6, #0
  406784:	d1d5      	bne.n	406732 <__sfvwrite_r+0x11e>
  406786:	f108 0308 	add.w	r3, r8, #8
  40678a:	e913 0060 	ldmdb	r3, {r5, r6}
  40678e:	4698      	mov	r8, r3
  406790:	3308      	adds	r3, #8
  406792:	2e00      	cmp	r6, #0
  406794:	d0f9      	beq.n	40678a <__sfvwrite_r+0x176>
  406796:	4632      	mov	r2, r6
  406798:	210a      	movs	r1, #10
  40679a:	4628      	mov	r0, r5
  40679c:	f000 fc38 	bl	407010 <memchr>
  4067a0:	2800      	cmp	r0, #0
  4067a2:	f000 80a1 	beq.w	4068e8 <__sfvwrite_r+0x2d4>
  4067a6:	3001      	adds	r0, #1
  4067a8:	eba0 0905 	sub.w	r9, r0, r5
  4067ac:	e7c2      	b.n	406734 <__sfvwrite_r+0x120>
  4067ae:	6820      	ldr	r0, [r4, #0]
  4067b0:	6923      	ldr	r3, [r4, #16]
  4067b2:	4298      	cmp	r0, r3
  4067b4:	d802      	bhi.n	4067bc <__sfvwrite_r+0x1a8>
  4067b6:	6963      	ldr	r3, [r4, #20]
  4067b8:	429f      	cmp	r7, r3
  4067ba:	d25d      	bcs.n	406878 <__sfvwrite_r+0x264>
  4067bc:	45b8      	cmp	r8, r7
  4067be:	bf28      	it	cs
  4067c0:	46b8      	movcs	r8, r7
  4067c2:	4642      	mov	r2, r8
  4067c4:	4649      	mov	r1, r9
  4067c6:	f000 fd0d 	bl	4071e4 <memmove>
  4067ca:	68a3      	ldr	r3, [r4, #8]
  4067cc:	6822      	ldr	r2, [r4, #0]
  4067ce:	eba3 0308 	sub.w	r3, r3, r8
  4067d2:	4442      	add	r2, r8
  4067d4:	60a3      	str	r3, [r4, #8]
  4067d6:	6022      	str	r2, [r4, #0]
  4067d8:	b10b      	cbz	r3, 4067de <__sfvwrite_r+0x1ca>
  4067da:	46c2      	mov	sl, r8
  4067dc:	e779      	b.n	4066d2 <__sfvwrite_r+0xbe>
  4067de:	4621      	mov	r1, r4
  4067e0:	9800      	ldr	r0, [sp, #0]
  4067e2:	f7ff fcb3 	bl	40614c <_fflush_r>
  4067e6:	2800      	cmp	r0, #0
  4067e8:	d192      	bne.n	406710 <__sfvwrite_r+0xfc>
  4067ea:	46c2      	mov	sl, r8
  4067ec:	e771      	b.n	4066d2 <__sfvwrite_r+0xbe>
  4067ee:	465a      	mov	r2, fp
  4067f0:	4629      	mov	r1, r5
  4067f2:	f000 fcf7 	bl	4071e4 <memmove>
  4067f6:	68a2      	ldr	r2, [r4, #8]
  4067f8:	6823      	ldr	r3, [r4, #0]
  4067fa:	eba2 020b 	sub.w	r2, r2, fp
  4067fe:	445b      	add	r3, fp
  406800:	60a2      	str	r2, [r4, #8]
  406802:	6023      	str	r3, [r4, #0]
  406804:	e7af      	b.n	406766 <__sfvwrite_r+0x152>
  406806:	6820      	ldr	r0, [r4, #0]
  406808:	46b8      	mov	r8, r7
  40680a:	46ba      	mov	sl, r7
  40680c:	46bb      	mov	fp, r7
  40680e:	e755      	b.n	4066bc <__sfvwrite_r+0xa8>
  406810:	6962      	ldr	r2, [r4, #20]
  406812:	6820      	ldr	r0, [r4, #0]
  406814:	6921      	ldr	r1, [r4, #16]
  406816:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40681a:	eba0 0a01 	sub.w	sl, r0, r1
  40681e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  406822:	f10a 0001 	add.w	r0, sl, #1
  406826:	ea4f 0868 	mov.w	r8, r8, asr #1
  40682a:	4438      	add	r0, r7
  40682c:	4540      	cmp	r0, r8
  40682e:	4642      	mov	r2, r8
  406830:	bf84      	itt	hi
  406832:	4680      	movhi	r8, r0
  406834:	4642      	movhi	r2, r8
  406836:	055b      	lsls	r3, r3, #21
  406838:	d544      	bpl.n	4068c4 <__sfvwrite_r+0x2b0>
  40683a:	4611      	mov	r1, r2
  40683c:	9800      	ldr	r0, [sp, #0]
  40683e:	f000 f921 	bl	406a84 <_malloc_r>
  406842:	4683      	mov	fp, r0
  406844:	2800      	cmp	r0, #0
  406846:	d055      	beq.n	4068f4 <__sfvwrite_r+0x2e0>
  406848:	4652      	mov	r2, sl
  40684a:	6921      	ldr	r1, [r4, #16]
  40684c:	f000 fc30 	bl	4070b0 <memcpy>
  406850:	89a3      	ldrh	r3, [r4, #12]
  406852:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  406856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40685a:	81a3      	strh	r3, [r4, #12]
  40685c:	eb0b 000a 	add.w	r0, fp, sl
  406860:	eba8 030a 	sub.w	r3, r8, sl
  406864:	f8c4 b010 	str.w	fp, [r4, #16]
  406868:	f8c4 8014 	str.w	r8, [r4, #20]
  40686c:	6020      	str	r0, [r4, #0]
  40686e:	60a3      	str	r3, [r4, #8]
  406870:	46b8      	mov	r8, r7
  406872:	46ba      	mov	sl, r7
  406874:	46bb      	mov	fp, r7
  406876:	e721      	b.n	4066bc <__sfvwrite_r+0xa8>
  406878:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40687c:	42b9      	cmp	r1, r7
  40687e:	bf28      	it	cs
  406880:	4639      	movcs	r1, r7
  406882:	464a      	mov	r2, r9
  406884:	fb91 f1f3 	sdiv	r1, r1, r3
  406888:	9800      	ldr	r0, [sp, #0]
  40688a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40688c:	fb03 f301 	mul.w	r3, r3, r1
  406890:	69e1      	ldr	r1, [r4, #28]
  406892:	47b0      	blx	r6
  406894:	f1b0 0a00 	subs.w	sl, r0, #0
  406898:	f73f af1b 	bgt.w	4066d2 <__sfvwrite_r+0xbe>
  40689c:	e738      	b.n	406710 <__sfvwrite_r+0xfc>
  40689e:	461a      	mov	r2, r3
  4068a0:	4629      	mov	r1, r5
  4068a2:	9301      	str	r3, [sp, #4]
  4068a4:	f000 fc9e 	bl	4071e4 <memmove>
  4068a8:	6822      	ldr	r2, [r4, #0]
  4068aa:	9b01      	ldr	r3, [sp, #4]
  4068ac:	9800      	ldr	r0, [sp, #0]
  4068ae:	441a      	add	r2, r3
  4068b0:	6022      	str	r2, [r4, #0]
  4068b2:	4621      	mov	r1, r4
  4068b4:	f7ff fc4a 	bl	40614c <_fflush_r>
  4068b8:	9b01      	ldr	r3, [sp, #4]
  4068ba:	2800      	cmp	r0, #0
  4068bc:	f47f af28 	bne.w	406710 <__sfvwrite_r+0xfc>
  4068c0:	461f      	mov	r7, r3
  4068c2:	e750      	b.n	406766 <__sfvwrite_r+0x152>
  4068c4:	9800      	ldr	r0, [sp, #0]
  4068c6:	f000 fcfd 	bl	4072c4 <_realloc_r>
  4068ca:	4683      	mov	fp, r0
  4068cc:	2800      	cmp	r0, #0
  4068ce:	d1c5      	bne.n	40685c <__sfvwrite_r+0x248>
  4068d0:	9d00      	ldr	r5, [sp, #0]
  4068d2:	6921      	ldr	r1, [r4, #16]
  4068d4:	4628      	mov	r0, r5
  4068d6:	f7ff fdb7 	bl	406448 <_free_r>
  4068da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4068de:	220c      	movs	r2, #12
  4068e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4068e4:	602a      	str	r2, [r5, #0]
  4068e6:	e715      	b.n	406714 <__sfvwrite_r+0x100>
  4068e8:	f106 0901 	add.w	r9, r6, #1
  4068ec:	e722      	b.n	406734 <__sfvwrite_r+0x120>
  4068ee:	f04f 30ff 	mov.w	r0, #4294967295
  4068f2:	e6bf      	b.n	406674 <__sfvwrite_r+0x60>
  4068f4:	9a00      	ldr	r2, [sp, #0]
  4068f6:	230c      	movs	r3, #12
  4068f8:	6013      	str	r3, [r2, #0]
  4068fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4068fe:	e709      	b.n	406714 <__sfvwrite_r+0x100>
  406900:	7ffffc00 	.word	0x7ffffc00

00406904 <_fwalk_reent>:
  406904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406908:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40690c:	d01f      	beq.n	40694e <_fwalk_reent+0x4a>
  40690e:	4688      	mov	r8, r1
  406910:	4606      	mov	r6, r0
  406912:	f04f 0900 	mov.w	r9, #0
  406916:	687d      	ldr	r5, [r7, #4]
  406918:	68bc      	ldr	r4, [r7, #8]
  40691a:	3d01      	subs	r5, #1
  40691c:	d411      	bmi.n	406942 <_fwalk_reent+0x3e>
  40691e:	89a3      	ldrh	r3, [r4, #12]
  406920:	2b01      	cmp	r3, #1
  406922:	f105 35ff 	add.w	r5, r5, #4294967295
  406926:	d908      	bls.n	40693a <_fwalk_reent+0x36>
  406928:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40692c:	3301      	adds	r3, #1
  40692e:	4621      	mov	r1, r4
  406930:	4630      	mov	r0, r6
  406932:	d002      	beq.n	40693a <_fwalk_reent+0x36>
  406934:	47c0      	blx	r8
  406936:	ea49 0900 	orr.w	r9, r9, r0
  40693a:	1c6b      	adds	r3, r5, #1
  40693c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406940:	d1ed      	bne.n	40691e <_fwalk_reent+0x1a>
  406942:	683f      	ldr	r7, [r7, #0]
  406944:	2f00      	cmp	r7, #0
  406946:	d1e6      	bne.n	406916 <_fwalk_reent+0x12>
  406948:	4648      	mov	r0, r9
  40694a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40694e:	46b9      	mov	r9, r7
  406950:	4648      	mov	r0, r9
  406952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406956:	bf00      	nop

00406958 <__locale_mb_cur_max>:
  406958:	4b04      	ldr	r3, [pc, #16]	; (40696c <__locale_mb_cur_max+0x14>)
  40695a:	4a05      	ldr	r2, [pc, #20]	; (406970 <__locale_mb_cur_max+0x18>)
  40695c:	681b      	ldr	r3, [r3, #0]
  40695e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  406960:	2b00      	cmp	r3, #0
  406962:	bf08      	it	eq
  406964:	4613      	moveq	r3, r2
  406966:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40696a:	4770      	bx	lr
  40696c:	204000d0 	.word	0x204000d0
  406970:	20400504 	.word	0x20400504

00406974 <__retarget_lock_init_recursive>:
  406974:	4770      	bx	lr
  406976:	bf00      	nop

00406978 <__retarget_lock_close_recursive>:
  406978:	4770      	bx	lr
  40697a:	bf00      	nop

0040697c <__retarget_lock_acquire_recursive>:
  40697c:	4770      	bx	lr
  40697e:	bf00      	nop

00406980 <__retarget_lock_release_recursive>:
  406980:	4770      	bx	lr
  406982:	bf00      	nop

00406984 <__swhatbuf_r>:
  406984:	b570      	push	{r4, r5, r6, lr}
  406986:	460c      	mov	r4, r1
  406988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40698c:	2900      	cmp	r1, #0
  40698e:	b090      	sub	sp, #64	; 0x40
  406990:	4615      	mov	r5, r2
  406992:	461e      	mov	r6, r3
  406994:	db14      	blt.n	4069c0 <__swhatbuf_r+0x3c>
  406996:	aa01      	add	r2, sp, #4
  406998:	f001 f87c 	bl	407a94 <_fstat_r>
  40699c:	2800      	cmp	r0, #0
  40699e:	db0f      	blt.n	4069c0 <__swhatbuf_r+0x3c>
  4069a0:	9a02      	ldr	r2, [sp, #8]
  4069a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4069a6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4069aa:	fab2 f282 	clz	r2, r2
  4069ae:	0952      	lsrs	r2, r2, #5
  4069b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4069b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4069b8:	6032      	str	r2, [r6, #0]
  4069ba:	602b      	str	r3, [r5, #0]
  4069bc:	b010      	add	sp, #64	; 0x40
  4069be:	bd70      	pop	{r4, r5, r6, pc}
  4069c0:	89a2      	ldrh	r2, [r4, #12]
  4069c2:	2300      	movs	r3, #0
  4069c4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4069c8:	6033      	str	r3, [r6, #0]
  4069ca:	d004      	beq.n	4069d6 <__swhatbuf_r+0x52>
  4069cc:	2240      	movs	r2, #64	; 0x40
  4069ce:	4618      	mov	r0, r3
  4069d0:	602a      	str	r2, [r5, #0]
  4069d2:	b010      	add	sp, #64	; 0x40
  4069d4:	bd70      	pop	{r4, r5, r6, pc}
  4069d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4069da:	602b      	str	r3, [r5, #0]
  4069dc:	b010      	add	sp, #64	; 0x40
  4069de:	bd70      	pop	{r4, r5, r6, pc}

004069e0 <__smakebuf_r>:
  4069e0:	898a      	ldrh	r2, [r1, #12]
  4069e2:	0792      	lsls	r2, r2, #30
  4069e4:	460b      	mov	r3, r1
  4069e6:	d506      	bpl.n	4069f6 <__smakebuf_r+0x16>
  4069e8:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4069ec:	2101      	movs	r1, #1
  4069ee:	601a      	str	r2, [r3, #0]
  4069f0:	611a      	str	r2, [r3, #16]
  4069f2:	6159      	str	r1, [r3, #20]
  4069f4:	4770      	bx	lr
  4069f6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4069f8:	b083      	sub	sp, #12
  4069fa:	ab01      	add	r3, sp, #4
  4069fc:	466a      	mov	r2, sp
  4069fe:	460c      	mov	r4, r1
  406a00:	4606      	mov	r6, r0
  406a02:	f7ff ffbf 	bl	406984 <__swhatbuf_r>
  406a06:	9900      	ldr	r1, [sp, #0]
  406a08:	4605      	mov	r5, r0
  406a0a:	4630      	mov	r0, r6
  406a0c:	f000 f83a 	bl	406a84 <_malloc_r>
  406a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406a14:	b1d8      	cbz	r0, 406a4e <__smakebuf_r+0x6e>
  406a16:	9a01      	ldr	r2, [sp, #4]
  406a18:	4f15      	ldr	r7, [pc, #84]	; (406a70 <__smakebuf_r+0x90>)
  406a1a:	9900      	ldr	r1, [sp, #0]
  406a1c:	63f7      	str	r7, [r6, #60]	; 0x3c
  406a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406a22:	81a3      	strh	r3, [r4, #12]
  406a24:	6020      	str	r0, [r4, #0]
  406a26:	6120      	str	r0, [r4, #16]
  406a28:	6161      	str	r1, [r4, #20]
  406a2a:	b91a      	cbnz	r2, 406a34 <__smakebuf_r+0x54>
  406a2c:	432b      	orrs	r3, r5
  406a2e:	81a3      	strh	r3, [r4, #12]
  406a30:	b003      	add	sp, #12
  406a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406a34:	4630      	mov	r0, r6
  406a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406a3a:	f001 f83f 	bl	407abc <_isatty_r>
  406a3e:	b1a0      	cbz	r0, 406a6a <__smakebuf_r+0x8a>
  406a40:	89a3      	ldrh	r3, [r4, #12]
  406a42:	f023 0303 	bic.w	r3, r3, #3
  406a46:	f043 0301 	orr.w	r3, r3, #1
  406a4a:	b21b      	sxth	r3, r3
  406a4c:	e7ee      	b.n	406a2c <__smakebuf_r+0x4c>
  406a4e:	059a      	lsls	r2, r3, #22
  406a50:	d4ee      	bmi.n	406a30 <__smakebuf_r+0x50>
  406a52:	f023 0303 	bic.w	r3, r3, #3
  406a56:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406a5a:	f043 0302 	orr.w	r3, r3, #2
  406a5e:	2101      	movs	r1, #1
  406a60:	81a3      	strh	r3, [r4, #12]
  406a62:	6022      	str	r2, [r4, #0]
  406a64:	6122      	str	r2, [r4, #16]
  406a66:	6161      	str	r1, [r4, #20]
  406a68:	e7e2      	b.n	406a30 <__smakebuf_r+0x50>
  406a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406a6e:	e7dd      	b.n	406a2c <__smakebuf_r+0x4c>
  406a70:	004061a1 	.word	0x004061a1

00406a74 <malloc>:
  406a74:	4b02      	ldr	r3, [pc, #8]	; (406a80 <malloc+0xc>)
  406a76:	4601      	mov	r1, r0
  406a78:	6818      	ldr	r0, [r3, #0]
  406a7a:	f000 b803 	b.w	406a84 <_malloc_r>
  406a7e:	bf00      	nop
  406a80:	204000d0 	.word	0x204000d0

00406a84 <_malloc_r>:
  406a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406a88:	f101 060b 	add.w	r6, r1, #11
  406a8c:	2e16      	cmp	r6, #22
  406a8e:	b083      	sub	sp, #12
  406a90:	4605      	mov	r5, r0
  406a92:	f240 809e 	bls.w	406bd2 <_malloc_r+0x14e>
  406a96:	f036 0607 	bics.w	r6, r6, #7
  406a9a:	f100 80bd 	bmi.w	406c18 <_malloc_r+0x194>
  406a9e:	42b1      	cmp	r1, r6
  406aa0:	f200 80ba 	bhi.w	406c18 <_malloc_r+0x194>
  406aa4:	f000 fc02 	bl	4072ac <__malloc_lock>
  406aa8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  406aac:	f0c0 8293 	bcc.w	406fd6 <_malloc_r+0x552>
  406ab0:	0a73      	lsrs	r3, r6, #9
  406ab2:	f000 80b8 	beq.w	406c26 <_malloc_r+0x1a2>
  406ab6:	2b04      	cmp	r3, #4
  406ab8:	f200 8179 	bhi.w	406dae <_malloc_r+0x32a>
  406abc:	09b3      	lsrs	r3, r6, #6
  406abe:	f103 0039 	add.w	r0, r3, #57	; 0x39
  406ac2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  406ac6:	00c3      	lsls	r3, r0, #3
  406ac8:	4fbf      	ldr	r7, [pc, #764]	; (406dc8 <_malloc_r+0x344>)
  406aca:	443b      	add	r3, r7
  406acc:	f1a3 0108 	sub.w	r1, r3, #8
  406ad0:	685c      	ldr	r4, [r3, #4]
  406ad2:	42a1      	cmp	r1, r4
  406ad4:	d106      	bne.n	406ae4 <_malloc_r+0x60>
  406ad6:	e00c      	b.n	406af2 <_malloc_r+0x6e>
  406ad8:	2a00      	cmp	r2, #0
  406ada:	f280 80aa 	bge.w	406c32 <_malloc_r+0x1ae>
  406ade:	68e4      	ldr	r4, [r4, #12]
  406ae0:	42a1      	cmp	r1, r4
  406ae2:	d006      	beq.n	406af2 <_malloc_r+0x6e>
  406ae4:	6863      	ldr	r3, [r4, #4]
  406ae6:	f023 0303 	bic.w	r3, r3, #3
  406aea:	1b9a      	subs	r2, r3, r6
  406aec:	2a0f      	cmp	r2, #15
  406aee:	ddf3      	ble.n	406ad8 <_malloc_r+0x54>
  406af0:	4670      	mov	r0, lr
  406af2:	693c      	ldr	r4, [r7, #16]
  406af4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 406ddc <_malloc_r+0x358>
  406af8:	4574      	cmp	r4, lr
  406afa:	f000 81ab 	beq.w	406e54 <_malloc_r+0x3d0>
  406afe:	6863      	ldr	r3, [r4, #4]
  406b00:	f023 0303 	bic.w	r3, r3, #3
  406b04:	1b9a      	subs	r2, r3, r6
  406b06:	2a0f      	cmp	r2, #15
  406b08:	f300 8190 	bgt.w	406e2c <_malloc_r+0x3a8>
  406b0c:	2a00      	cmp	r2, #0
  406b0e:	f8c7 e014 	str.w	lr, [r7, #20]
  406b12:	f8c7 e010 	str.w	lr, [r7, #16]
  406b16:	f280 809d 	bge.w	406c54 <_malloc_r+0x1d0>
  406b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406b1e:	f080 8161 	bcs.w	406de4 <_malloc_r+0x360>
  406b22:	08db      	lsrs	r3, r3, #3
  406b24:	f103 0c01 	add.w	ip, r3, #1
  406b28:	1099      	asrs	r1, r3, #2
  406b2a:	687a      	ldr	r2, [r7, #4]
  406b2c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406b30:	f8c4 8008 	str.w	r8, [r4, #8]
  406b34:	2301      	movs	r3, #1
  406b36:	408b      	lsls	r3, r1
  406b38:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  406b3c:	4313      	orrs	r3, r2
  406b3e:	3908      	subs	r1, #8
  406b40:	60e1      	str	r1, [r4, #12]
  406b42:	607b      	str	r3, [r7, #4]
  406b44:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  406b48:	f8c8 400c 	str.w	r4, [r8, #12]
  406b4c:	1082      	asrs	r2, r0, #2
  406b4e:	2401      	movs	r4, #1
  406b50:	4094      	lsls	r4, r2
  406b52:	429c      	cmp	r4, r3
  406b54:	f200 808b 	bhi.w	406c6e <_malloc_r+0x1ea>
  406b58:	421c      	tst	r4, r3
  406b5a:	d106      	bne.n	406b6a <_malloc_r+0xe6>
  406b5c:	f020 0003 	bic.w	r0, r0, #3
  406b60:	0064      	lsls	r4, r4, #1
  406b62:	421c      	tst	r4, r3
  406b64:	f100 0004 	add.w	r0, r0, #4
  406b68:	d0fa      	beq.n	406b60 <_malloc_r+0xdc>
  406b6a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406b6e:	46cc      	mov	ip, r9
  406b70:	4680      	mov	r8, r0
  406b72:	f8dc 300c 	ldr.w	r3, [ip, #12]
  406b76:	459c      	cmp	ip, r3
  406b78:	d107      	bne.n	406b8a <_malloc_r+0x106>
  406b7a:	e16d      	b.n	406e58 <_malloc_r+0x3d4>
  406b7c:	2a00      	cmp	r2, #0
  406b7e:	f280 817b 	bge.w	406e78 <_malloc_r+0x3f4>
  406b82:	68db      	ldr	r3, [r3, #12]
  406b84:	459c      	cmp	ip, r3
  406b86:	f000 8167 	beq.w	406e58 <_malloc_r+0x3d4>
  406b8a:	6859      	ldr	r1, [r3, #4]
  406b8c:	f021 0103 	bic.w	r1, r1, #3
  406b90:	1b8a      	subs	r2, r1, r6
  406b92:	2a0f      	cmp	r2, #15
  406b94:	ddf2      	ble.n	406b7c <_malloc_r+0xf8>
  406b96:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  406b9a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  406b9e:	9300      	str	r3, [sp, #0]
  406ba0:	199c      	adds	r4, r3, r6
  406ba2:	4628      	mov	r0, r5
  406ba4:	f046 0601 	orr.w	r6, r6, #1
  406ba8:	f042 0501 	orr.w	r5, r2, #1
  406bac:	605e      	str	r6, [r3, #4]
  406bae:	f8c8 c00c 	str.w	ip, [r8, #12]
  406bb2:	f8cc 8008 	str.w	r8, [ip, #8]
  406bb6:	617c      	str	r4, [r7, #20]
  406bb8:	613c      	str	r4, [r7, #16]
  406bba:	f8c4 e00c 	str.w	lr, [r4, #12]
  406bbe:	f8c4 e008 	str.w	lr, [r4, #8]
  406bc2:	6065      	str	r5, [r4, #4]
  406bc4:	505a      	str	r2, [r3, r1]
  406bc6:	f000 fb77 	bl	4072b8 <__malloc_unlock>
  406bca:	9b00      	ldr	r3, [sp, #0]
  406bcc:	f103 0408 	add.w	r4, r3, #8
  406bd0:	e01e      	b.n	406c10 <_malloc_r+0x18c>
  406bd2:	2910      	cmp	r1, #16
  406bd4:	d820      	bhi.n	406c18 <_malloc_r+0x194>
  406bd6:	f000 fb69 	bl	4072ac <__malloc_lock>
  406bda:	2610      	movs	r6, #16
  406bdc:	2318      	movs	r3, #24
  406bde:	2002      	movs	r0, #2
  406be0:	4f79      	ldr	r7, [pc, #484]	; (406dc8 <_malloc_r+0x344>)
  406be2:	443b      	add	r3, r7
  406be4:	f1a3 0208 	sub.w	r2, r3, #8
  406be8:	685c      	ldr	r4, [r3, #4]
  406bea:	4294      	cmp	r4, r2
  406bec:	f000 813d 	beq.w	406e6a <_malloc_r+0x3e6>
  406bf0:	6863      	ldr	r3, [r4, #4]
  406bf2:	68e1      	ldr	r1, [r4, #12]
  406bf4:	68a6      	ldr	r6, [r4, #8]
  406bf6:	f023 0303 	bic.w	r3, r3, #3
  406bfa:	4423      	add	r3, r4
  406bfc:	4628      	mov	r0, r5
  406bfe:	685a      	ldr	r2, [r3, #4]
  406c00:	60f1      	str	r1, [r6, #12]
  406c02:	f042 0201 	orr.w	r2, r2, #1
  406c06:	608e      	str	r6, [r1, #8]
  406c08:	605a      	str	r2, [r3, #4]
  406c0a:	f000 fb55 	bl	4072b8 <__malloc_unlock>
  406c0e:	3408      	adds	r4, #8
  406c10:	4620      	mov	r0, r4
  406c12:	b003      	add	sp, #12
  406c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c18:	2400      	movs	r4, #0
  406c1a:	230c      	movs	r3, #12
  406c1c:	4620      	mov	r0, r4
  406c1e:	602b      	str	r3, [r5, #0]
  406c20:	b003      	add	sp, #12
  406c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c26:	2040      	movs	r0, #64	; 0x40
  406c28:	f44f 7300 	mov.w	r3, #512	; 0x200
  406c2c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406c30:	e74a      	b.n	406ac8 <_malloc_r+0x44>
  406c32:	4423      	add	r3, r4
  406c34:	68e1      	ldr	r1, [r4, #12]
  406c36:	685a      	ldr	r2, [r3, #4]
  406c38:	68a6      	ldr	r6, [r4, #8]
  406c3a:	f042 0201 	orr.w	r2, r2, #1
  406c3e:	60f1      	str	r1, [r6, #12]
  406c40:	4628      	mov	r0, r5
  406c42:	608e      	str	r6, [r1, #8]
  406c44:	605a      	str	r2, [r3, #4]
  406c46:	f000 fb37 	bl	4072b8 <__malloc_unlock>
  406c4a:	3408      	adds	r4, #8
  406c4c:	4620      	mov	r0, r4
  406c4e:	b003      	add	sp, #12
  406c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c54:	4423      	add	r3, r4
  406c56:	4628      	mov	r0, r5
  406c58:	685a      	ldr	r2, [r3, #4]
  406c5a:	f042 0201 	orr.w	r2, r2, #1
  406c5e:	605a      	str	r2, [r3, #4]
  406c60:	f000 fb2a 	bl	4072b8 <__malloc_unlock>
  406c64:	3408      	adds	r4, #8
  406c66:	4620      	mov	r0, r4
  406c68:	b003      	add	sp, #12
  406c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c6e:	68bc      	ldr	r4, [r7, #8]
  406c70:	6863      	ldr	r3, [r4, #4]
  406c72:	f023 0803 	bic.w	r8, r3, #3
  406c76:	45b0      	cmp	r8, r6
  406c78:	d304      	bcc.n	406c84 <_malloc_r+0x200>
  406c7a:	eba8 0306 	sub.w	r3, r8, r6
  406c7e:	2b0f      	cmp	r3, #15
  406c80:	f300 8085 	bgt.w	406d8e <_malloc_r+0x30a>
  406c84:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406de0 <_malloc_r+0x35c>
  406c88:	4b50      	ldr	r3, [pc, #320]	; (406dcc <_malloc_r+0x348>)
  406c8a:	f8d9 2000 	ldr.w	r2, [r9]
  406c8e:	681b      	ldr	r3, [r3, #0]
  406c90:	3201      	adds	r2, #1
  406c92:	4433      	add	r3, r6
  406c94:	eb04 0a08 	add.w	sl, r4, r8
  406c98:	f000 8155 	beq.w	406f46 <_malloc_r+0x4c2>
  406c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406ca0:	330f      	adds	r3, #15
  406ca2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  406ca6:	f02b 0b0f 	bic.w	fp, fp, #15
  406caa:	4659      	mov	r1, fp
  406cac:	4628      	mov	r0, r5
  406cae:	f000 fcaf 	bl	407610 <_sbrk_r>
  406cb2:	1c41      	adds	r1, r0, #1
  406cb4:	4602      	mov	r2, r0
  406cb6:	f000 80fc 	beq.w	406eb2 <_malloc_r+0x42e>
  406cba:	4582      	cmp	sl, r0
  406cbc:	f200 80f7 	bhi.w	406eae <_malloc_r+0x42a>
  406cc0:	4b43      	ldr	r3, [pc, #268]	; (406dd0 <_malloc_r+0x34c>)
  406cc2:	6819      	ldr	r1, [r3, #0]
  406cc4:	4459      	add	r1, fp
  406cc6:	6019      	str	r1, [r3, #0]
  406cc8:	f000 814d 	beq.w	406f66 <_malloc_r+0x4e2>
  406ccc:	f8d9 0000 	ldr.w	r0, [r9]
  406cd0:	3001      	adds	r0, #1
  406cd2:	bf1b      	ittet	ne
  406cd4:	eba2 0a0a 	subne.w	sl, r2, sl
  406cd8:	4451      	addne	r1, sl
  406cda:	f8c9 2000 	streq.w	r2, [r9]
  406cde:	6019      	strne	r1, [r3, #0]
  406ce0:	f012 0107 	ands.w	r1, r2, #7
  406ce4:	f000 8115 	beq.w	406f12 <_malloc_r+0x48e>
  406ce8:	f1c1 0008 	rsb	r0, r1, #8
  406cec:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406cf0:	4402      	add	r2, r0
  406cf2:	3108      	adds	r1, #8
  406cf4:	eb02 090b 	add.w	r9, r2, fp
  406cf8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  406cfc:	eba1 0909 	sub.w	r9, r1, r9
  406d00:	4649      	mov	r1, r9
  406d02:	4628      	mov	r0, r5
  406d04:	9301      	str	r3, [sp, #4]
  406d06:	9200      	str	r2, [sp, #0]
  406d08:	f000 fc82 	bl	407610 <_sbrk_r>
  406d0c:	1c43      	adds	r3, r0, #1
  406d0e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406d12:	f000 8143 	beq.w	406f9c <_malloc_r+0x518>
  406d16:	1a80      	subs	r0, r0, r2
  406d18:	4448      	add	r0, r9
  406d1a:	f040 0001 	orr.w	r0, r0, #1
  406d1e:	6819      	ldr	r1, [r3, #0]
  406d20:	60ba      	str	r2, [r7, #8]
  406d22:	4449      	add	r1, r9
  406d24:	42bc      	cmp	r4, r7
  406d26:	6050      	str	r0, [r2, #4]
  406d28:	6019      	str	r1, [r3, #0]
  406d2a:	d017      	beq.n	406d5c <_malloc_r+0x2d8>
  406d2c:	f1b8 0f0f 	cmp.w	r8, #15
  406d30:	f240 80fb 	bls.w	406f2a <_malloc_r+0x4a6>
  406d34:	6860      	ldr	r0, [r4, #4]
  406d36:	f1a8 020c 	sub.w	r2, r8, #12
  406d3a:	f022 0207 	bic.w	r2, r2, #7
  406d3e:	eb04 0e02 	add.w	lr, r4, r2
  406d42:	f000 0001 	and.w	r0, r0, #1
  406d46:	f04f 0c05 	mov.w	ip, #5
  406d4a:	4310      	orrs	r0, r2
  406d4c:	2a0f      	cmp	r2, #15
  406d4e:	6060      	str	r0, [r4, #4]
  406d50:	f8ce c004 	str.w	ip, [lr, #4]
  406d54:	f8ce c008 	str.w	ip, [lr, #8]
  406d58:	f200 8117 	bhi.w	406f8a <_malloc_r+0x506>
  406d5c:	4b1d      	ldr	r3, [pc, #116]	; (406dd4 <_malloc_r+0x350>)
  406d5e:	68bc      	ldr	r4, [r7, #8]
  406d60:	681a      	ldr	r2, [r3, #0]
  406d62:	4291      	cmp	r1, r2
  406d64:	bf88      	it	hi
  406d66:	6019      	strhi	r1, [r3, #0]
  406d68:	4b1b      	ldr	r3, [pc, #108]	; (406dd8 <_malloc_r+0x354>)
  406d6a:	681a      	ldr	r2, [r3, #0]
  406d6c:	4291      	cmp	r1, r2
  406d6e:	6862      	ldr	r2, [r4, #4]
  406d70:	bf88      	it	hi
  406d72:	6019      	strhi	r1, [r3, #0]
  406d74:	f022 0203 	bic.w	r2, r2, #3
  406d78:	4296      	cmp	r6, r2
  406d7a:	eba2 0306 	sub.w	r3, r2, r6
  406d7e:	d801      	bhi.n	406d84 <_malloc_r+0x300>
  406d80:	2b0f      	cmp	r3, #15
  406d82:	dc04      	bgt.n	406d8e <_malloc_r+0x30a>
  406d84:	4628      	mov	r0, r5
  406d86:	f000 fa97 	bl	4072b8 <__malloc_unlock>
  406d8a:	2400      	movs	r4, #0
  406d8c:	e740      	b.n	406c10 <_malloc_r+0x18c>
  406d8e:	19a2      	adds	r2, r4, r6
  406d90:	f043 0301 	orr.w	r3, r3, #1
  406d94:	f046 0601 	orr.w	r6, r6, #1
  406d98:	6066      	str	r6, [r4, #4]
  406d9a:	4628      	mov	r0, r5
  406d9c:	60ba      	str	r2, [r7, #8]
  406d9e:	6053      	str	r3, [r2, #4]
  406da0:	f000 fa8a 	bl	4072b8 <__malloc_unlock>
  406da4:	3408      	adds	r4, #8
  406da6:	4620      	mov	r0, r4
  406da8:	b003      	add	sp, #12
  406daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406dae:	2b14      	cmp	r3, #20
  406db0:	d971      	bls.n	406e96 <_malloc_r+0x412>
  406db2:	2b54      	cmp	r3, #84	; 0x54
  406db4:	f200 80a3 	bhi.w	406efe <_malloc_r+0x47a>
  406db8:	0b33      	lsrs	r3, r6, #12
  406dba:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406dbe:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  406dc2:	00c3      	lsls	r3, r0, #3
  406dc4:	e680      	b.n	406ac8 <_malloc_r+0x44>
  406dc6:	bf00      	nop
  406dc8:	20400670 	.word	0x20400670
  406dcc:	20400c44 	.word	0x20400c44
  406dd0:	20400c14 	.word	0x20400c14
  406dd4:	20400c3c 	.word	0x20400c3c
  406dd8:	20400c40 	.word	0x20400c40
  406ddc:	20400678 	.word	0x20400678
  406de0:	20400a78 	.word	0x20400a78
  406de4:	0a5a      	lsrs	r2, r3, #9
  406de6:	2a04      	cmp	r2, #4
  406de8:	d95b      	bls.n	406ea2 <_malloc_r+0x41e>
  406dea:	2a14      	cmp	r2, #20
  406dec:	f200 80ae 	bhi.w	406f4c <_malloc_r+0x4c8>
  406df0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  406df4:	00c9      	lsls	r1, r1, #3
  406df6:	325b      	adds	r2, #91	; 0x5b
  406df8:	eb07 0c01 	add.w	ip, r7, r1
  406dfc:	5879      	ldr	r1, [r7, r1]
  406dfe:	f1ac 0c08 	sub.w	ip, ip, #8
  406e02:	458c      	cmp	ip, r1
  406e04:	f000 8088 	beq.w	406f18 <_malloc_r+0x494>
  406e08:	684a      	ldr	r2, [r1, #4]
  406e0a:	f022 0203 	bic.w	r2, r2, #3
  406e0e:	4293      	cmp	r3, r2
  406e10:	d273      	bcs.n	406efa <_malloc_r+0x476>
  406e12:	6889      	ldr	r1, [r1, #8]
  406e14:	458c      	cmp	ip, r1
  406e16:	d1f7      	bne.n	406e08 <_malloc_r+0x384>
  406e18:	f8dc 200c 	ldr.w	r2, [ip, #12]
  406e1c:	687b      	ldr	r3, [r7, #4]
  406e1e:	60e2      	str	r2, [r4, #12]
  406e20:	f8c4 c008 	str.w	ip, [r4, #8]
  406e24:	6094      	str	r4, [r2, #8]
  406e26:	f8cc 400c 	str.w	r4, [ip, #12]
  406e2a:	e68f      	b.n	406b4c <_malloc_r+0xc8>
  406e2c:	19a1      	adds	r1, r4, r6
  406e2e:	f046 0c01 	orr.w	ip, r6, #1
  406e32:	f042 0601 	orr.w	r6, r2, #1
  406e36:	f8c4 c004 	str.w	ip, [r4, #4]
  406e3a:	4628      	mov	r0, r5
  406e3c:	6179      	str	r1, [r7, #20]
  406e3e:	6139      	str	r1, [r7, #16]
  406e40:	f8c1 e00c 	str.w	lr, [r1, #12]
  406e44:	f8c1 e008 	str.w	lr, [r1, #8]
  406e48:	604e      	str	r6, [r1, #4]
  406e4a:	50e2      	str	r2, [r4, r3]
  406e4c:	f000 fa34 	bl	4072b8 <__malloc_unlock>
  406e50:	3408      	adds	r4, #8
  406e52:	e6dd      	b.n	406c10 <_malloc_r+0x18c>
  406e54:	687b      	ldr	r3, [r7, #4]
  406e56:	e679      	b.n	406b4c <_malloc_r+0xc8>
  406e58:	f108 0801 	add.w	r8, r8, #1
  406e5c:	f018 0f03 	tst.w	r8, #3
  406e60:	f10c 0c08 	add.w	ip, ip, #8
  406e64:	f47f ae85 	bne.w	406b72 <_malloc_r+0xee>
  406e68:	e02d      	b.n	406ec6 <_malloc_r+0x442>
  406e6a:	68dc      	ldr	r4, [r3, #12]
  406e6c:	42a3      	cmp	r3, r4
  406e6e:	bf08      	it	eq
  406e70:	3002      	addeq	r0, #2
  406e72:	f43f ae3e 	beq.w	406af2 <_malloc_r+0x6e>
  406e76:	e6bb      	b.n	406bf0 <_malloc_r+0x16c>
  406e78:	4419      	add	r1, r3
  406e7a:	461c      	mov	r4, r3
  406e7c:	684a      	ldr	r2, [r1, #4]
  406e7e:	68db      	ldr	r3, [r3, #12]
  406e80:	f854 6f08 	ldr.w	r6, [r4, #8]!
  406e84:	f042 0201 	orr.w	r2, r2, #1
  406e88:	604a      	str	r2, [r1, #4]
  406e8a:	4628      	mov	r0, r5
  406e8c:	60f3      	str	r3, [r6, #12]
  406e8e:	609e      	str	r6, [r3, #8]
  406e90:	f000 fa12 	bl	4072b8 <__malloc_unlock>
  406e94:	e6bc      	b.n	406c10 <_malloc_r+0x18c>
  406e96:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  406e9a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  406e9e:	00c3      	lsls	r3, r0, #3
  406ea0:	e612      	b.n	406ac8 <_malloc_r+0x44>
  406ea2:	099a      	lsrs	r2, r3, #6
  406ea4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406ea8:	00c9      	lsls	r1, r1, #3
  406eaa:	3238      	adds	r2, #56	; 0x38
  406eac:	e7a4      	b.n	406df8 <_malloc_r+0x374>
  406eae:	42bc      	cmp	r4, r7
  406eb0:	d054      	beq.n	406f5c <_malloc_r+0x4d8>
  406eb2:	68bc      	ldr	r4, [r7, #8]
  406eb4:	6862      	ldr	r2, [r4, #4]
  406eb6:	f022 0203 	bic.w	r2, r2, #3
  406eba:	e75d      	b.n	406d78 <_malloc_r+0x2f4>
  406ebc:	f859 3908 	ldr.w	r3, [r9], #-8
  406ec0:	4599      	cmp	r9, r3
  406ec2:	f040 8086 	bne.w	406fd2 <_malloc_r+0x54e>
  406ec6:	f010 0f03 	tst.w	r0, #3
  406eca:	f100 30ff 	add.w	r0, r0, #4294967295
  406ece:	d1f5      	bne.n	406ebc <_malloc_r+0x438>
  406ed0:	687b      	ldr	r3, [r7, #4]
  406ed2:	ea23 0304 	bic.w	r3, r3, r4
  406ed6:	607b      	str	r3, [r7, #4]
  406ed8:	0064      	lsls	r4, r4, #1
  406eda:	429c      	cmp	r4, r3
  406edc:	f63f aec7 	bhi.w	406c6e <_malloc_r+0x1ea>
  406ee0:	2c00      	cmp	r4, #0
  406ee2:	f43f aec4 	beq.w	406c6e <_malloc_r+0x1ea>
  406ee6:	421c      	tst	r4, r3
  406ee8:	4640      	mov	r0, r8
  406eea:	f47f ae3e 	bne.w	406b6a <_malloc_r+0xe6>
  406eee:	0064      	lsls	r4, r4, #1
  406ef0:	421c      	tst	r4, r3
  406ef2:	f100 0004 	add.w	r0, r0, #4
  406ef6:	d0fa      	beq.n	406eee <_malloc_r+0x46a>
  406ef8:	e637      	b.n	406b6a <_malloc_r+0xe6>
  406efa:	468c      	mov	ip, r1
  406efc:	e78c      	b.n	406e18 <_malloc_r+0x394>
  406efe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  406f02:	d815      	bhi.n	406f30 <_malloc_r+0x4ac>
  406f04:	0bf3      	lsrs	r3, r6, #15
  406f06:	f103 0078 	add.w	r0, r3, #120	; 0x78
  406f0a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  406f0e:	00c3      	lsls	r3, r0, #3
  406f10:	e5da      	b.n	406ac8 <_malloc_r+0x44>
  406f12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  406f16:	e6ed      	b.n	406cf4 <_malloc_r+0x270>
  406f18:	687b      	ldr	r3, [r7, #4]
  406f1a:	1092      	asrs	r2, r2, #2
  406f1c:	2101      	movs	r1, #1
  406f1e:	fa01 f202 	lsl.w	r2, r1, r2
  406f22:	4313      	orrs	r3, r2
  406f24:	607b      	str	r3, [r7, #4]
  406f26:	4662      	mov	r2, ip
  406f28:	e779      	b.n	406e1e <_malloc_r+0x39a>
  406f2a:	2301      	movs	r3, #1
  406f2c:	6053      	str	r3, [r2, #4]
  406f2e:	e729      	b.n	406d84 <_malloc_r+0x300>
  406f30:	f240 5254 	movw	r2, #1364	; 0x554
  406f34:	4293      	cmp	r3, r2
  406f36:	d822      	bhi.n	406f7e <_malloc_r+0x4fa>
  406f38:	0cb3      	lsrs	r3, r6, #18
  406f3a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406f3e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  406f42:	00c3      	lsls	r3, r0, #3
  406f44:	e5c0      	b.n	406ac8 <_malloc_r+0x44>
  406f46:	f103 0b10 	add.w	fp, r3, #16
  406f4a:	e6ae      	b.n	406caa <_malloc_r+0x226>
  406f4c:	2a54      	cmp	r2, #84	; 0x54
  406f4e:	d829      	bhi.n	406fa4 <_malloc_r+0x520>
  406f50:	0b1a      	lsrs	r2, r3, #12
  406f52:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  406f56:	00c9      	lsls	r1, r1, #3
  406f58:	326e      	adds	r2, #110	; 0x6e
  406f5a:	e74d      	b.n	406df8 <_malloc_r+0x374>
  406f5c:	4b20      	ldr	r3, [pc, #128]	; (406fe0 <_malloc_r+0x55c>)
  406f5e:	6819      	ldr	r1, [r3, #0]
  406f60:	4459      	add	r1, fp
  406f62:	6019      	str	r1, [r3, #0]
  406f64:	e6b2      	b.n	406ccc <_malloc_r+0x248>
  406f66:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406f6a:	2800      	cmp	r0, #0
  406f6c:	f47f aeae 	bne.w	406ccc <_malloc_r+0x248>
  406f70:	eb08 030b 	add.w	r3, r8, fp
  406f74:	68ba      	ldr	r2, [r7, #8]
  406f76:	f043 0301 	orr.w	r3, r3, #1
  406f7a:	6053      	str	r3, [r2, #4]
  406f7c:	e6ee      	b.n	406d5c <_malloc_r+0x2d8>
  406f7e:	207f      	movs	r0, #127	; 0x7f
  406f80:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  406f84:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406f88:	e59e      	b.n	406ac8 <_malloc_r+0x44>
  406f8a:	f104 0108 	add.w	r1, r4, #8
  406f8e:	4628      	mov	r0, r5
  406f90:	9300      	str	r3, [sp, #0]
  406f92:	f7ff fa59 	bl	406448 <_free_r>
  406f96:	9b00      	ldr	r3, [sp, #0]
  406f98:	6819      	ldr	r1, [r3, #0]
  406f9a:	e6df      	b.n	406d5c <_malloc_r+0x2d8>
  406f9c:	2001      	movs	r0, #1
  406f9e:	f04f 0900 	mov.w	r9, #0
  406fa2:	e6bc      	b.n	406d1e <_malloc_r+0x29a>
  406fa4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406fa8:	d805      	bhi.n	406fb6 <_malloc_r+0x532>
  406faa:	0bda      	lsrs	r2, r3, #15
  406fac:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406fb0:	00c9      	lsls	r1, r1, #3
  406fb2:	3277      	adds	r2, #119	; 0x77
  406fb4:	e720      	b.n	406df8 <_malloc_r+0x374>
  406fb6:	f240 5154 	movw	r1, #1364	; 0x554
  406fba:	428a      	cmp	r2, r1
  406fbc:	d805      	bhi.n	406fca <_malloc_r+0x546>
  406fbe:	0c9a      	lsrs	r2, r3, #18
  406fc0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406fc4:	00c9      	lsls	r1, r1, #3
  406fc6:	327c      	adds	r2, #124	; 0x7c
  406fc8:	e716      	b.n	406df8 <_malloc_r+0x374>
  406fca:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  406fce:	227e      	movs	r2, #126	; 0x7e
  406fd0:	e712      	b.n	406df8 <_malloc_r+0x374>
  406fd2:	687b      	ldr	r3, [r7, #4]
  406fd4:	e780      	b.n	406ed8 <_malloc_r+0x454>
  406fd6:	08f0      	lsrs	r0, r6, #3
  406fd8:	f106 0308 	add.w	r3, r6, #8
  406fdc:	e600      	b.n	406be0 <_malloc_r+0x15c>
  406fde:	bf00      	nop
  406fe0:	20400c14 	.word	0x20400c14

00406fe4 <__ascii_mbtowc>:
  406fe4:	b082      	sub	sp, #8
  406fe6:	b149      	cbz	r1, 406ffc <__ascii_mbtowc+0x18>
  406fe8:	b15a      	cbz	r2, 407002 <__ascii_mbtowc+0x1e>
  406fea:	b16b      	cbz	r3, 407008 <__ascii_mbtowc+0x24>
  406fec:	7813      	ldrb	r3, [r2, #0]
  406fee:	600b      	str	r3, [r1, #0]
  406ff0:	7812      	ldrb	r2, [r2, #0]
  406ff2:	1c10      	adds	r0, r2, #0
  406ff4:	bf18      	it	ne
  406ff6:	2001      	movne	r0, #1
  406ff8:	b002      	add	sp, #8
  406ffa:	4770      	bx	lr
  406ffc:	a901      	add	r1, sp, #4
  406ffe:	2a00      	cmp	r2, #0
  407000:	d1f3      	bne.n	406fea <__ascii_mbtowc+0x6>
  407002:	4610      	mov	r0, r2
  407004:	b002      	add	sp, #8
  407006:	4770      	bx	lr
  407008:	f06f 0001 	mvn.w	r0, #1
  40700c:	e7f4      	b.n	406ff8 <__ascii_mbtowc+0x14>
  40700e:	bf00      	nop

00407010 <memchr>:
  407010:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407014:	2a10      	cmp	r2, #16
  407016:	db2b      	blt.n	407070 <memchr+0x60>
  407018:	f010 0f07 	tst.w	r0, #7
  40701c:	d008      	beq.n	407030 <memchr+0x20>
  40701e:	f810 3b01 	ldrb.w	r3, [r0], #1
  407022:	3a01      	subs	r2, #1
  407024:	428b      	cmp	r3, r1
  407026:	d02d      	beq.n	407084 <memchr+0x74>
  407028:	f010 0f07 	tst.w	r0, #7
  40702c:	b342      	cbz	r2, 407080 <memchr+0x70>
  40702e:	d1f6      	bne.n	40701e <memchr+0xe>
  407030:	b4f0      	push	{r4, r5, r6, r7}
  407032:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407036:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40703a:	f022 0407 	bic.w	r4, r2, #7
  40703e:	f07f 0700 	mvns.w	r7, #0
  407042:	2300      	movs	r3, #0
  407044:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407048:	3c08      	subs	r4, #8
  40704a:	ea85 0501 	eor.w	r5, r5, r1
  40704e:	ea86 0601 	eor.w	r6, r6, r1
  407052:	fa85 f547 	uadd8	r5, r5, r7
  407056:	faa3 f587 	sel	r5, r3, r7
  40705a:	fa86 f647 	uadd8	r6, r6, r7
  40705e:	faa5 f687 	sel	r6, r5, r7
  407062:	b98e      	cbnz	r6, 407088 <memchr+0x78>
  407064:	d1ee      	bne.n	407044 <memchr+0x34>
  407066:	bcf0      	pop	{r4, r5, r6, r7}
  407068:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40706c:	f002 0207 	and.w	r2, r2, #7
  407070:	b132      	cbz	r2, 407080 <memchr+0x70>
  407072:	f810 3b01 	ldrb.w	r3, [r0], #1
  407076:	3a01      	subs	r2, #1
  407078:	ea83 0301 	eor.w	r3, r3, r1
  40707c:	b113      	cbz	r3, 407084 <memchr+0x74>
  40707e:	d1f8      	bne.n	407072 <memchr+0x62>
  407080:	2000      	movs	r0, #0
  407082:	4770      	bx	lr
  407084:	3801      	subs	r0, #1
  407086:	4770      	bx	lr
  407088:	2d00      	cmp	r5, #0
  40708a:	bf06      	itte	eq
  40708c:	4635      	moveq	r5, r6
  40708e:	3803      	subeq	r0, #3
  407090:	3807      	subne	r0, #7
  407092:	f015 0f01 	tst.w	r5, #1
  407096:	d107      	bne.n	4070a8 <memchr+0x98>
  407098:	3001      	adds	r0, #1
  40709a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40709e:	bf02      	ittt	eq
  4070a0:	3001      	addeq	r0, #1
  4070a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4070a6:	3001      	addeq	r0, #1
  4070a8:	bcf0      	pop	{r4, r5, r6, r7}
  4070aa:	3801      	subs	r0, #1
  4070ac:	4770      	bx	lr
  4070ae:	bf00      	nop

004070b0 <memcpy>:
  4070b0:	4684      	mov	ip, r0
  4070b2:	ea41 0300 	orr.w	r3, r1, r0
  4070b6:	f013 0303 	ands.w	r3, r3, #3
  4070ba:	d16d      	bne.n	407198 <memcpy+0xe8>
  4070bc:	3a40      	subs	r2, #64	; 0x40
  4070be:	d341      	bcc.n	407144 <memcpy+0x94>
  4070c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4070c4:	f840 3b04 	str.w	r3, [r0], #4
  4070c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4070cc:	f840 3b04 	str.w	r3, [r0], #4
  4070d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4070d4:	f840 3b04 	str.w	r3, [r0], #4
  4070d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4070dc:	f840 3b04 	str.w	r3, [r0], #4
  4070e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4070e4:	f840 3b04 	str.w	r3, [r0], #4
  4070e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4070ec:	f840 3b04 	str.w	r3, [r0], #4
  4070f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4070f4:	f840 3b04 	str.w	r3, [r0], #4
  4070f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4070fc:	f840 3b04 	str.w	r3, [r0], #4
  407100:	f851 3b04 	ldr.w	r3, [r1], #4
  407104:	f840 3b04 	str.w	r3, [r0], #4
  407108:	f851 3b04 	ldr.w	r3, [r1], #4
  40710c:	f840 3b04 	str.w	r3, [r0], #4
  407110:	f851 3b04 	ldr.w	r3, [r1], #4
  407114:	f840 3b04 	str.w	r3, [r0], #4
  407118:	f851 3b04 	ldr.w	r3, [r1], #4
  40711c:	f840 3b04 	str.w	r3, [r0], #4
  407120:	f851 3b04 	ldr.w	r3, [r1], #4
  407124:	f840 3b04 	str.w	r3, [r0], #4
  407128:	f851 3b04 	ldr.w	r3, [r1], #4
  40712c:	f840 3b04 	str.w	r3, [r0], #4
  407130:	f851 3b04 	ldr.w	r3, [r1], #4
  407134:	f840 3b04 	str.w	r3, [r0], #4
  407138:	f851 3b04 	ldr.w	r3, [r1], #4
  40713c:	f840 3b04 	str.w	r3, [r0], #4
  407140:	3a40      	subs	r2, #64	; 0x40
  407142:	d2bd      	bcs.n	4070c0 <memcpy+0x10>
  407144:	3230      	adds	r2, #48	; 0x30
  407146:	d311      	bcc.n	40716c <memcpy+0xbc>
  407148:	f851 3b04 	ldr.w	r3, [r1], #4
  40714c:	f840 3b04 	str.w	r3, [r0], #4
  407150:	f851 3b04 	ldr.w	r3, [r1], #4
  407154:	f840 3b04 	str.w	r3, [r0], #4
  407158:	f851 3b04 	ldr.w	r3, [r1], #4
  40715c:	f840 3b04 	str.w	r3, [r0], #4
  407160:	f851 3b04 	ldr.w	r3, [r1], #4
  407164:	f840 3b04 	str.w	r3, [r0], #4
  407168:	3a10      	subs	r2, #16
  40716a:	d2ed      	bcs.n	407148 <memcpy+0x98>
  40716c:	320c      	adds	r2, #12
  40716e:	d305      	bcc.n	40717c <memcpy+0xcc>
  407170:	f851 3b04 	ldr.w	r3, [r1], #4
  407174:	f840 3b04 	str.w	r3, [r0], #4
  407178:	3a04      	subs	r2, #4
  40717a:	d2f9      	bcs.n	407170 <memcpy+0xc0>
  40717c:	3204      	adds	r2, #4
  40717e:	d008      	beq.n	407192 <memcpy+0xe2>
  407180:	07d2      	lsls	r2, r2, #31
  407182:	bf1c      	itt	ne
  407184:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407188:	f800 3b01 	strbne.w	r3, [r0], #1
  40718c:	d301      	bcc.n	407192 <memcpy+0xe2>
  40718e:	880b      	ldrh	r3, [r1, #0]
  407190:	8003      	strh	r3, [r0, #0]
  407192:	4660      	mov	r0, ip
  407194:	4770      	bx	lr
  407196:	bf00      	nop
  407198:	2a08      	cmp	r2, #8
  40719a:	d313      	bcc.n	4071c4 <memcpy+0x114>
  40719c:	078b      	lsls	r3, r1, #30
  40719e:	d08d      	beq.n	4070bc <memcpy+0xc>
  4071a0:	f010 0303 	ands.w	r3, r0, #3
  4071a4:	d08a      	beq.n	4070bc <memcpy+0xc>
  4071a6:	f1c3 0304 	rsb	r3, r3, #4
  4071aa:	1ad2      	subs	r2, r2, r3
  4071ac:	07db      	lsls	r3, r3, #31
  4071ae:	bf1c      	itt	ne
  4071b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4071b4:	f800 3b01 	strbne.w	r3, [r0], #1
  4071b8:	d380      	bcc.n	4070bc <memcpy+0xc>
  4071ba:	f831 3b02 	ldrh.w	r3, [r1], #2
  4071be:	f820 3b02 	strh.w	r3, [r0], #2
  4071c2:	e77b      	b.n	4070bc <memcpy+0xc>
  4071c4:	3a04      	subs	r2, #4
  4071c6:	d3d9      	bcc.n	40717c <memcpy+0xcc>
  4071c8:	3a01      	subs	r2, #1
  4071ca:	f811 3b01 	ldrb.w	r3, [r1], #1
  4071ce:	f800 3b01 	strb.w	r3, [r0], #1
  4071d2:	d2f9      	bcs.n	4071c8 <memcpy+0x118>
  4071d4:	780b      	ldrb	r3, [r1, #0]
  4071d6:	7003      	strb	r3, [r0, #0]
  4071d8:	784b      	ldrb	r3, [r1, #1]
  4071da:	7043      	strb	r3, [r0, #1]
  4071dc:	788b      	ldrb	r3, [r1, #2]
  4071de:	7083      	strb	r3, [r0, #2]
  4071e0:	4660      	mov	r0, ip
  4071e2:	4770      	bx	lr

004071e4 <memmove>:
  4071e4:	4288      	cmp	r0, r1
  4071e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4071e8:	d90d      	bls.n	407206 <memmove+0x22>
  4071ea:	188b      	adds	r3, r1, r2
  4071ec:	4298      	cmp	r0, r3
  4071ee:	d20a      	bcs.n	407206 <memmove+0x22>
  4071f0:	1884      	adds	r4, r0, r2
  4071f2:	2a00      	cmp	r2, #0
  4071f4:	d051      	beq.n	40729a <memmove+0xb6>
  4071f6:	4622      	mov	r2, r4
  4071f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4071fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407200:	4299      	cmp	r1, r3
  407202:	d1f9      	bne.n	4071f8 <memmove+0x14>
  407204:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407206:	2a0f      	cmp	r2, #15
  407208:	d948      	bls.n	40729c <memmove+0xb8>
  40720a:	ea41 0300 	orr.w	r3, r1, r0
  40720e:	079b      	lsls	r3, r3, #30
  407210:	d146      	bne.n	4072a0 <memmove+0xbc>
  407212:	f100 0410 	add.w	r4, r0, #16
  407216:	f101 0310 	add.w	r3, r1, #16
  40721a:	4615      	mov	r5, r2
  40721c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407220:	f844 6c10 	str.w	r6, [r4, #-16]
  407224:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407228:	f844 6c0c 	str.w	r6, [r4, #-12]
  40722c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407230:	f844 6c08 	str.w	r6, [r4, #-8]
  407234:	3d10      	subs	r5, #16
  407236:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40723a:	f844 6c04 	str.w	r6, [r4, #-4]
  40723e:	2d0f      	cmp	r5, #15
  407240:	f103 0310 	add.w	r3, r3, #16
  407244:	f104 0410 	add.w	r4, r4, #16
  407248:	d8e8      	bhi.n	40721c <memmove+0x38>
  40724a:	f1a2 0310 	sub.w	r3, r2, #16
  40724e:	f023 030f 	bic.w	r3, r3, #15
  407252:	f002 0e0f 	and.w	lr, r2, #15
  407256:	3310      	adds	r3, #16
  407258:	f1be 0f03 	cmp.w	lr, #3
  40725c:	4419      	add	r1, r3
  40725e:	4403      	add	r3, r0
  407260:	d921      	bls.n	4072a6 <memmove+0xc2>
  407262:	1f1e      	subs	r6, r3, #4
  407264:	460d      	mov	r5, r1
  407266:	4674      	mov	r4, lr
  407268:	3c04      	subs	r4, #4
  40726a:	f855 7b04 	ldr.w	r7, [r5], #4
  40726e:	f846 7f04 	str.w	r7, [r6, #4]!
  407272:	2c03      	cmp	r4, #3
  407274:	d8f8      	bhi.n	407268 <memmove+0x84>
  407276:	f1ae 0404 	sub.w	r4, lr, #4
  40727a:	f024 0403 	bic.w	r4, r4, #3
  40727e:	3404      	adds	r4, #4
  407280:	4421      	add	r1, r4
  407282:	4423      	add	r3, r4
  407284:	f002 0203 	and.w	r2, r2, #3
  407288:	b162      	cbz	r2, 4072a4 <memmove+0xc0>
  40728a:	3b01      	subs	r3, #1
  40728c:	440a      	add	r2, r1
  40728e:	f811 4b01 	ldrb.w	r4, [r1], #1
  407292:	f803 4f01 	strb.w	r4, [r3, #1]!
  407296:	428a      	cmp	r2, r1
  407298:	d1f9      	bne.n	40728e <memmove+0xaa>
  40729a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40729c:	4603      	mov	r3, r0
  40729e:	e7f3      	b.n	407288 <memmove+0xa4>
  4072a0:	4603      	mov	r3, r0
  4072a2:	e7f2      	b.n	40728a <memmove+0xa6>
  4072a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4072a6:	4672      	mov	r2, lr
  4072a8:	e7ee      	b.n	407288 <memmove+0xa4>
  4072aa:	bf00      	nop

004072ac <__malloc_lock>:
  4072ac:	4801      	ldr	r0, [pc, #4]	; (4072b4 <__malloc_lock+0x8>)
  4072ae:	f7ff bb65 	b.w	40697c <__retarget_lock_acquire_recursive>
  4072b2:	bf00      	nop
  4072b4:	20401098 	.word	0x20401098

004072b8 <__malloc_unlock>:
  4072b8:	4801      	ldr	r0, [pc, #4]	; (4072c0 <__malloc_unlock+0x8>)
  4072ba:	f7ff bb61 	b.w	406980 <__retarget_lock_release_recursive>
  4072be:	bf00      	nop
  4072c0:	20401098 	.word	0x20401098

004072c4 <_realloc_r>:
  4072c4:	2900      	cmp	r1, #0
  4072c6:	f000 8095 	beq.w	4073f4 <_realloc_r+0x130>
  4072ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4072ce:	460d      	mov	r5, r1
  4072d0:	4616      	mov	r6, r2
  4072d2:	b083      	sub	sp, #12
  4072d4:	4680      	mov	r8, r0
  4072d6:	f106 070b 	add.w	r7, r6, #11
  4072da:	f7ff ffe7 	bl	4072ac <__malloc_lock>
  4072de:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4072e2:	2f16      	cmp	r7, #22
  4072e4:	f02e 0403 	bic.w	r4, lr, #3
  4072e8:	f1a5 0908 	sub.w	r9, r5, #8
  4072ec:	d83c      	bhi.n	407368 <_realloc_r+0xa4>
  4072ee:	2210      	movs	r2, #16
  4072f0:	4617      	mov	r7, r2
  4072f2:	42be      	cmp	r6, r7
  4072f4:	d83d      	bhi.n	407372 <_realloc_r+0xae>
  4072f6:	4294      	cmp	r4, r2
  4072f8:	da43      	bge.n	407382 <_realloc_r+0xbe>
  4072fa:	4bc4      	ldr	r3, [pc, #784]	; (40760c <_realloc_r+0x348>)
  4072fc:	6899      	ldr	r1, [r3, #8]
  4072fe:	eb09 0004 	add.w	r0, r9, r4
  407302:	4288      	cmp	r0, r1
  407304:	f000 80b4 	beq.w	407470 <_realloc_r+0x1ac>
  407308:	6843      	ldr	r3, [r0, #4]
  40730a:	f023 0101 	bic.w	r1, r3, #1
  40730e:	4401      	add	r1, r0
  407310:	6849      	ldr	r1, [r1, #4]
  407312:	07c9      	lsls	r1, r1, #31
  407314:	d54c      	bpl.n	4073b0 <_realloc_r+0xec>
  407316:	f01e 0f01 	tst.w	lr, #1
  40731a:	f000 809b 	beq.w	407454 <_realloc_r+0x190>
  40731e:	4631      	mov	r1, r6
  407320:	4640      	mov	r0, r8
  407322:	f7ff fbaf 	bl	406a84 <_malloc_r>
  407326:	4606      	mov	r6, r0
  407328:	2800      	cmp	r0, #0
  40732a:	d03a      	beq.n	4073a2 <_realloc_r+0xde>
  40732c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407330:	f023 0301 	bic.w	r3, r3, #1
  407334:	444b      	add	r3, r9
  407336:	f1a0 0208 	sub.w	r2, r0, #8
  40733a:	429a      	cmp	r2, r3
  40733c:	f000 8121 	beq.w	407582 <_realloc_r+0x2be>
  407340:	1f22      	subs	r2, r4, #4
  407342:	2a24      	cmp	r2, #36	; 0x24
  407344:	f200 8107 	bhi.w	407556 <_realloc_r+0x292>
  407348:	2a13      	cmp	r2, #19
  40734a:	f200 80db 	bhi.w	407504 <_realloc_r+0x240>
  40734e:	4603      	mov	r3, r0
  407350:	462a      	mov	r2, r5
  407352:	6811      	ldr	r1, [r2, #0]
  407354:	6019      	str	r1, [r3, #0]
  407356:	6851      	ldr	r1, [r2, #4]
  407358:	6059      	str	r1, [r3, #4]
  40735a:	6892      	ldr	r2, [r2, #8]
  40735c:	609a      	str	r2, [r3, #8]
  40735e:	4629      	mov	r1, r5
  407360:	4640      	mov	r0, r8
  407362:	f7ff f871 	bl	406448 <_free_r>
  407366:	e01c      	b.n	4073a2 <_realloc_r+0xde>
  407368:	f027 0707 	bic.w	r7, r7, #7
  40736c:	2f00      	cmp	r7, #0
  40736e:	463a      	mov	r2, r7
  407370:	dabf      	bge.n	4072f2 <_realloc_r+0x2e>
  407372:	2600      	movs	r6, #0
  407374:	230c      	movs	r3, #12
  407376:	4630      	mov	r0, r6
  407378:	f8c8 3000 	str.w	r3, [r8]
  40737c:	b003      	add	sp, #12
  40737e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407382:	462e      	mov	r6, r5
  407384:	1be3      	subs	r3, r4, r7
  407386:	2b0f      	cmp	r3, #15
  407388:	d81e      	bhi.n	4073c8 <_realloc_r+0x104>
  40738a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40738e:	f003 0301 	and.w	r3, r3, #1
  407392:	4323      	orrs	r3, r4
  407394:	444c      	add	r4, r9
  407396:	f8c9 3004 	str.w	r3, [r9, #4]
  40739a:	6863      	ldr	r3, [r4, #4]
  40739c:	f043 0301 	orr.w	r3, r3, #1
  4073a0:	6063      	str	r3, [r4, #4]
  4073a2:	4640      	mov	r0, r8
  4073a4:	f7ff ff88 	bl	4072b8 <__malloc_unlock>
  4073a8:	4630      	mov	r0, r6
  4073aa:	b003      	add	sp, #12
  4073ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4073b0:	f023 0303 	bic.w	r3, r3, #3
  4073b4:	18e1      	adds	r1, r4, r3
  4073b6:	4291      	cmp	r1, r2
  4073b8:	db1f      	blt.n	4073fa <_realloc_r+0x136>
  4073ba:	68c3      	ldr	r3, [r0, #12]
  4073bc:	6882      	ldr	r2, [r0, #8]
  4073be:	462e      	mov	r6, r5
  4073c0:	60d3      	str	r3, [r2, #12]
  4073c2:	460c      	mov	r4, r1
  4073c4:	609a      	str	r2, [r3, #8]
  4073c6:	e7dd      	b.n	407384 <_realloc_r+0xc0>
  4073c8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4073cc:	eb09 0107 	add.w	r1, r9, r7
  4073d0:	f002 0201 	and.w	r2, r2, #1
  4073d4:	444c      	add	r4, r9
  4073d6:	f043 0301 	orr.w	r3, r3, #1
  4073da:	4317      	orrs	r7, r2
  4073dc:	f8c9 7004 	str.w	r7, [r9, #4]
  4073e0:	604b      	str	r3, [r1, #4]
  4073e2:	6863      	ldr	r3, [r4, #4]
  4073e4:	f043 0301 	orr.w	r3, r3, #1
  4073e8:	3108      	adds	r1, #8
  4073ea:	6063      	str	r3, [r4, #4]
  4073ec:	4640      	mov	r0, r8
  4073ee:	f7ff f82b 	bl	406448 <_free_r>
  4073f2:	e7d6      	b.n	4073a2 <_realloc_r+0xde>
  4073f4:	4611      	mov	r1, r2
  4073f6:	f7ff bb45 	b.w	406a84 <_malloc_r>
  4073fa:	f01e 0f01 	tst.w	lr, #1
  4073fe:	d18e      	bne.n	40731e <_realloc_r+0x5a>
  407400:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407404:	eba9 0a01 	sub.w	sl, r9, r1
  407408:	f8da 1004 	ldr.w	r1, [sl, #4]
  40740c:	f021 0103 	bic.w	r1, r1, #3
  407410:	440b      	add	r3, r1
  407412:	4423      	add	r3, r4
  407414:	4293      	cmp	r3, r2
  407416:	db25      	blt.n	407464 <_realloc_r+0x1a0>
  407418:	68c2      	ldr	r2, [r0, #12]
  40741a:	6881      	ldr	r1, [r0, #8]
  40741c:	4656      	mov	r6, sl
  40741e:	60ca      	str	r2, [r1, #12]
  407420:	6091      	str	r1, [r2, #8]
  407422:	f8da 100c 	ldr.w	r1, [sl, #12]
  407426:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40742a:	1f22      	subs	r2, r4, #4
  40742c:	2a24      	cmp	r2, #36	; 0x24
  40742e:	60c1      	str	r1, [r0, #12]
  407430:	6088      	str	r0, [r1, #8]
  407432:	f200 8094 	bhi.w	40755e <_realloc_r+0x29a>
  407436:	2a13      	cmp	r2, #19
  407438:	d96f      	bls.n	40751a <_realloc_r+0x256>
  40743a:	6829      	ldr	r1, [r5, #0]
  40743c:	f8ca 1008 	str.w	r1, [sl, #8]
  407440:	6869      	ldr	r1, [r5, #4]
  407442:	f8ca 100c 	str.w	r1, [sl, #12]
  407446:	2a1b      	cmp	r2, #27
  407448:	f200 80a2 	bhi.w	407590 <_realloc_r+0x2cc>
  40744c:	3508      	adds	r5, #8
  40744e:	f10a 0210 	add.w	r2, sl, #16
  407452:	e063      	b.n	40751c <_realloc_r+0x258>
  407454:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407458:	eba9 0a03 	sub.w	sl, r9, r3
  40745c:	f8da 1004 	ldr.w	r1, [sl, #4]
  407460:	f021 0103 	bic.w	r1, r1, #3
  407464:	1863      	adds	r3, r4, r1
  407466:	4293      	cmp	r3, r2
  407468:	f6ff af59 	blt.w	40731e <_realloc_r+0x5a>
  40746c:	4656      	mov	r6, sl
  40746e:	e7d8      	b.n	407422 <_realloc_r+0x15e>
  407470:	6841      	ldr	r1, [r0, #4]
  407472:	f021 0b03 	bic.w	fp, r1, #3
  407476:	44a3      	add	fp, r4
  407478:	f107 0010 	add.w	r0, r7, #16
  40747c:	4583      	cmp	fp, r0
  40747e:	da56      	bge.n	40752e <_realloc_r+0x26a>
  407480:	f01e 0f01 	tst.w	lr, #1
  407484:	f47f af4b 	bne.w	40731e <_realloc_r+0x5a>
  407488:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40748c:	eba9 0a01 	sub.w	sl, r9, r1
  407490:	f8da 1004 	ldr.w	r1, [sl, #4]
  407494:	f021 0103 	bic.w	r1, r1, #3
  407498:	448b      	add	fp, r1
  40749a:	4558      	cmp	r0, fp
  40749c:	dce2      	bgt.n	407464 <_realloc_r+0x1a0>
  40749e:	4656      	mov	r6, sl
  4074a0:	f8da 100c 	ldr.w	r1, [sl, #12]
  4074a4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4074a8:	1f22      	subs	r2, r4, #4
  4074aa:	2a24      	cmp	r2, #36	; 0x24
  4074ac:	60c1      	str	r1, [r0, #12]
  4074ae:	6088      	str	r0, [r1, #8]
  4074b0:	f200 808f 	bhi.w	4075d2 <_realloc_r+0x30e>
  4074b4:	2a13      	cmp	r2, #19
  4074b6:	f240 808a 	bls.w	4075ce <_realloc_r+0x30a>
  4074ba:	6829      	ldr	r1, [r5, #0]
  4074bc:	f8ca 1008 	str.w	r1, [sl, #8]
  4074c0:	6869      	ldr	r1, [r5, #4]
  4074c2:	f8ca 100c 	str.w	r1, [sl, #12]
  4074c6:	2a1b      	cmp	r2, #27
  4074c8:	f200 808a 	bhi.w	4075e0 <_realloc_r+0x31c>
  4074cc:	3508      	adds	r5, #8
  4074ce:	f10a 0210 	add.w	r2, sl, #16
  4074d2:	6829      	ldr	r1, [r5, #0]
  4074d4:	6011      	str	r1, [r2, #0]
  4074d6:	6869      	ldr	r1, [r5, #4]
  4074d8:	6051      	str	r1, [r2, #4]
  4074da:	68a9      	ldr	r1, [r5, #8]
  4074dc:	6091      	str	r1, [r2, #8]
  4074de:	eb0a 0107 	add.w	r1, sl, r7
  4074e2:	ebab 0207 	sub.w	r2, fp, r7
  4074e6:	f042 0201 	orr.w	r2, r2, #1
  4074ea:	6099      	str	r1, [r3, #8]
  4074ec:	604a      	str	r2, [r1, #4]
  4074ee:	f8da 3004 	ldr.w	r3, [sl, #4]
  4074f2:	f003 0301 	and.w	r3, r3, #1
  4074f6:	431f      	orrs	r7, r3
  4074f8:	4640      	mov	r0, r8
  4074fa:	f8ca 7004 	str.w	r7, [sl, #4]
  4074fe:	f7ff fedb 	bl	4072b8 <__malloc_unlock>
  407502:	e751      	b.n	4073a8 <_realloc_r+0xe4>
  407504:	682b      	ldr	r3, [r5, #0]
  407506:	6003      	str	r3, [r0, #0]
  407508:	686b      	ldr	r3, [r5, #4]
  40750a:	6043      	str	r3, [r0, #4]
  40750c:	2a1b      	cmp	r2, #27
  40750e:	d82d      	bhi.n	40756c <_realloc_r+0x2a8>
  407510:	f100 0308 	add.w	r3, r0, #8
  407514:	f105 0208 	add.w	r2, r5, #8
  407518:	e71b      	b.n	407352 <_realloc_r+0x8e>
  40751a:	4632      	mov	r2, r6
  40751c:	6829      	ldr	r1, [r5, #0]
  40751e:	6011      	str	r1, [r2, #0]
  407520:	6869      	ldr	r1, [r5, #4]
  407522:	6051      	str	r1, [r2, #4]
  407524:	68a9      	ldr	r1, [r5, #8]
  407526:	6091      	str	r1, [r2, #8]
  407528:	461c      	mov	r4, r3
  40752a:	46d1      	mov	r9, sl
  40752c:	e72a      	b.n	407384 <_realloc_r+0xc0>
  40752e:	eb09 0107 	add.w	r1, r9, r7
  407532:	ebab 0b07 	sub.w	fp, fp, r7
  407536:	f04b 0201 	orr.w	r2, fp, #1
  40753a:	6099      	str	r1, [r3, #8]
  40753c:	604a      	str	r2, [r1, #4]
  40753e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407542:	f003 0301 	and.w	r3, r3, #1
  407546:	431f      	orrs	r7, r3
  407548:	4640      	mov	r0, r8
  40754a:	f845 7c04 	str.w	r7, [r5, #-4]
  40754e:	f7ff feb3 	bl	4072b8 <__malloc_unlock>
  407552:	462e      	mov	r6, r5
  407554:	e728      	b.n	4073a8 <_realloc_r+0xe4>
  407556:	4629      	mov	r1, r5
  407558:	f7ff fe44 	bl	4071e4 <memmove>
  40755c:	e6ff      	b.n	40735e <_realloc_r+0x9a>
  40755e:	4629      	mov	r1, r5
  407560:	4630      	mov	r0, r6
  407562:	461c      	mov	r4, r3
  407564:	46d1      	mov	r9, sl
  407566:	f7ff fe3d 	bl	4071e4 <memmove>
  40756a:	e70b      	b.n	407384 <_realloc_r+0xc0>
  40756c:	68ab      	ldr	r3, [r5, #8]
  40756e:	6083      	str	r3, [r0, #8]
  407570:	68eb      	ldr	r3, [r5, #12]
  407572:	60c3      	str	r3, [r0, #12]
  407574:	2a24      	cmp	r2, #36	; 0x24
  407576:	d017      	beq.n	4075a8 <_realloc_r+0x2e4>
  407578:	f100 0310 	add.w	r3, r0, #16
  40757c:	f105 0210 	add.w	r2, r5, #16
  407580:	e6e7      	b.n	407352 <_realloc_r+0x8e>
  407582:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407586:	f023 0303 	bic.w	r3, r3, #3
  40758a:	441c      	add	r4, r3
  40758c:	462e      	mov	r6, r5
  40758e:	e6f9      	b.n	407384 <_realloc_r+0xc0>
  407590:	68a9      	ldr	r1, [r5, #8]
  407592:	f8ca 1010 	str.w	r1, [sl, #16]
  407596:	68e9      	ldr	r1, [r5, #12]
  407598:	f8ca 1014 	str.w	r1, [sl, #20]
  40759c:	2a24      	cmp	r2, #36	; 0x24
  40759e:	d00c      	beq.n	4075ba <_realloc_r+0x2f6>
  4075a0:	3510      	adds	r5, #16
  4075a2:	f10a 0218 	add.w	r2, sl, #24
  4075a6:	e7b9      	b.n	40751c <_realloc_r+0x258>
  4075a8:	692b      	ldr	r3, [r5, #16]
  4075aa:	6103      	str	r3, [r0, #16]
  4075ac:	696b      	ldr	r3, [r5, #20]
  4075ae:	6143      	str	r3, [r0, #20]
  4075b0:	f105 0218 	add.w	r2, r5, #24
  4075b4:	f100 0318 	add.w	r3, r0, #24
  4075b8:	e6cb      	b.n	407352 <_realloc_r+0x8e>
  4075ba:	692a      	ldr	r2, [r5, #16]
  4075bc:	f8ca 2018 	str.w	r2, [sl, #24]
  4075c0:	696a      	ldr	r2, [r5, #20]
  4075c2:	f8ca 201c 	str.w	r2, [sl, #28]
  4075c6:	3518      	adds	r5, #24
  4075c8:	f10a 0220 	add.w	r2, sl, #32
  4075cc:	e7a6      	b.n	40751c <_realloc_r+0x258>
  4075ce:	4632      	mov	r2, r6
  4075d0:	e77f      	b.n	4074d2 <_realloc_r+0x20e>
  4075d2:	4629      	mov	r1, r5
  4075d4:	4630      	mov	r0, r6
  4075d6:	9301      	str	r3, [sp, #4]
  4075d8:	f7ff fe04 	bl	4071e4 <memmove>
  4075dc:	9b01      	ldr	r3, [sp, #4]
  4075de:	e77e      	b.n	4074de <_realloc_r+0x21a>
  4075e0:	68a9      	ldr	r1, [r5, #8]
  4075e2:	f8ca 1010 	str.w	r1, [sl, #16]
  4075e6:	68e9      	ldr	r1, [r5, #12]
  4075e8:	f8ca 1014 	str.w	r1, [sl, #20]
  4075ec:	2a24      	cmp	r2, #36	; 0x24
  4075ee:	d003      	beq.n	4075f8 <_realloc_r+0x334>
  4075f0:	3510      	adds	r5, #16
  4075f2:	f10a 0218 	add.w	r2, sl, #24
  4075f6:	e76c      	b.n	4074d2 <_realloc_r+0x20e>
  4075f8:	692a      	ldr	r2, [r5, #16]
  4075fa:	f8ca 2018 	str.w	r2, [sl, #24]
  4075fe:	696a      	ldr	r2, [r5, #20]
  407600:	f8ca 201c 	str.w	r2, [sl, #28]
  407604:	3518      	adds	r5, #24
  407606:	f10a 0220 	add.w	r2, sl, #32
  40760a:	e762      	b.n	4074d2 <_realloc_r+0x20e>
  40760c:	20400670 	.word	0x20400670

00407610 <_sbrk_r>:
  407610:	b538      	push	{r3, r4, r5, lr}
  407612:	4c07      	ldr	r4, [pc, #28]	; (407630 <_sbrk_r+0x20>)
  407614:	2300      	movs	r3, #0
  407616:	4605      	mov	r5, r0
  407618:	4608      	mov	r0, r1
  40761a:	6023      	str	r3, [r4, #0]
  40761c:	f7fd f98e 	bl	40493c <_sbrk>
  407620:	1c43      	adds	r3, r0, #1
  407622:	d000      	beq.n	407626 <_sbrk_r+0x16>
  407624:	bd38      	pop	{r3, r4, r5, pc}
  407626:	6823      	ldr	r3, [r4, #0]
  407628:	2b00      	cmp	r3, #0
  40762a:	d0fb      	beq.n	407624 <_sbrk_r+0x14>
  40762c:	602b      	str	r3, [r5, #0]
  40762e:	bd38      	pop	{r3, r4, r5, pc}
  407630:	204010ac 	.word	0x204010ac

00407634 <__sread>:
  407634:	b510      	push	{r4, lr}
  407636:	460c      	mov	r4, r1
  407638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40763c:	f000 fa66 	bl	407b0c <_read_r>
  407640:	2800      	cmp	r0, #0
  407642:	db03      	blt.n	40764c <__sread+0x18>
  407644:	6d23      	ldr	r3, [r4, #80]	; 0x50
  407646:	4403      	add	r3, r0
  407648:	6523      	str	r3, [r4, #80]	; 0x50
  40764a:	bd10      	pop	{r4, pc}
  40764c:	89a3      	ldrh	r3, [r4, #12]
  40764e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407652:	81a3      	strh	r3, [r4, #12]
  407654:	bd10      	pop	{r4, pc}
  407656:	bf00      	nop

00407658 <__swrite>:
  407658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40765c:	4616      	mov	r6, r2
  40765e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  407662:	461f      	mov	r7, r3
  407664:	05d3      	lsls	r3, r2, #23
  407666:	460c      	mov	r4, r1
  407668:	4605      	mov	r5, r0
  40766a:	d507      	bpl.n	40767c <__swrite+0x24>
  40766c:	2200      	movs	r2, #0
  40766e:	2302      	movs	r3, #2
  407670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407674:	f000 fa34 	bl	407ae0 <_lseek_r>
  407678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40767c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407680:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  407684:	81a2      	strh	r2, [r4, #12]
  407686:	463b      	mov	r3, r7
  407688:	4632      	mov	r2, r6
  40768a:	4628      	mov	r0, r5
  40768c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407690:	f000 b914 	b.w	4078bc <_write_r>

00407694 <__sseek>:
  407694:	b510      	push	{r4, lr}
  407696:	460c      	mov	r4, r1
  407698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40769c:	f000 fa20 	bl	407ae0 <_lseek_r>
  4076a0:	89a3      	ldrh	r3, [r4, #12]
  4076a2:	1c42      	adds	r2, r0, #1
  4076a4:	bf0e      	itee	eq
  4076a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4076aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4076ae:	6520      	strne	r0, [r4, #80]	; 0x50
  4076b0:	81a3      	strh	r3, [r4, #12]
  4076b2:	bd10      	pop	{r4, pc}

004076b4 <__sclose>:
  4076b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4076b8:	f000 b978 	b.w	4079ac <_close_r>
  4076bc:	0000      	movs	r0, r0
	...

004076c0 <strlen>:
  4076c0:	f890 f000 	pld	[r0]
  4076c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4076c8:	f020 0107 	bic.w	r1, r0, #7
  4076cc:	f06f 0c00 	mvn.w	ip, #0
  4076d0:	f010 0407 	ands.w	r4, r0, #7
  4076d4:	f891 f020 	pld	[r1, #32]
  4076d8:	f040 8049 	bne.w	40776e <strlen+0xae>
  4076dc:	f04f 0400 	mov.w	r4, #0
  4076e0:	f06f 0007 	mvn.w	r0, #7
  4076e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4076e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4076ec:	f100 0008 	add.w	r0, r0, #8
  4076f0:	fa82 f24c 	uadd8	r2, r2, ip
  4076f4:	faa4 f28c 	sel	r2, r4, ip
  4076f8:	fa83 f34c 	uadd8	r3, r3, ip
  4076fc:	faa2 f38c 	sel	r3, r2, ip
  407700:	bb4b      	cbnz	r3, 407756 <strlen+0x96>
  407702:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  407706:	fa82 f24c 	uadd8	r2, r2, ip
  40770a:	f100 0008 	add.w	r0, r0, #8
  40770e:	faa4 f28c 	sel	r2, r4, ip
  407712:	fa83 f34c 	uadd8	r3, r3, ip
  407716:	faa2 f38c 	sel	r3, r2, ip
  40771a:	b9e3      	cbnz	r3, 407756 <strlen+0x96>
  40771c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  407720:	fa82 f24c 	uadd8	r2, r2, ip
  407724:	f100 0008 	add.w	r0, r0, #8
  407728:	faa4 f28c 	sel	r2, r4, ip
  40772c:	fa83 f34c 	uadd8	r3, r3, ip
  407730:	faa2 f38c 	sel	r3, r2, ip
  407734:	b97b      	cbnz	r3, 407756 <strlen+0x96>
  407736:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40773a:	f101 0120 	add.w	r1, r1, #32
  40773e:	fa82 f24c 	uadd8	r2, r2, ip
  407742:	f100 0008 	add.w	r0, r0, #8
  407746:	faa4 f28c 	sel	r2, r4, ip
  40774a:	fa83 f34c 	uadd8	r3, r3, ip
  40774e:	faa2 f38c 	sel	r3, r2, ip
  407752:	2b00      	cmp	r3, #0
  407754:	d0c6      	beq.n	4076e4 <strlen+0x24>
  407756:	2a00      	cmp	r2, #0
  407758:	bf04      	itt	eq
  40775a:	3004      	addeq	r0, #4
  40775c:	461a      	moveq	r2, r3
  40775e:	ba12      	rev	r2, r2
  407760:	fab2 f282 	clz	r2, r2
  407764:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407768:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40776c:	4770      	bx	lr
  40776e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407772:	f004 0503 	and.w	r5, r4, #3
  407776:	f1c4 0000 	rsb	r0, r4, #0
  40777a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40777e:	f014 0f04 	tst.w	r4, #4
  407782:	f891 f040 	pld	[r1, #64]	; 0x40
  407786:	fa0c f505 	lsl.w	r5, ip, r5
  40778a:	ea62 0205 	orn	r2, r2, r5
  40778e:	bf1c      	itt	ne
  407790:	ea63 0305 	ornne	r3, r3, r5
  407794:	4662      	movne	r2, ip
  407796:	f04f 0400 	mov.w	r4, #0
  40779a:	e7a9      	b.n	4076f0 <strlen+0x30>

0040779c <__swbuf_r>:
  40779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40779e:	460d      	mov	r5, r1
  4077a0:	4614      	mov	r4, r2
  4077a2:	4606      	mov	r6, r0
  4077a4:	b110      	cbz	r0, 4077ac <__swbuf_r+0x10>
  4077a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4077a8:	2b00      	cmp	r3, #0
  4077aa:	d04b      	beq.n	407844 <__swbuf_r+0xa8>
  4077ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4077b0:	69a3      	ldr	r3, [r4, #24]
  4077b2:	60a3      	str	r3, [r4, #8]
  4077b4:	b291      	uxth	r1, r2
  4077b6:	0708      	lsls	r0, r1, #28
  4077b8:	d539      	bpl.n	40782e <__swbuf_r+0x92>
  4077ba:	6923      	ldr	r3, [r4, #16]
  4077bc:	2b00      	cmp	r3, #0
  4077be:	d036      	beq.n	40782e <__swbuf_r+0x92>
  4077c0:	b2ed      	uxtb	r5, r5
  4077c2:	0489      	lsls	r1, r1, #18
  4077c4:	462f      	mov	r7, r5
  4077c6:	d515      	bpl.n	4077f4 <__swbuf_r+0x58>
  4077c8:	6822      	ldr	r2, [r4, #0]
  4077ca:	6961      	ldr	r1, [r4, #20]
  4077cc:	1ad3      	subs	r3, r2, r3
  4077ce:	428b      	cmp	r3, r1
  4077d0:	da1c      	bge.n	40780c <__swbuf_r+0x70>
  4077d2:	3301      	adds	r3, #1
  4077d4:	68a1      	ldr	r1, [r4, #8]
  4077d6:	1c50      	adds	r0, r2, #1
  4077d8:	3901      	subs	r1, #1
  4077da:	60a1      	str	r1, [r4, #8]
  4077dc:	6020      	str	r0, [r4, #0]
  4077de:	7015      	strb	r5, [r2, #0]
  4077e0:	6962      	ldr	r2, [r4, #20]
  4077e2:	429a      	cmp	r2, r3
  4077e4:	d01a      	beq.n	40781c <__swbuf_r+0x80>
  4077e6:	89a3      	ldrh	r3, [r4, #12]
  4077e8:	07db      	lsls	r3, r3, #31
  4077ea:	d501      	bpl.n	4077f0 <__swbuf_r+0x54>
  4077ec:	2d0a      	cmp	r5, #10
  4077ee:	d015      	beq.n	40781c <__swbuf_r+0x80>
  4077f0:	4638      	mov	r0, r7
  4077f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4077f4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4077f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4077fa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4077fe:	81a2      	strh	r2, [r4, #12]
  407800:	6822      	ldr	r2, [r4, #0]
  407802:	6661      	str	r1, [r4, #100]	; 0x64
  407804:	6961      	ldr	r1, [r4, #20]
  407806:	1ad3      	subs	r3, r2, r3
  407808:	428b      	cmp	r3, r1
  40780a:	dbe2      	blt.n	4077d2 <__swbuf_r+0x36>
  40780c:	4621      	mov	r1, r4
  40780e:	4630      	mov	r0, r6
  407810:	f7fe fc9c 	bl	40614c <_fflush_r>
  407814:	b940      	cbnz	r0, 407828 <__swbuf_r+0x8c>
  407816:	6822      	ldr	r2, [r4, #0]
  407818:	2301      	movs	r3, #1
  40781a:	e7db      	b.n	4077d4 <__swbuf_r+0x38>
  40781c:	4621      	mov	r1, r4
  40781e:	4630      	mov	r0, r6
  407820:	f7fe fc94 	bl	40614c <_fflush_r>
  407824:	2800      	cmp	r0, #0
  407826:	d0e3      	beq.n	4077f0 <__swbuf_r+0x54>
  407828:	f04f 37ff 	mov.w	r7, #4294967295
  40782c:	e7e0      	b.n	4077f0 <__swbuf_r+0x54>
  40782e:	4621      	mov	r1, r4
  407830:	4630      	mov	r0, r6
  407832:	f7fe fb77 	bl	405f24 <__swsetup_r>
  407836:	2800      	cmp	r0, #0
  407838:	d1f6      	bne.n	407828 <__swbuf_r+0x8c>
  40783a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40783e:	6923      	ldr	r3, [r4, #16]
  407840:	b291      	uxth	r1, r2
  407842:	e7bd      	b.n	4077c0 <__swbuf_r+0x24>
  407844:	f7fe fcda 	bl	4061fc <__sinit>
  407848:	e7b0      	b.n	4077ac <__swbuf_r+0x10>
  40784a:	bf00      	nop

0040784c <_wcrtomb_r>:
  40784c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40784e:	4606      	mov	r6, r0
  407850:	b085      	sub	sp, #20
  407852:	461f      	mov	r7, r3
  407854:	b189      	cbz	r1, 40787a <_wcrtomb_r+0x2e>
  407856:	4c10      	ldr	r4, [pc, #64]	; (407898 <_wcrtomb_r+0x4c>)
  407858:	4d10      	ldr	r5, [pc, #64]	; (40789c <_wcrtomb_r+0x50>)
  40785a:	6824      	ldr	r4, [r4, #0]
  40785c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40785e:	2c00      	cmp	r4, #0
  407860:	bf08      	it	eq
  407862:	462c      	moveq	r4, r5
  407864:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  407868:	47a0      	blx	r4
  40786a:	1c43      	adds	r3, r0, #1
  40786c:	d103      	bne.n	407876 <_wcrtomb_r+0x2a>
  40786e:	2200      	movs	r2, #0
  407870:	238a      	movs	r3, #138	; 0x8a
  407872:	603a      	str	r2, [r7, #0]
  407874:	6033      	str	r3, [r6, #0]
  407876:	b005      	add	sp, #20
  407878:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40787a:	460c      	mov	r4, r1
  40787c:	4906      	ldr	r1, [pc, #24]	; (407898 <_wcrtomb_r+0x4c>)
  40787e:	4a07      	ldr	r2, [pc, #28]	; (40789c <_wcrtomb_r+0x50>)
  407880:	6809      	ldr	r1, [r1, #0]
  407882:	6b49      	ldr	r1, [r1, #52]	; 0x34
  407884:	2900      	cmp	r1, #0
  407886:	bf08      	it	eq
  407888:	4611      	moveq	r1, r2
  40788a:	4622      	mov	r2, r4
  40788c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  407890:	a901      	add	r1, sp, #4
  407892:	47a0      	blx	r4
  407894:	e7e9      	b.n	40786a <_wcrtomb_r+0x1e>
  407896:	bf00      	nop
  407898:	204000d0 	.word	0x204000d0
  40789c:	20400504 	.word	0x20400504

004078a0 <__ascii_wctomb>:
  4078a0:	b121      	cbz	r1, 4078ac <__ascii_wctomb+0xc>
  4078a2:	2aff      	cmp	r2, #255	; 0xff
  4078a4:	d804      	bhi.n	4078b0 <__ascii_wctomb+0x10>
  4078a6:	700a      	strb	r2, [r1, #0]
  4078a8:	2001      	movs	r0, #1
  4078aa:	4770      	bx	lr
  4078ac:	4608      	mov	r0, r1
  4078ae:	4770      	bx	lr
  4078b0:	238a      	movs	r3, #138	; 0x8a
  4078b2:	6003      	str	r3, [r0, #0]
  4078b4:	f04f 30ff 	mov.w	r0, #4294967295
  4078b8:	4770      	bx	lr
  4078ba:	bf00      	nop

004078bc <_write_r>:
  4078bc:	b570      	push	{r4, r5, r6, lr}
  4078be:	460d      	mov	r5, r1
  4078c0:	4c08      	ldr	r4, [pc, #32]	; (4078e4 <_write_r+0x28>)
  4078c2:	4611      	mov	r1, r2
  4078c4:	4606      	mov	r6, r0
  4078c6:	461a      	mov	r2, r3
  4078c8:	4628      	mov	r0, r5
  4078ca:	2300      	movs	r3, #0
  4078cc:	6023      	str	r3, [r4, #0]
  4078ce:	f7f9 fa43 	bl	400d58 <_write>
  4078d2:	1c43      	adds	r3, r0, #1
  4078d4:	d000      	beq.n	4078d8 <_write_r+0x1c>
  4078d6:	bd70      	pop	{r4, r5, r6, pc}
  4078d8:	6823      	ldr	r3, [r4, #0]
  4078da:	2b00      	cmp	r3, #0
  4078dc:	d0fb      	beq.n	4078d6 <_write_r+0x1a>
  4078de:	6033      	str	r3, [r6, #0]
  4078e0:	bd70      	pop	{r4, r5, r6, pc}
  4078e2:	bf00      	nop
  4078e4:	204010ac 	.word	0x204010ac

004078e8 <__register_exitproc>:
  4078e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4078ec:	4d2c      	ldr	r5, [pc, #176]	; (4079a0 <__register_exitproc+0xb8>)
  4078ee:	4606      	mov	r6, r0
  4078f0:	6828      	ldr	r0, [r5, #0]
  4078f2:	4698      	mov	r8, r3
  4078f4:	460f      	mov	r7, r1
  4078f6:	4691      	mov	r9, r2
  4078f8:	f7ff f840 	bl	40697c <__retarget_lock_acquire_recursive>
  4078fc:	4b29      	ldr	r3, [pc, #164]	; (4079a4 <__register_exitproc+0xbc>)
  4078fe:	681c      	ldr	r4, [r3, #0]
  407900:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407904:	2b00      	cmp	r3, #0
  407906:	d03e      	beq.n	407986 <__register_exitproc+0x9e>
  407908:	685a      	ldr	r2, [r3, #4]
  40790a:	2a1f      	cmp	r2, #31
  40790c:	dc1c      	bgt.n	407948 <__register_exitproc+0x60>
  40790e:	f102 0e01 	add.w	lr, r2, #1
  407912:	b176      	cbz	r6, 407932 <__register_exitproc+0x4a>
  407914:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407918:	2401      	movs	r4, #1
  40791a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40791e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407922:	4094      	lsls	r4, r2
  407924:	4320      	orrs	r0, r4
  407926:	2e02      	cmp	r6, #2
  407928:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40792c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  407930:	d023      	beq.n	40797a <__register_exitproc+0x92>
  407932:	3202      	adds	r2, #2
  407934:	f8c3 e004 	str.w	lr, [r3, #4]
  407938:	6828      	ldr	r0, [r5, #0]
  40793a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40793e:	f7ff f81f 	bl	406980 <__retarget_lock_release_recursive>
  407942:	2000      	movs	r0, #0
  407944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407948:	4b17      	ldr	r3, [pc, #92]	; (4079a8 <__register_exitproc+0xc0>)
  40794a:	b30b      	cbz	r3, 407990 <__register_exitproc+0xa8>
  40794c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407950:	f7ff f890 	bl	406a74 <malloc>
  407954:	4603      	mov	r3, r0
  407956:	b1d8      	cbz	r0, 407990 <__register_exitproc+0xa8>
  407958:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40795c:	6002      	str	r2, [r0, #0]
  40795e:	2100      	movs	r1, #0
  407960:	6041      	str	r1, [r0, #4]
  407962:	460a      	mov	r2, r1
  407964:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  407968:	f04f 0e01 	mov.w	lr, #1
  40796c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407970:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407974:	2e00      	cmp	r6, #0
  407976:	d0dc      	beq.n	407932 <__register_exitproc+0x4a>
  407978:	e7cc      	b.n	407914 <__register_exitproc+0x2c>
  40797a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40797e:	430c      	orrs	r4, r1
  407980:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407984:	e7d5      	b.n	407932 <__register_exitproc+0x4a>
  407986:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40798a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40798e:	e7bb      	b.n	407908 <__register_exitproc+0x20>
  407990:	6828      	ldr	r0, [r5, #0]
  407992:	f7fe fff5 	bl	406980 <__retarget_lock_release_recursive>
  407996:	f04f 30ff 	mov.w	r0, #4294967295
  40799a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40799e:	bf00      	nop
  4079a0:	20400500 	.word	0x20400500
  4079a4:	00408250 	.word	0x00408250
  4079a8:	00406a75 	.word	0x00406a75

004079ac <_close_r>:
  4079ac:	b538      	push	{r3, r4, r5, lr}
  4079ae:	4c07      	ldr	r4, [pc, #28]	; (4079cc <_close_r+0x20>)
  4079b0:	2300      	movs	r3, #0
  4079b2:	4605      	mov	r5, r0
  4079b4:	4608      	mov	r0, r1
  4079b6:	6023      	str	r3, [r4, #0]
  4079b8:	f7fc ffdc 	bl	404974 <_close>
  4079bc:	1c43      	adds	r3, r0, #1
  4079be:	d000      	beq.n	4079c2 <_close_r+0x16>
  4079c0:	bd38      	pop	{r3, r4, r5, pc}
  4079c2:	6823      	ldr	r3, [r4, #0]
  4079c4:	2b00      	cmp	r3, #0
  4079c6:	d0fb      	beq.n	4079c0 <_close_r+0x14>
  4079c8:	602b      	str	r3, [r5, #0]
  4079ca:	bd38      	pop	{r3, r4, r5, pc}
  4079cc:	204010ac 	.word	0x204010ac

004079d0 <_fclose_r>:
  4079d0:	b570      	push	{r4, r5, r6, lr}
  4079d2:	b159      	cbz	r1, 4079ec <_fclose_r+0x1c>
  4079d4:	4605      	mov	r5, r0
  4079d6:	460c      	mov	r4, r1
  4079d8:	b110      	cbz	r0, 4079e0 <_fclose_r+0x10>
  4079da:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4079dc:	2b00      	cmp	r3, #0
  4079de:	d03c      	beq.n	407a5a <_fclose_r+0x8a>
  4079e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4079e2:	07d8      	lsls	r0, r3, #31
  4079e4:	d505      	bpl.n	4079f2 <_fclose_r+0x22>
  4079e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4079ea:	b92b      	cbnz	r3, 4079f8 <_fclose_r+0x28>
  4079ec:	2600      	movs	r6, #0
  4079ee:	4630      	mov	r0, r6
  4079f0:	bd70      	pop	{r4, r5, r6, pc}
  4079f2:	89a3      	ldrh	r3, [r4, #12]
  4079f4:	0599      	lsls	r1, r3, #22
  4079f6:	d53c      	bpl.n	407a72 <_fclose_r+0xa2>
  4079f8:	4621      	mov	r1, r4
  4079fa:	4628      	mov	r0, r5
  4079fc:	f7fe fb06 	bl	40600c <__sflush_r>
  407a00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407a02:	4606      	mov	r6, r0
  407a04:	b133      	cbz	r3, 407a14 <_fclose_r+0x44>
  407a06:	69e1      	ldr	r1, [r4, #28]
  407a08:	4628      	mov	r0, r5
  407a0a:	4798      	blx	r3
  407a0c:	2800      	cmp	r0, #0
  407a0e:	bfb8      	it	lt
  407a10:	f04f 36ff 	movlt.w	r6, #4294967295
  407a14:	89a3      	ldrh	r3, [r4, #12]
  407a16:	061a      	lsls	r2, r3, #24
  407a18:	d422      	bmi.n	407a60 <_fclose_r+0x90>
  407a1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407a1c:	b141      	cbz	r1, 407a30 <_fclose_r+0x60>
  407a1e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407a22:	4299      	cmp	r1, r3
  407a24:	d002      	beq.n	407a2c <_fclose_r+0x5c>
  407a26:	4628      	mov	r0, r5
  407a28:	f7fe fd0e 	bl	406448 <_free_r>
  407a2c:	2300      	movs	r3, #0
  407a2e:	6323      	str	r3, [r4, #48]	; 0x30
  407a30:	6c61      	ldr	r1, [r4, #68]	; 0x44
  407a32:	b121      	cbz	r1, 407a3e <_fclose_r+0x6e>
  407a34:	4628      	mov	r0, r5
  407a36:	f7fe fd07 	bl	406448 <_free_r>
  407a3a:	2300      	movs	r3, #0
  407a3c:	6463      	str	r3, [r4, #68]	; 0x44
  407a3e:	f7fe fc09 	bl	406254 <__sfp_lock_acquire>
  407a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407a44:	2200      	movs	r2, #0
  407a46:	07db      	lsls	r3, r3, #31
  407a48:	81a2      	strh	r2, [r4, #12]
  407a4a:	d50e      	bpl.n	407a6a <_fclose_r+0x9a>
  407a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407a4e:	f7fe ff93 	bl	406978 <__retarget_lock_close_recursive>
  407a52:	f7fe fc05 	bl	406260 <__sfp_lock_release>
  407a56:	4630      	mov	r0, r6
  407a58:	bd70      	pop	{r4, r5, r6, pc}
  407a5a:	f7fe fbcf 	bl	4061fc <__sinit>
  407a5e:	e7bf      	b.n	4079e0 <_fclose_r+0x10>
  407a60:	6921      	ldr	r1, [r4, #16]
  407a62:	4628      	mov	r0, r5
  407a64:	f7fe fcf0 	bl	406448 <_free_r>
  407a68:	e7d7      	b.n	407a1a <_fclose_r+0x4a>
  407a6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407a6c:	f7fe ff88 	bl	406980 <__retarget_lock_release_recursive>
  407a70:	e7ec      	b.n	407a4c <_fclose_r+0x7c>
  407a72:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407a74:	f7fe ff82 	bl	40697c <__retarget_lock_acquire_recursive>
  407a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a7c:	2b00      	cmp	r3, #0
  407a7e:	d1bb      	bne.n	4079f8 <_fclose_r+0x28>
  407a80:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407a82:	f016 0601 	ands.w	r6, r6, #1
  407a86:	d1b1      	bne.n	4079ec <_fclose_r+0x1c>
  407a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407a8a:	f7fe ff79 	bl	406980 <__retarget_lock_release_recursive>
  407a8e:	4630      	mov	r0, r6
  407a90:	bd70      	pop	{r4, r5, r6, pc}
  407a92:	bf00      	nop

00407a94 <_fstat_r>:
  407a94:	b538      	push	{r3, r4, r5, lr}
  407a96:	460b      	mov	r3, r1
  407a98:	4c07      	ldr	r4, [pc, #28]	; (407ab8 <_fstat_r+0x24>)
  407a9a:	4605      	mov	r5, r0
  407a9c:	4611      	mov	r1, r2
  407a9e:	4618      	mov	r0, r3
  407aa0:	2300      	movs	r3, #0
  407aa2:	6023      	str	r3, [r4, #0]
  407aa4:	f7fc ff69 	bl	40497a <_fstat>
  407aa8:	1c43      	adds	r3, r0, #1
  407aaa:	d000      	beq.n	407aae <_fstat_r+0x1a>
  407aac:	bd38      	pop	{r3, r4, r5, pc}
  407aae:	6823      	ldr	r3, [r4, #0]
  407ab0:	2b00      	cmp	r3, #0
  407ab2:	d0fb      	beq.n	407aac <_fstat_r+0x18>
  407ab4:	602b      	str	r3, [r5, #0]
  407ab6:	bd38      	pop	{r3, r4, r5, pc}
  407ab8:	204010ac 	.word	0x204010ac

00407abc <_isatty_r>:
  407abc:	b538      	push	{r3, r4, r5, lr}
  407abe:	4c07      	ldr	r4, [pc, #28]	; (407adc <_isatty_r+0x20>)
  407ac0:	2300      	movs	r3, #0
  407ac2:	4605      	mov	r5, r0
  407ac4:	4608      	mov	r0, r1
  407ac6:	6023      	str	r3, [r4, #0]
  407ac8:	f7fc ff5c 	bl	404984 <_isatty>
  407acc:	1c43      	adds	r3, r0, #1
  407ace:	d000      	beq.n	407ad2 <_isatty_r+0x16>
  407ad0:	bd38      	pop	{r3, r4, r5, pc}
  407ad2:	6823      	ldr	r3, [r4, #0]
  407ad4:	2b00      	cmp	r3, #0
  407ad6:	d0fb      	beq.n	407ad0 <_isatty_r+0x14>
  407ad8:	602b      	str	r3, [r5, #0]
  407ada:	bd38      	pop	{r3, r4, r5, pc}
  407adc:	204010ac 	.word	0x204010ac

00407ae0 <_lseek_r>:
  407ae0:	b570      	push	{r4, r5, r6, lr}
  407ae2:	460d      	mov	r5, r1
  407ae4:	4c08      	ldr	r4, [pc, #32]	; (407b08 <_lseek_r+0x28>)
  407ae6:	4611      	mov	r1, r2
  407ae8:	4606      	mov	r6, r0
  407aea:	461a      	mov	r2, r3
  407aec:	4628      	mov	r0, r5
  407aee:	2300      	movs	r3, #0
  407af0:	6023      	str	r3, [r4, #0]
  407af2:	f7fc ff49 	bl	404988 <_lseek>
  407af6:	1c43      	adds	r3, r0, #1
  407af8:	d000      	beq.n	407afc <_lseek_r+0x1c>
  407afa:	bd70      	pop	{r4, r5, r6, pc}
  407afc:	6823      	ldr	r3, [r4, #0]
  407afe:	2b00      	cmp	r3, #0
  407b00:	d0fb      	beq.n	407afa <_lseek_r+0x1a>
  407b02:	6033      	str	r3, [r6, #0]
  407b04:	bd70      	pop	{r4, r5, r6, pc}
  407b06:	bf00      	nop
  407b08:	204010ac 	.word	0x204010ac

00407b0c <_read_r>:
  407b0c:	b570      	push	{r4, r5, r6, lr}
  407b0e:	460d      	mov	r5, r1
  407b10:	4c08      	ldr	r4, [pc, #32]	; (407b34 <_read_r+0x28>)
  407b12:	4611      	mov	r1, r2
  407b14:	4606      	mov	r6, r0
  407b16:	461a      	mov	r2, r3
  407b18:	4628      	mov	r0, r5
  407b1a:	2300      	movs	r3, #0
  407b1c:	6023      	str	r3, [r4, #0]
  407b1e:	f7f9 f8fd 	bl	400d1c <_read>
  407b22:	1c43      	adds	r3, r0, #1
  407b24:	d000      	beq.n	407b28 <_read_r+0x1c>
  407b26:	bd70      	pop	{r4, r5, r6, pc}
  407b28:	6823      	ldr	r3, [r4, #0]
  407b2a:	2b00      	cmp	r3, #0
  407b2c:	d0fb      	beq.n	407b26 <_read_r+0x1a>
  407b2e:	6033      	str	r3, [r6, #0]
  407b30:	bd70      	pop	{r4, r5, r6, pc}
  407b32:	bf00      	nop
  407b34:	204010ac 	.word	0x204010ac

00407b38 <__aeabi_uldivmod>:
  407b38:	b953      	cbnz	r3, 407b50 <__aeabi_uldivmod+0x18>
  407b3a:	b94a      	cbnz	r2, 407b50 <__aeabi_uldivmod+0x18>
  407b3c:	2900      	cmp	r1, #0
  407b3e:	bf08      	it	eq
  407b40:	2800      	cmpeq	r0, #0
  407b42:	bf1c      	itt	ne
  407b44:	f04f 31ff 	movne.w	r1, #4294967295
  407b48:	f04f 30ff 	movne.w	r0, #4294967295
  407b4c:	f000 b97a 	b.w	407e44 <__aeabi_idiv0>
  407b50:	f1ad 0c08 	sub.w	ip, sp, #8
  407b54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407b58:	f000 f806 	bl	407b68 <__udivmoddi4>
  407b5c:	f8dd e004 	ldr.w	lr, [sp, #4]
  407b60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407b64:	b004      	add	sp, #16
  407b66:	4770      	bx	lr

00407b68 <__udivmoddi4>:
  407b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407b6c:	468c      	mov	ip, r1
  407b6e:	460d      	mov	r5, r1
  407b70:	4604      	mov	r4, r0
  407b72:	9e08      	ldr	r6, [sp, #32]
  407b74:	2b00      	cmp	r3, #0
  407b76:	d151      	bne.n	407c1c <__udivmoddi4+0xb4>
  407b78:	428a      	cmp	r2, r1
  407b7a:	4617      	mov	r7, r2
  407b7c:	d96d      	bls.n	407c5a <__udivmoddi4+0xf2>
  407b7e:	fab2 fe82 	clz	lr, r2
  407b82:	f1be 0f00 	cmp.w	lr, #0
  407b86:	d00b      	beq.n	407ba0 <__udivmoddi4+0x38>
  407b88:	f1ce 0c20 	rsb	ip, lr, #32
  407b8c:	fa01 f50e 	lsl.w	r5, r1, lr
  407b90:	fa20 fc0c 	lsr.w	ip, r0, ip
  407b94:	fa02 f70e 	lsl.w	r7, r2, lr
  407b98:	ea4c 0c05 	orr.w	ip, ip, r5
  407b9c:	fa00 f40e 	lsl.w	r4, r0, lr
  407ba0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  407ba4:	0c25      	lsrs	r5, r4, #16
  407ba6:	fbbc f8fa 	udiv	r8, ip, sl
  407baa:	fa1f f987 	uxth.w	r9, r7
  407bae:	fb0a cc18 	mls	ip, sl, r8, ip
  407bb2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  407bb6:	fb08 f309 	mul.w	r3, r8, r9
  407bba:	42ab      	cmp	r3, r5
  407bbc:	d90a      	bls.n	407bd4 <__udivmoddi4+0x6c>
  407bbe:	19ed      	adds	r5, r5, r7
  407bc0:	f108 32ff 	add.w	r2, r8, #4294967295
  407bc4:	f080 8123 	bcs.w	407e0e <__udivmoddi4+0x2a6>
  407bc8:	42ab      	cmp	r3, r5
  407bca:	f240 8120 	bls.w	407e0e <__udivmoddi4+0x2a6>
  407bce:	f1a8 0802 	sub.w	r8, r8, #2
  407bd2:	443d      	add	r5, r7
  407bd4:	1aed      	subs	r5, r5, r3
  407bd6:	b2a4      	uxth	r4, r4
  407bd8:	fbb5 f0fa 	udiv	r0, r5, sl
  407bdc:	fb0a 5510 	mls	r5, sl, r0, r5
  407be0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  407be4:	fb00 f909 	mul.w	r9, r0, r9
  407be8:	45a1      	cmp	r9, r4
  407bea:	d909      	bls.n	407c00 <__udivmoddi4+0x98>
  407bec:	19e4      	adds	r4, r4, r7
  407bee:	f100 33ff 	add.w	r3, r0, #4294967295
  407bf2:	f080 810a 	bcs.w	407e0a <__udivmoddi4+0x2a2>
  407bf6:	45a1      	cmp	r9, r4
  407bf8:	f240 8107 	bls.w	407e0a <__udivmoddi4+0x2a2>
  407bfc:	3802      	subs	r0, #2
  407bfe:	443c      	add	r4, r7
  407c00:	eba4 0409 	sub.w	r4, r4, r9
  407c04:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407c08:	2100      	movs	r1, #0
  407c0a:	2e00      	cmp	r6, #0
  407c0c:	d061      	beq.n	407cd2 <__udivmoddi4+0x16a>
  407c0e:	fa24 f40e 	lsr.w	r4, r4, lr
  407c12:	2300      	movs	r3, #0
  407c14:	6034      	str	r4, [r6, #0]
  407c16:	6073      	str	r3, [r6, #4]
  407c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c1c:	428b      	cmp	r3, r1
  407c1e:	d907      	bls.n	407c30 <__udivmoddi4+0xc8>
  407c20:	2e00      	cmp	r6, #0
  407c22:	d054      	beq.n	407cce <__udivmoddi4+0x166>
  407c24:	2100      	movs	r1, #0
  407c26:	e886 0021 	stmia.w	r6, {r0, r5}
  407c2a:	4608      	mov	r0, r1
  407c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c30:	fab3 f183 	clz	r1, r3
  407c34:	2900      	cmp	r1, #0
  407c36:	f040 808e 	bne.w	407d56 <__udivmoddi4+0x1ee>
  407c3a:	42ab      	cmp	r3, r5
  407c3c:	d302      	bcc.n	407c44 <__udivmoddi4+0xdc>
  407c3e:	4282      	cmp	r2, r0
  407c40:	f200 80fa 	bhi.w	407e38 <__udivmoddi4+0x2d0>
  407c44:	1a84      	subs	r4, r0, r2
  407c46:	eb65 0503 	sbc.w	r5, r5, r3
  407c4a:	2001      	movs	r0, #1
  407c4c:	46ac      	mov	ip, r5
  407c4e:	2e00      	cmp	r6, #0
  407c50:	d03f      	beq.n	407cd2 <__udivmoddi4+0x16a>
  407c52:	e886 1010 	stmia.w	r6, {r4, ip}
  407c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c5a:	b912      	cbnz	r2, 407c62 <__udivmoddi4+0xfa>
  407c5c:	2701      	movs	r7, #1
  407c5e:	fbb7 f7f2 	udiv	r7, r7, r2
  407c62:	fab7 fe87 	clz	lr, r7
  407c66:	f1be 0f00 	cmp.w	lr, #0
  407c6a:	d134      	bne.n	407cd6 <__udivmoddi4+0x16e>
  407c6c:	1beb      	subs	r3, r5, r7
  407c6e:	0c3a      	lsrs	r2, r7, #16
  407c70:	fa1f fc87 	uxth.w	ip, r7
  407c74:	2101      	movs	r1, #1
  407c76:	fbb3 f8f2 	udiv	r8, r3, r2
  407c7a:	0c25      	lsrs	r5, r4, #16
  407c7c:	fb02 3318 	mls	r3, r2, r8, r3
  407c80:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407c84:	fb0c f308 	mul.w	r3, ip, r8
  407c88:	42ab      	cmp	r3, r5
  407c8a:	d907      	bls.n	407c9c <__udivmoddi4+0x134>
  407c8c:	19ed      	adds	r5, r5, r7
  407c8e:	f108 30ff 	add.w	r0, r8, #4294967295
  407c92:	d202      	bcs.n	407c9a <__udivmoddi4+0x132>
  407c94:	42ab      	cmp	r3, r5
  407c96:	f200 80d1 	bhi.w	407e3c <__udivmoddi4+0x2d4>
  407c9a:	4680      	mov	r8, r0
  407c9c:	1aed      	subs	r5, r5, r3
  407c9e:	b2a3      	uxth	r3, r4
  407ca0:	fbb5 f0f2 	udiv	r0, r5, r2
  407ca4:	fb02 5510 	mls	r5, r2, r0, r5
  407ca8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  407cac:	fb0c fc00 	mul.w	ip, ip, r0
  407cb0:	45a4      	cmp	ip, r4
  407cb2:	d907      	bls.n	407cc4 <__udivmoddi4+0x15c>
  407cb4:	19e4      	adds	r4, r4, r7
  407cb6:	f100 33ff 	add.w	r3, r0, #4294967295
  407cba:	d202      	bcs.n	407cc2 <__udivmoddi4+0x15a>
  407cbc:	45a4      	cmp	ip, r4
  407cbe:	f200 80b8 	bhi.w	407e32 <__udivmoddi4+0x2ca>
  407cc2:	4618      	mov	r0, r3
  407cc4:	eba4 040c 	sub.w	r4, r4, ip
  407cc8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407ccc:	e79d      	b.n	407c0a <__udivmoddi4+0xa2>
  407cce:	4631      	mov	r1, r6
  407cd0:	4630      	mov	r0, r6
  407cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407cd6:	f1ce 0420 	rsb	r4, lr, #32
  407cda:	fa05 f30e 	lsl.w	r3, r5, lr
  407cde:	fa07 f70e 	lsl.w	r7, r7, lr
  407ce2:	fa20 f804 	lsr.w	r8, r0, r4
  407ce6:	0c3a      	lsrs	r2, r7, #16
  407ce8:	fa25 f404 	lsr.w	r4, r5, r4
  407cec:	ea48 0803 	orr.w	r8, r8, r3
  407cf0:	fbb4 f1f2 	udiv	r1, r4, r2
  407cf4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  407cf8:	fb02 4411 	mls	r4, r2, r1, r4
  407cfc:	fa1f fc87 	uxth.w	ip, r7
  407d00:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  407d04:	fb01 f30c 	mul.w	r3, r1, ip
  407d08:	42ab      	cmp	r3, r5
  407d0a:	fa00 f40e 	lsl.w	r4, r0, lr
  407d0e:	d909      	bls.n	407d24 <__udivmoddi4+0x1bc>
  407d10:	19ed      	adds	r5, r5, r7
  407d12:	f101 30ff 	add.w	r0, r1, #4294967295
  407d16:	f080 808a 	bcs.w	407e2e <__udivmoddi4+0x2c6>
  407d1a:	42ab      	cmp	r3, r5
  407d1c:	f240 8087 	bls.w	407e2e <__udivmoddi4+0x2c6>
  407d20:	3902      	subs	r1, #2
  407d22:	443d      	add	r5, r7
  407d24:	1aeb      	subs	r3, r5, r3
  407d26:	fa1f f588 	uxth.w	r5, r8
  407d2a:	fbb3 f0f2 	udiv	r0, r3, r2
  407d2e:	fb02 3310 	mls	r3, r2, r0, r3
  407d32:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407d36:	fb00 f30c 	mul.w	r3, r0, ip
  407d3a:	42ab      	cmp	r3, r5
  407d3c:	d907      	bls.n	407d4e <__udivmoddi4+0x1e6>
  407d3e:	19ed      	adds	r5, r5, r7
  407d40:	f100 38ff 	add.w	r8, r0, #4294967295
  407d44:	d26f      	bcs.n	407e26 <__udivmoddi4+0x2be>
  407d46:	42ab      	cmp	r3, r5
  407d48:	d96d      	bls.n	407e26 <__udivmoddi4+0x2be>
  407d4a:	3802      	subs	r0, #2
  407d4c:	443d      	add	r5, r7
  407d4e:	1aeb      	subs	r3, r5, r3
  407d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  407d54:	e78f      	b.n	407c76 <__udivmoddi4+0x10e>
  407d56:	f1c1 0720 	rsb	r7, r1, #32
  407d5a:	fa22 f807 	lsr.w	r8, r2, r7
  407d5e:	408b      	lsls	r3, r1
  407d60:	fa05 f401 	lsl.w	r4, r5, r1
  407d64:	ea48 0303 	orr.w	r3, r8, r3
  407d68:	fa20 fe07 	lsr.w	lr, r0, r7
  407d6c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  407d70:	40fd      	lsrs	r5, r7
  407d72:	ea4e 0e04 	orr.w	lr, lr, r4
  407d76:	fbb5 f9fc 	udiv	r9, r5, ip
  407d7a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  407d7e:	fb0c 5519 	mls	r5, ip, r9, r5
  407d82:	fa1f f883 	uxth.w	r8, r3
  407d86:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  407d8a:	fb09 f408 	mul.w	r4, r9, r8
  407d8e:	42ac      	cmp	r4, r5
  407d90:	fa02 f201 	lsl.w	r2, r2, r1
  407d94:	fa00 fa01 	lsl.w	sl, r0, r1
  407d98:	d908      	bls.n	407dac <__udivmoddi4+0x244>
  407d9a:	18ed      	adds	r5, r5, r3
  407d9c:	f109 30ff 	add.w	r0, r9, #4294967295
  407da0:	d243      	bcs.n	407e2a <__udivmoddi4+0x2c2>
  407da2:	42ac      	cmp	r4, r5
  407da4:	d941      	bls.n	407e2a <__udivmoddi4+0x2c2>
  407da6:	f1a9 0902 	sub.w	r9, r9, #2
  407daa:	441d      	add	r5, r3
  407dac:	1b2d      	subs	r5, r5, r4
  407dae:	fa1f fe8e 	uxth.w	lr, lr
  407db2:	fbb5 f0fc 	udiv	r0, r5, ip
  407db6:	fb0c 5510 	mls	r5, ip, r0, r5
  407dba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  407dbe:	fb00 f808 	mul.w	r8, r0, r8
  407dc2:	45a0      	cmp	r8, r4
  407dc4:	d907      	bls.n	407dd6 <__udivmoddi4+0x26e>
  407dc6:	18e4      	adds	r4, r4, r3
  407dc8:	f100 35ff 	add.w	r5, r0, #4294967295
  407dcc:	d229      	bcs.n	407e22 <__udivmoddi4+0x2ba>
  407dce:	45a0      	cmp	r8, r4
  407dd0:	d927      	bls.n	407e22 <__udivmoddi4+0x2ba>
  407dd2:	3802      	subs	r0, #2
  407dd4:	441c      	add	r4, r3
  407dd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  407dda:	eba4 0408 	sub.w	r4, r4, r8
  407dde:	fba0 8902 	umull	r8, r9, r0, r2
  407de2:	454c      	cmp	r4, r9
  407de4:	46c6      	mov	lr, r8
  407de6:	464d      	mov	r5, r9
  407de8:	d315      	bcc.n	407e16 <__udivmoddi4+0x2ae>
  407dea:	d012      	beq.n	407e12 <__udivmoddi4+0x2aa>
  407dec:	b156      	cbz	r6, 407e04 <__udivmoddi4+0x29c>
  407dee:	ebba 030e 	subs.w	r3, sl, lr
  407df2:	eb64 0405 	sbc.w	r4, r4, r5
  407df6:	fa04 f707 	lsl.w	r7, r4, r7
  407dfa:	40cb      	lsrs	r3, r1
  407dfc:	431f      	orrs	r7, r3
  407dfe:	40cc      	lsrs	r4, r1
  407e00:	6037      	str	r7, [r6, #0]
  407e02:	6074      	str	r4, [r6, #4]
  407e04:	2100      	movs	r1, #0
  407e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407e0a:	4618      	mov	r0, r3
  407e0c:	e6f8      	b.n	407c00 <__udivmoddi4+0x98>
  407e0e:	4690      	mov	r8, r2
  407e10:	e6e0      	b.n	407bd4 <__udivmoddi4+0x6c>
  407e12:	45c2      	cmp	sl, r8
  407e14:	d2ea      	bcs.n	407dec <__udivmoddi4+0x284>
  407e16:	ebb8 0e02 	subs.w	lr, r8, r2
  407e1a:	eb69 0503 	sbc.w	r5, r9, r3
  407e1e:	3801      	subs	r0, #1
  407e20:	e7e4      	b.n	407dec <__udivmoddi4+0x284>
  407e22:	4628      	mov	r0, r5
  407e24:	e7d7      	b.n	407dd6 <__udivmoddi4+0x26e>
  407e26:	4640      	mov	r0, r8
  407e28:	e791      	b.n	407d4e <__udivmoddi4+0x1e6>
  407e2a:	4681      	mov	r9, r0
  407e2c:	e7be      	b.n	407dac <__udivmoddi4+0x244>
  407e2e:	4601      	mov	r1, r0
  407e30:	e778      	b.n	407d24 <__udivmoddi4+0x1bc>
  407e32:	3802      	subs	r0, #2
  407e34:	443c      	add	r4, r7
  407e36:	e745      	b.n	407cc4 <__udivmoddi4+0x15c>
  407e38:	4608      	mov	r0, r1
  407e3a:	e708      	b.n	407c4e <__udivmoddi4+0xe6>
  407e3c:	f1a8 0802 	sub.w	r8, r8, #2
  407e40:	443d      	add	r5, r7
  407e42:	e72b      	b.n	407c9c <__udivmoddi4+0x134>

00407e44 <__aeabi_idiv0>:
  407e44:	4770      	bx	lr
  407e46:	bf00      	nop

00407e48 <__func__.10065>:
  407e48:	6473 6d5f 636d 695f 696e 5f74 6572 6461     sd_mmc_init_read
  407e58:	625f 6f6c 6b63 0073                         _blocks.

00407e60 <__func__.10082>:
  407e60:	6473 6d5f 636d 695f 696e 5f74 7277 7469     sd_mmc_init_writ
  407e70:	5f65 6c62 636f 736b 0000 0000               e_blocks....

00407e7c <__func__.9884>:
  407e7c:	6d6d 5f63 636d 5f69 706f 635f 6e6f 0064     mmc_mci_op_cond.

00407e8c <__func__.9899>:
  407e8c:	6473 6d5f 6963 6f5f 5f70 6f63 646e 0000     sd_mci_op_cond..

00407e9c <__func__.9921>:
  407e9c:	6473 635f 366d 735f 7465 685f 6769 5f68     sd_cm6_set_high_
  407eac:	7073 6565 0064 0000                         speed...

00407eb4 <__func__.9930>:
  407eb4:	6d6d 5f63 6d63 3664 735f 7465 625f 7375     mmc_cmd6_set_bus
  407ec4:	775f 6469 6874 0000                         _width..

00407ecc <__func__.9934>:
  407ecc:	6d6d 5f63 6d63 3664 735f 7465 685f 6769     mmc_cmd6_set_hig
  407edc:	5f68 7073 6565 0064                         h_speed.

00407ee4 <__func__.9939>:
  407ee4:	6473 635f 646d 0038                         sd_cmd8.

00407eec <__func__.9987>:
  407eec:	6473 6d5f 636d 635f 646d 3331 0000 0000     sd_mmc_cmd13....

00407efc <mmc_trans_multipliers>:
  407efc:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  407f0c:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  407f1c:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  407f2c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
  407f3c:	7453 7261 2074 4453 6320 7261 2064 6e69     Start SD card in
  407f4c:	7473 6c61 0a6c 000d 7325 203a 4d43 3844     stall...%s: CMD8
  407f5c:	7220 7365 3370 2032 7830 3025 7838 5520      resp32 0x%08x U
  407f6c:	554e 4153 4c42 2045 4143 4452 0d0a 0000     NUSABLE CARD....
  407f7c:	4453 6320 7261 2064 3256 0d0a 0000 0000     SD card V2......
  407f8c:	6453 6320 7261 2e64 2e2e 253a 0a73 0000     Sd card...:%s...
  407f9c:	7325 203a 4d43 3544 2035 6146 6c69 0d0a     %s: CMD55 Fail..
  407fac:	0000 0000 7325 203a 4341 444d 3134 4620     ....%s: ACMD41 F
  407fbc:	6961 0a6c 000d 0000 7325 203a 4341 444d     ail.....%s: ACMD
  407fcc:	3134 5420 6d69 6f65 7475 6f20 206e 7562     41 Timeout on bu
  407fdc:	7973 202c 6572 7073 3233 3020 2578 3830     sy, resp32 0x%08
  407fec:	2078 0d0a 0000 0000 7325 203a 4d43 3144     x ......%s: CMD1
  407ffc:	4d20 4943 4620 6961 206c 202d 7542 7973      MCI Fail - Busy
  40800c:	7220 7465 7972 2520 0a64 000d 7325 203a      retry %d...%s: 
  40801c:	4d43 3144 5420 6d69 6f65 7475 6f20 206e     CMD1 Timeout on 
  40802c:	7562 7973 0d0a 0000 7325 203a 4d43 3644     busy....%s: CMD6
  40803c:	4320 5241 5f44 5453 5441 5355 535f 4957      CARD_STATUS_SWI
  40804c:	4354 5f48 5245 4f52 0a52 000d 6425 622d     TCH_ERROR...%d-b
  40805c:	7469 6220 7375 7720 6469 6874 6520 616e     it bus width ena
  40806c:	6c62 6465 0a2e 000d 7325 203a 4d43 3644     bled....%s: CMD6
  40807c:	5320 5f44 5753 535f 4154 5554 5f53 5546      SD_SW_STATUS_FU
  40808c:	5f4e 5247 3150 425f 5355 0a59 000d 0000     N_GRP1_BUSY.....
  40809c:	4453 4d2f 434d 6320 7261 2064 6572 6461     SD/MMC card read
  4080ac:	0a79 000d 4453 4d2f 434d 6320 7261 2064     y...SD/MMC card 
  4080bc:	6e69 7469 6169 696c 617a 6974 6e6f 6620     initialization f
  4080cc:	6961 656c 0a64 000d 7453 7261 2074 4d4d     ailed...Start MM
  4080dc:	2043 6e49 7473 6c61 0a6c 000d 7325 203a     C Install...%s: 
  4080ec:	4d43 3144 2033 7542 7973 7420 6d69 6f65     CMD13 Busy timeo
  4080fc:	7475 0d0a 0000 0000 7325 203a 6552 6461     ut......%s: Read
  40810c:	6220 6f6c 6b63 2073 3025 6432 7220 7365      blocks %02d res
  40811c:	3370 2032 7830 3025 7838 4320 5241 5f44     p32 0x%08x CARD_
  40812c:	5453 5441 5355 455f 5252 525f 5f44 5257     STATUS_ERR_RD_WR
  40813c:	0d0a 0000 7325 203a 7257 7469 2065 6c62     ....%s: Write bl
  40814c:	636f 736b 2520 3230 2064 3172 3020 2578     ocks %02d r1 0x%
  40815c:	3830 2078 4143 4452 535f 4154 5554 5f53     08x CARD_STATUS_
  40816c:	5245 5f52 4452 575f 0a52 000d               ERR_RD_WR...

00408178 <sd_mmc_trans_units>:
  408178:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00408194 <sd_trans_multipliers>:
  408194:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  4081a4:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  4081b4:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  4081c4:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
  4081d4:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
  4081e4:	2074 2230 0000 0000 3231 3133 3332 3231     t 0"....12312312
  4081f4:	3133 3332 0000 0000                         3123....

004081fc <init_vector_ctr>:
  4081fc:	f1f0 f3f2 f5f4 f7fe f9f8 fbfa fdfc fffe     ................

0040820c <key256>:
  40820c:	7e2b 1615 ae28 a6d2 f7ab 8815 cf09 3c4f     +~..(.........O<
  40821c:	ac54 6125 f6da e567 68ab a54d 56d2 53ae     T.%a..g..hM..V.S
  40822c:	6854 7369 6920 2073 6f74 7420 7365 2074     This is to test 
  40823c:	6573 6972 6c61 6320 6e6f 6f73 656c 0a0d     serial console..
  40824c:	0000 0000                                   ....

00408250 <_global_impure_ptr>:
  408250:	00d8 2040 3130 3332 3534 3736 3938 4241     ..@ 0123456789AB
  408260:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  408270:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  408280:	296c 0000                                   l)..

00408284 <blanks.7217>:
  408284:	2020 2020 2020 2020 2020 2020 2020 2020                     

00408294 <zeroes.7218>:
  408294:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4082a4:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

004082b4 <_ctype_>:
  4082b4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4082c4:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4082d4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4082e4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  4082f4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  408304:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  408314:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  408324:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  408334:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

004083b8 <_init>:
  4083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4083ba:	bf00      	nop
  4083bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4083be:	bc08      	pop	{r3}
  4083c0:	469e      	mov	lr, r3
  4083c2:	4770      	bx	lr

004083c4 <__init_array_start>:
  4083c4:	00405fed 	.word	0x00405fed

004083c8 <__frame_dummy_init_array_entry>:
  4083c8:	00400165                                e.@.

004083cc <_fini>:
  4083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4083ce:	bf00      	nop
  4083d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4083d2:	bc08      	pop	{r3}
  4083d4:	469e      	mov	lr, r3
  4083d6:	4770      	bx	lr

004083d8 <__fini_array_start>:
  4083d8:	00400141 	.word	0x00400141
